{"version":3,"sources":["vendor/ember-cli/app-prefix.js","portia-web/app.js","portia-web/components/accordion-item.js","portia-web/components/annotations-plugin/component.js","portia-web/components/annotations-plugin/template.js","portia-web/components/bread-crumbs.js","portia-web/components/bs-badge.js","portia-web/components/bs-button.js","portia-web/components/bs-dropdown.js","portia-web/components/bs-label.js","portia-web/components/bs-message.js","portia-web/components/bs-modal.js","portia-web/components/bs-notifications.js","portia-web/components/check-box.js","portia-web/components/closable-accordion.js","portia-web/components/collapsible-text.js","portia-web/components/copy-clipboard.js","portia-web/components/copy-spider/component.js","portia-web/components/copy-spider/template.js","portia-web/components/display-button-edit-delete.js","portia-web/components/draggable-button.js","portia-web/components/dummy-component.js","portia-web/components/edit-item.js","portia-web/components/edit-items/component.js","portia-web/components/edit-items/template.js","portia-web/components/em-accordion-item.js","portia-web/components/em-accordion.js","portia-web/components/extracted-item.js","portia-web/components/extractor-dropzone.js","portia-web/components/file-download/component.js","portia-web/components/file-download/template.js","portia-web/components/inline-editable-text-field.js","portia-web/components/inline-help.js","portia-web/components/item-select.js","portia-web/components/j-breadcrumb.js","portia-web/components/j-breadcrumbs.js","portia-web/components/json-file-compare.js","portia-web/components/label-with-tooltip.js","portia-web/components/page-actions-editor.js","portia-web/components/pin-toolbox-button.js","portia-web/components/regex-text-field-with-button/component.js","portia-web/components/regex-text-field-with-button/template.js","portia-web/components/reorder-handler.js","portia-web/components/reorderable-list.js","portia-web/components/text-area-with-button.js","portia-web/components/text-area.js","portia-web/components/text-field-dropdown-button.js","portia-web/components/text-field-with-button.js","portia-web/components/text-field.js","portia-web/components/tool-box.js","portia-web/components/top-bar.js","portia-web/components/web-document-js/component.js","portia-web/components/web-document-js/template.js","portia-web/components/web-document.js","portia-web/components/wizard-box.js","portia-web/components/zero-clipboard.js","portia-web/controllers/application.js","portia-web/controllers/base-controller.js","portia-web/controllers/conflicts.js","portia-web/controllers/conflicts/index.js","portia-web/controllers/experiments.js","portia-web/controllers/items.js","portia-web/controllers/project.js","portia-web/controllers/project/index.js","portia-web/controllers/projects.js","portia-web/controllers/projects/index.js","portia-web/controllers/spider.js","portia-web/controllers/spider/index.js","portia-web/controllers/template-items.js","portia-web/controllers/template.js","portia-web/controllers/template/index.js","portia-web/helpers/trim.js","portia-web/initialize.js","portia-web/initializers/add-prototypes.js","portia-web/initializers/bread-crumbs.js","portia-web/initializers/controller-helper.js","portia-web/initializers/ember-cli-auto-register-helpers.js","portia-web/initializers/error-handler.js","portia-web/initializers/export-application-global.js","portia-web/initializers/idx-accordion-config.js","portia-web/initializers/messages.js","portia-web/initializers/project-models.js","portia-web/initializers/register-api.js","portia-web/initializers/register-modal.js","portia-web/initializers/register-page-interaction.js","portia-web/initializers/register-websocket.js","portia-web/initializers/toolbox.js","portia-web/mixins/conflict-mixin.js","portia-web/mixins/controller-utils.js","portia-web/mixins/draggable.js","portia-web/mixins/droppable.js","portia-web/mixins/guess-types.js","portia-web/mixins/modal-handler.js","portia-web/mixins/notification-handler.js","portia-web/mixins/popover.js","portia-web/mixins/size-listener.js","portia-web/models/annotation.js","portia-web/models/attribute.js","portia-web/models/conflict.js","portia-web/models/extracted-field.js","portia-web/models/extracted-item.js","portia-web/models/extracted-variant.js","portia-web/models/extractor.js","portia-web/models/ignore.js","portia-web/models/item-field.js","portia-web/models/item.js","portia-web/models/mapped-field-data.js","portia-web/models/simple-model.js","portia-web/models/spider.js","portia-web/models/template.js","portia-web/router.js","portia-web/routes/base-route.js","portia-web/routes/conflicts.js","portia-web/routes/conflicts/index.js","portia-web/routes/experiments.js","portia-web/routes/index.js","portia-web/routes/items.js","portia-web/routes/project.js","portia-web/routes/project/index.js","portia-web/routes/projects.js","portia-web/routes/projects/index.js","portia-web/routes/spider.js","portia-web/routes/spider/index.js","portia-web/routes/template-items.js","portia-web/routes/template.js","portia-web/routes/template/index.js","portia-web/templates/application.js","portia-web/templates/base-route.js","portia-web/templates/components/accordion-item.js","portia-web/templates/components/bread-crumbs.js","portia-web/templates/components/bs-badge.js","portia-web/templates/components/bs-button.js","portia-web/templates/components/bs-dropdown.js","portia-web/templates/components/bs-label.js","portia-web/templates/components/bs-message.js","portia-web/templates/components/bs-modal.js","portia-web/templates/components/bs-notification.js","portia-web/templates/components/closable-accordion.js","portia-web/templates/components/collapsible-text.js","portia-web/templates/components/display-button-delete.js","portia-web/templates/components/display-button-edit-delete.js","portia-web/templates/components/edit-item.js","portia-web/templates/components/em-accordion-item.js","portia-web/templates/components/extracted-item.js","portia-web/templates/components/extractor-dropzone.js","portia-web/templates/components/inline-editable-text-field.js","portia-web/templates/components/item-select.js","portia-web/templates/components/j-breadcrumb.js","portia-web/templates/components/j-breadcrumbs.js","portia-web/templates/components/json-file-compare.js","portia-web/templates/components/label-with-tooltip.js","portia-web/templates/components/page-actions-editor.js","portia-web/templates/components/pin-toolbox-button.js","portia-web/templates/components/text-area-with-button.js","portia-web/templates/components/text-field-dropdown-button.js","portia-web/templates/components/text-field-with-button.js","portia-web/templates/components/tool-box.js","portia-web/templates/components/top-bar.js","portia-web/templates/components/web-document.js","portia-web/templates/components/wizard-box.js","portia-web/templates/components/zero-clipboard.js","portia-web/templates/conflicts.js","portia-web/templates/conflicts/resolver.js","portia-web/templates/conflicts/toolbox.js","portia-web/templates/conflicts/topbar.js","portia-web/templates/empty/toolbox.js","portia-web/templates/empty/topbar.js","portia-web/templates/experiments.js","portia-web/templates/items/item.js","portia-web/templates/items/items.js","portia-web/templates/items/toolbox.js","portia-web/templates/loading.js","portia-web/templates/project.js","portia-web/templates/project/toolbox.js","portia-web/templates/project/topbar.js","portia-web/templates/projects.js","portia-web/templates/projects/toolbox.js","portia-web/templates/projects/topbar.js","portia-web/templates/spider.js","portia-web/templates/spider/toolbox.js","portia-web/templates/spider/topbar.js","portia-web/templates/template-items.js","portia-web/templates/template.js","portia-web/templates/template/toolbox.js","portia-web/templates/template/topbar.js","portia-web/tests/acceptance/edit-items-test.js","portia-web/tests/acceptance/edit-items-test.jshint.js","portia-web/tests/acceptance/open-project-test.js","portia-web/tests/acceptance/open-project-test.jshint.js","portia-web/tests/acceptance/spider-test.js","portia-web/tests/acceptance/spider-test.jshint.js","portia-web/tests/acceptance/web-document-test.js","portia-web/tests/acceptance/web-document-test.jshint.js","portia-web/tests/app.jshint.js","portia-web/tests/components/accordion-item.jshint.js","portia-web/tests/components/annotations-plugin/component.jshint.js","portia-web/tests/components/bs-badge.jshint.js","portia-web/tests/components/bs-button.jshint.js","portia-web/tests/components/bs-dropdown.jshint.js","portia-web/tests/components/bs-label.jshint.js","portia-web/tests/components/bs-message.jshint.js","portia-web/tests/components/bs-modal.jshint.js","portia-web/tests/components/bs-notifications.jshint.js","portia-web/tests/components/check-box.jshint.js","portia-web/tests/components/closable-accordion.jshint.js","portia-web/tests/components/collapsible-text.jshint.js","portia-web/tests/components/copy-clipboard.jshint.js","portia-web/tests/components/copy-spider/component.jshint.js","portia-web/tests/components/display-button-edit-delete.jshint.js","portia-web/tests/components/draggable-button.jshint.js","portia-web/tests/components/dummy-component.jshint.js","portia-web/tests/components/edit-item.jshint.js","portia-web/tests/components/edit-items/component.jshint.js","portia-web/tests/components/extracted-item.jshint.js","portia-web/tests/components/extractor-dropzone.jshint.js","portia-web/tests/components/file-download/component.jshint.js","portia-web/tests/components/inline-editable-text-field.jshint.js","portia-web/tests/components/inline-help.jshint.js","portia-web/tests/components/item-select.jshint.js","portia-web/tests/components/j-breadcrumb.jshint.js","portia-web/tests/components/j-breadcrumbs.jshint.js","portia-web/tests/components/json-file-compare.jshint.js","portia-web/tests/components/label-with-tooltip.jshint.js","portia-web/tests/components/page-actions-editor.jshint.js","portia-web/tests/components/pin-toolbox-button.jshint.js","portia-web/tests/components/regex-text-field-with-button/component.jshint.js","portia-web/tests/components/reorder-handler.jshint.js","portia-web/tests/components/reorderable-list.jshint.js","portia-web/tests/components/text-area-with-button.jshint.js","portia-web/tests/components/text-area.jshint.js","portia-web/tests/components/text-field-dropdown-button.jshint.js","portia-web/tests/components/text-field-with-button.jshint.js","portia-web/tests/components/text-field.jshint.js","portia-web/tests/components/tool-box.jshint.js","portia-web/tests/components/top-bar.jshint.js","portia-web/tests/components/web-document-js/component.jshint.js","portia-web/tests/components/web-document.jshint.js","portia-web/tests/components/wizard-box.jshint.js","portia-web/tests/controllers/application.jshint.js","portia-web/tests/controllers/base-controller.jshint.js","portia-web/tests/controllers/conflicts.jshint.js","portia-web/tests/controllers/conflicts/index.jshint.js","portia-web/tests/controllers/experiments.jshint.js","portia-web/tests/controllers/items.jshint.js","portia-web/tests/controllers/project.jshint.js","portia-web/tests/controllers/project/index.jshint.js","portia-web/tests/controllers/projects.jshint.js","portia-web/tests/controllers/projects/index.jshint.js","portia-web/tests/controllers/spider.jshint.js","portia-web/tests/controllers/spider/index.jshint.js","portia-web/tests/controllers/template-items.jshint.js","portia-web/tests/controllers/template.jshint.js","portia-web/tests/controllers/template/index.jshint.js","portia-web/tests/dummy/app/app.js","portia-web/tests/dummy/app/app.jshint.js","portia-web/tests/dummy/app/router.js","portia-web/tests/dummy/app/router.jshint.js","portia-web/tests/dummy/config/environment.js","portia-web/tests/dummy/config/environment.jshint.js","portia-web/tests/helpers/acceptance-test.js","portia-web/tests/helpers/acceptance-test.jshint.js","portia-web/tests/helpers/fixtures.js","portia-web/tests/helpers/fixtures.jshint.js","portia-web/tests/helpers/resolver.js","portia-web/tests/helpers/resolver.jshint.js","portia-web/tests/helpers/start-app.js","portia-web/tests/helpers/start-app.jshint.js","portia-web/tests/helpers/trim.jshint.js","portia-web/tests/helpers/wait.js","portia-web/tests/helpers/wait.jshint.js","portia-web/tests/helpers/websocket-mock.js","portia-web/tests/helpers/websocket-mock.jshint.js","portia-web/tests/initializers/add-prototypes.jshint.js","portia-web/tests/initializers/controller-helper.jshint.js","portia-web/tests/initializers/error-handler.jshint.js","portia-web/tests/initializers/messages.jshint.js","portia-web/tests/initializers/project-models.jshint.js","portia-web/tests/initializers/register-api.jshint.js","portia-web/tests/initializers/register-modal.jshint.js","portia-web/tests/initializers/register-page-interaction.jshint.js","portia-web/tests/initializers/register-websocket.jshint.js","portia-web/tests/initializers/toolbox.jshint.js","portia-web/tests/mixins/conflict-mixin.jshint.js","portia-web/tests/mixins/controller-utils.jshint.js","portia-web/tests/mixins/draggable.jshint.js","portia-web/tests/mixins/droppable.jshint.js","portia-web/tests/mixins/guess-types.jshint.js","portia-web/tests/mixins/modal-handler.jshint.js","portia-web/tests/mixins/notification-handler.jshint.js","portia-web/tests/mixins/popover.jshint.js","portia-web/tests/mixins/size-listener.jshint.js","portia-web/tests/models/annotation.jshint.js","portia-web/tests/models/attribute.jshint.js","portia-web/tests/models/conflict.jshint.js","portia-web/tests/models/extracted-field.jshint.js","portia-web/tests/models/extracted-item.jshint.js","portia-web/tests/models/extracted-variant.jshint.js","portia-web/tests/models/extractor.jshint.js","portia-web/tests/models/ignore.jshint.js","portia-web/tests/models/item-field.jshint.js","portia-web/tests/models/item.jshint.js","portia-web/tests/models/mapped-field-data.jshint.js","portia-web/tests/models/simple-model.jshint.js","portia-web/tests/models/spider.jshint.js","portia-web/tests/models/template.jshint.js","portia-web/tests/router.jshint.js","portia-web/tests/routes/base-route.jshint.js","portia-web/tests/routes/conflicts.jshint.js","portia-web/tests/routes/conflicts/index.jshint.js","portia-web/tests/routes/experiments.jshint.js","portia-web/tests/routes/index.jshint.js","portia-web/tests/routes/items.jshint.js","portia-web/tests/routes/project.jshint.js","portia-web/tests/routes/project/index.jshint.js","portia-web/tests/routes/projects.jshint.js","portia-web/tests/routes/projects/index.jshint.js","portia-web/tests/routes/spider.jshint.js","portia-web/tests/routes/spider/index.jshint.js","portia-web/tests/routes/template-items.jshint.js","portia-web/tests/routes/template.jshint.js","portia-web/tests/routes/template/index.jshint.js","portia-web/tests/test-helper.js","portia-web/tests/test-helper.jshint.js","portia-web/tests/unit/components/annotations-plugin/component-test.js","portia-web/tests/unit/components/annotations-plugin/component-test.jshint.js","portia-web/tests/unit/components/bs-badge-test.js","portia-web/tests/unit/components/bs-badge-test.jshint.js","portia-web/tests/unit/components/bs-button-test.js","portia-web/tests/unit/components/bs-button-test.jshint.js","portia-web/tests/unit/components/bs-dropdown-test.js","portia-web/tests/unit/components/bs-dropdown-test.jshint.js","portia-web/tests/unit/components/bs-label-test.js","portia-web/tests/unit/components/bs-label-test.jshint.js","portia-web/tests/unit/components/bs-message-test.js","portia-web/tests/unit/components/bs-message-test.jshint.js","portia-web/tests/unit/components/bs-modal-test.js","portia-web/tests/unit/components/bs-modal-test.jshint.js","portia-web/tests/unit/components/check-box-test.js","portia-web/tests/unit/components/check-box-test.jshint.js","portia-web/tests/unit/components/closable-accordion-test.js","portia-web/tests/unit/components/closable-accordion-test.jshint.js","portia-web/tests/unit/components/collapsible-text-test.js","portia-web/tests/unit/components/collapsible-text-test.jshint.js","portia-web/tests/unit/components/copy-spider/component-test.js","portia-web/tests/unit/components/copy-spider/component-test.jshint.js","portia-web/tests/unit/components/display-button-edit-delete-test.js","portia-web/tests/unit/components/display-button-edit-delete-test.jshint.js","portia-web/tests/unit/components/draggable-button-test.js","portia-web/tests/unit/components/draggable-button-test.jshint.js","portia-web/tests/unit/components/edit-item-test.js","portia-web/tests/unit/components/edit-item-test.jshint.js","portia-web/tests/unit/components/edit-items/component-test.js","portia-web/tests/unit/components/edit-items/component-test.jshint.js","portia-web/tests/unit/components/extracted-item-test.js","portia-web/tests/unit/components/extracted-item-test.jshint.js","portia-web/tests/unit/components/extractor-dropzone-test.js","portia-web/tests/unit/components/extractor-dropzone-test.jshint.js","portia-web/tests/unit/components/file-download/component-test.js","portia-web/tests/unit/components/file-download/component-test.jshint.js","portia-web/tests/unit/components/inline-editable-text-field-test.js","portia-web/tests/unit/components/inline-editable-text-field-test.jshint.js","portia-web/tests/unit/components/inline-help-test.js","portia-web/tests/unit/components/inline-help-test.jshint.js","portia-web/tests/unit/components/item-select-test.js","portia-web/tests/unit/components/item-select-test.jshint.js","portia-web/tests/unit/components/j-breadcrumb-test.js","portia-web/tests/unit/components/j-breadcrumb-test.jshint.js","portia-web/tests/unit/components/j-breadcrumbs-test.js","portia-web/tests/unit/components/j-breadcrumbs-test.jshint.js","portia-web/tests/unit/components/json-file-compare-test.js","portia-web/tests/unit/components/json-file-compare-test.jshint.js","portia-web/tests/unit/components/label-with-tooltip-test.js","portia-web/tests/unit/components/label-with-tooltip-test.jshint.js","portia-web/tests/unit/components/pin-toolbox-button-test.js","portia-web/tests/unit/components/pin-toolbox-button-test.jshint.js","portia-web/tests/unit/components/regex-text-field-with-button/component-test.js","portia-web/tests/unit/components/regex-text-field-with-button/component-test.jshint.js","portia-web/tests/unit/components/text-area-test.js","portia-web/tests/unit/components/text-area-test.jshint.js","portia-web/tests/unit/components/text-area-with-button-test.js","portia-web/tests/unit/components/text-area-with-button-test.jshint.js","portia-web/tests/unit/components/text-field-dropdown-button-test.js","portia-web/tests/unit/components/text-field-dropdown-button-test.jshint.js","portia-web/tests/unit/components/text-field-test.js","portia-web/tests/unit/components/text-field-test.jshint.js","portia-web/tests/unit/components/text-field-with-button-test.js","portia-web/tests/unit/components/text-field-with-button-test.jshint.js","portia-web/tests/unit/components/tool-box-test.js","portia-web/tests/unit/components/tool-box-test.jshint.js","portia-web/tests/unit/components/top-bar-test.js","portia-web/tests/unit/components/top-bar-test.jshint.js","portia-web/tests/unit/components/web-document-js/component-test.js","portia-web/tests/unit/components/web-document-js/component-test.jshint.js","portia-web/tests/unit/components/web-document-test.js","portia-web/tests/unit/components/web-document-test.jshint.js","portia-web/tests/unit/components/wizard-box-test.js","portia-web/tests/unit/components/wizard-box-test.jshint.js","portia-web/tests/unit/controllers/application-test.js","portia-web/tests/unit/controllers/application-test.jshint.js","portia-web/tests/unit/controllers/base-controller-test.js","portia-web/tests/unit/controllers/base-controller-test.jshint.js","portia-web/tests/unit/controllers/conflicts-test.js","portia-web/tests/unit/controllers/conflicts-test.jshint.js","portia-web/tests/unit/controllers/items-test.js","portia-web/tests/unit/controllers/items-test.jshint.js","portia-web/tests/unit/controllers/project-test.js","portia-web/tests/unit/controllers/project-test.jshint.js","portia-web/tests/unit/controllers/project.index-test.js","portia-web/tests/unit/controllers/project.index-test.jshint.js","portia-web/tests/unit/controllers/projects-test.js","portia-web/tests/unit/controllers/projects-test.jshint.js","portia-web/tests/unit/controllers/spider-test.js","portia-web/tests/unit/controllers/spider-test.jshint.js","portia-web/tests/unit/controllers/template-test.js","portia-web/tests/unit/controllers/template-test.jshint.js","portia-web/tests/unit/helpers/trim-test.js","portia-web/tests/unit/helpers/trim-test.jshint.js","portia-web/tests/unit/initializers/add-prototypes-test.js","portia-web/tests/unit/initializers/add-prototypes-test.jshint.js","portia-web/tests/unit/initializers/messages-test.js","portia-web/tests/unit/initializers/messages-test.jshint.js","portia-web/tests/unit/initializers/project-models-test.js","portia-web/tests/unit/initializers/project-models-test.jshint.js","portia-web/tests/unit/initializers/register-modal-test.js","portia-web/tests/unit/initializers/register-modal-test.jshint.js","portia-web/tests/unit/initializers/register-page-interaction-test.js","portia-web/tests/unit/initializers/register-page-interaction-test.jshint.js","portia-web/tests/unit/initializers/register-websocket-test.js","portia-web/tests/unit/initializers/register-websocket-test.jshint.js","portia-web/tests/unit/initializers/toolbox-test.js","portia-web/tests/unit/initializers/toolbox-test.jshint.js","portia-web/tests/unit/mixins/conflict-mixin-test.js","portia-web/tests/unit/mixins/conflict-mixin-test.jshint.js","portia-web/tests/unit/mixins/controller-utils-test.js","portia-web/tests/unit/mixins/controller-utils-test.jshint.js","portia-web/tests/unit/mixins/draggable-test.js","portia-web/tests/unit/mixins/draggable-test.jshint.js","portia-web/tests/unit/mixins/droppable-test.js","portia-web/tests/unit/mixins/droppable-test.jshint.js","portia-web/tests/unit/mixins/guess-types-test.js","portia-web/tests/unit/mixins/guess-types-test.jshint.js","portia-web/tests/unit/mixins/modal-handler-test.js","portia-web/tests/unit/mixins/modal-handler-test.jshint.js","portia-web/tests/unit/mixins/popover-test.js","portia-web/tests/unit/mixins/popover-test.jshint.js","portia-web/tests/unit/mixins/size-listener-test.js","portia-web/tests/unit/mixins/size-listener-test.jshint.js","portia-web/tests/unit/models/annotation-test.js","portia-web/tests/unit/models/annotation-test.jshint.js","portia-web/tests/unit/models/conflict-test.js","portia-web/tests/unit/models/conflict-test.jshint.js","portia-web/tests/unit/models/extracted-field-test.js","portia-web/tests/unit/models/extracted-field-test.jshint.js","portia-web/tests/unit/models/extracted-item-test.js","portia-web/tests/unit/models/extracted-item-test.jshint.js","portia-web/tests/unit/models/extracted-variant-test.js","portia-web/tests/unit/models/extracted-variant-test.jshint.js","portia-web/tests/unit/models/extractor-test.js","portia-web/tests/unit/models/extractor-test.jshint.js","portia-web/tests/unit/models/ignore-test.js","portia-web/tests/unit/models/ignore-test.jshint.js","portia-web/tests/unit/models/item-field-test.js","portia-web/tests/unit/models/item-field-test.jshint.js","portia-web/tests/unit/models/item-test.js","portia-web/tests/unit/models/item-test.jshint.js","portia-web/tests/unit/models/mapped-field-data-test.js","portia-web/tests/unit/models/mapped-field-data-test.jshint.js","portia-web/tests/unit/models/simple-model-test.js","portia-web/tests/unit/models/simple-model-test.jshint.js","portia-web/tests/unit/models/spider-test.js","portia-web/tests/unit/models/spider-test.jshint.js","portia-web/tests/unit/models/template-test.js","portia-web/tests/unit/models/template-test.jshint.js","portia-web/tests/unit/routes/base-route-test.js","portia-web/tests/unit/routes/base-route-test.jshint.js","portia-web/tests/unit/routes/conflicts-test.js","portia-web/tests/unit/routes/conflicts-test.jshint.js","portia-web/tests/unit/routes/index-test.js","portia-web/tests/unit/routes/index-test.jshint.js","portia-web/tests/unit/routes/items-test.js","portia-web/tests/unit/routes/items-test.jshint.js","portia-web/tests/unit/routes/project-test.js","portia-web/tests/unit/routes/project-test.jshint.js","portia-web/tests/unit/routes/projects-test.js","portia-web/tests/unit/routes/projects-test.jshint.js","portia-web/tests/unit/routes/projects.index-test.js","portia-web/tests/unit/routes/projects.index-test.jshint.js","portia-web/tests/unit/routes/spider-test.js","portia-web/tests/unit/routes/spider-test.jshint.js","portia-web/tests/unit/routes/template-test.js","portia-web/tests/unit/routes/template-test.jshint.js","portia-web/tests/unit/utils/annotation-store-test.js","portia-web/tests/unit/utils/annotation-store-test.jshint.js","portia-web/tests/unit/utils/canvas-test.js","portia-web/tests/unit/utils/canvas-test.jshint.js","portia-web/tests/unit/utils/ferry-websocket-test.js","portia-web/tests/unit/utils/ferry-websocket-test.jshint.js","portia-web/tests/unit/utils/interaction-event-test.js","portia-web/tests/unit/utils/interaction-event-test.jshint.js","portia-web/tests/unit/utils/modal-manager-test.js","portia-web/tests/unit/utils/modal-manager-test.jshint.js","portia-web/tests/unit/utils/slyd-api-test.js","portia-web/tests/unit/utils/slyd-api-test.jshint.js","portia-web/tests/unit/utils/sprite-store-test.js","portia-web/tests/unit/utils/sprite-store-test.jshint.js","portia-web/tests/unit/utils/suggest-annotations-test.js","portia-web/tests/unit/utils/suggest-annotations-test.jshint.js","portia-web/tests/unit/utils/timer-test.js","portia-web/tests/unit/utils/timer-test.jshint.js","portia-web/tests/unit/utils/validate-field-name-test.js","portia-web/tests/unit/utils/validate-field-name-test.jshint.js","portia-web/tests/utils/annotation-store.jshint.js","portia-web/tests/utils/canvas.jshint.js","portia-web/tests/utils/experiments.jshint.js","portia-web/tests/utils/ferry-websocket.jshint.js","portia-web/tests/utils/interaction-event.jshint.js","portia-web/tests/utils/messages.jshint.js","portia-web/tests/utils/modal-manager.jshint.js","portia-web/tests/utils/notification-manager.jshint.js","portia-web/tests/utils/selector-prediction.jshint.js","portia-web/tests/utils/slyd-api.jshint.js","portia-web/tests/utils/sprite-store.jshint.js","portia-web/tests/utils/suggest-annotations.jshint.js","portia-web/tests/utils/timer.jshint.js","portia-web/tests/utils/utils.jshint.js","portia-web/tests/utils/validate-field-name.jshint.js","portia-web/utils/annotation-store.js","portia-web/utils/canvas.js","portia-web/utils/experiments.js","portia-web/utils/ferry-websocket.js","portia-web/utils/interaction-event.js","portia-web/utils/messages.js","portia-web/utils/modal-manager.js","portia-web/utils/notification-manager.js","portia-web/utils/selector-prediction.js","portia-web/utils/slyd-api.js","portia-web/utils/sprite-store.js","portia-web/utils/suggest-annotations.js","portia-web/utils/timer.js","portia-web/utils/utils.js","portia-web/utils/validate-field-name.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('portia-web/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'portia-web/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default'],\n    customEvents: {\n      paste: 'paste'\n    }\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('portia-web/components/accordion-item', ['exports', 'ember', 'ember-idx-accordion/accordion-item'], function (exports, Ember, AccordionItemComponent) {\n\n    'use strict';\n\n    exports['default'] = AccordionItemComponent['default'].extend({\n\n        select: (function (e) {\n            if (!(e || this.getWithDefault('reTrigger', true))) {\n                return;\n            }\n            if (e) {\n                var target = Ember['default'].$(e.target);\n                if (!(target.data('header') || target.parents('*[data-header]').length > 0)) {\n                    return;\n                }\n            }\n            this.set('reTrigger', false);\n            return this.get('accordion').select(this);\n        }).on('click')\n    });\n\n});","define('portia-web/components/annotations-plugin/component', ['exports', 'ember', 'portia-web/mixins/guess-types', 'portia-web/utils/validate-field-name', 'portia-web/utils/notification-manager', 'portia-web/utils/utils'], function (exports, Ember, GuessTypes, validateFieldName, NotificationManager, utils) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(GuessTypes['default'], {\n        tagName: 'div',\n        classNameBindings: ['inDoc:in-doc', 'showAnnotation:annotation-widget', 'data.suggested:suggestion'],\n        fieldName: null,\n        fieldType: null,\n        showingBasic: true,\n        showingAdvanced: false,\n        creatingField: false,\n        inDoc: false,\n        pos: null,\n        variantValue: 0,\n        ignoredAttributes: [],\n\n        actions: {\n\n            showCreateField: function showCreateField() {\n                this.setState(true, false, false);\n            },\n\n            showAdvanced: function showAdvanced() {\n                this.setState(false, true, false);\n            },\n\n            showBasic: function showBasic() {\n                this.setState(false, false, true);\n            },\n\n            dismiss: function dismiss() {\n                this.closeWidget();\n            },\n\n            edit: function edit() {\n                this.sendAction('edit', this.get('data'));\n            },\n            'delete': function _delete() {\n                if (this.get('data.suggested')) {\n                    this.get('ws').logEvent('suggestions', this.get('data.suggestor'), 'rejected');\n                }\n                this.get('alldata').removeObject(this.get('data'));\n                this.get('sprites').removeSprite(this.get('mappedDOMElement'));\n                if (this.get('mappedDOMElement') && this.get('mappedDOMElement').tagName === 'INS') {\n                    this.get('mappedElement').removePartialAnnotation();\n                }\n                var id = this.get('data.id'),\n                    extracted = this.getWithDefault('pluginState.extracted', []),\n                    deleted = extracted.filter(function (ann) {\n                    if (ann.id && id === ann.id) {\n                        return true;\n                    }\n                });\n                deleted.forEach(function (ann) {\n                    extracted.removeObject(ann);\n                });\n                this.set('pluginState.extracted', extracted);\n                this.updateData('pluginState.extracted');\n                this.closeWidget();\n            },\n\n            updateVariant: function updateVariant(value) {\n                if (value > this.getWithDefault('pluginState.maxVariant', 0)) {\n                    this.set('pluginState.maxVariant', value);\n                    this.updateData('pluginState');\n                }\n                this.set('data.variant', parseInt(value));\n            },\n\n            updateField: function updateField(value, index) {\n                if (value === '#create') {\n                    //                value = null;\n                    //                this.set('createNewIndex', index);\n                    //                var annotation = this.get('mappings').get(index),\n                    //                    extractedData = annotation.content,\n                    //                    attribute = annotation.attribute,\n                    //                    element = this.get('mappedDOMElement'),\n                    //                    guess = this.get('guessedAttribute') !== attribute;\n                    //                this.set('guessedType', this.guessFieldType(extractedData, element, guess));\n                    //                var name = this.guessFieldName(element);\n                    //                if (this.get('itemFields').mapBy('value').contains(name)) {\n                    //                if (this.get('itemFields').mapBy('value').contains(name)) {\n                    //                    name = null;\n                    //                }\n                    //                this.set('guessedName', name ? name : 'Enter name');\n                    //                this.set('defaultName', name);\n                    //                this.setState(true, false, false);\n                } else if (value === '#sticky') {\n                        this.setAttr(index, '#sticky', 'field', true);\n                    } else {\n                        this.setAttr(index, value, 'field');\n                    }\n            },\n\n            updateWeight: function updateWeight(value, index) {\n                this.setAttr(index, value, 'weight');\n            },\n\n            updateAttribute: function updateAttribute(value, index) {\n                this.setAttr(index, value, 'attribute');\n            },\n\n            updateRequired: function updateRequired(value, checked, index) {\n                this.setAttr(index, null, null, checked);\n            },\n\n            addNewMapping: function addNewMapping() {\n                this.addNewMapping();\n            },\n\n            removeMapping: function removeMapping(index) {\n                this.removeAnno(index);\n            },\n\n            createField: function createField() {\n                var fieldName = this.get('newFieldName'),\n                    fieldType = this.get('newFieldType');\n                if (!fieldName || fieldName.length < 1) {\n                    var defaultName = this.get('defaultName');\n                    if (defaultName && defaultName.length > 0) {\n                        this.set('newFieldName', defaultName);\n                    } else {\n                        return;\n                    }\n                }\n                if (!fieldType || fieldType.length < 1) {\n                    this.set('newFieldType', 'text');\n                }\n                this.createNewField();\n            },\n\n            backToMain: function backToMain() {\n                this.setState(false, false, true);\n                this.set('newFieldName', null);\n                this.set('newFieldType', null);\n                this.notifyPropertyChange('refreshMapped');\n            },\n\n            updateNewFieldName: function updateNewFieldName(value) {\n                if (typeof value === 'string') {\n                    this.set('newFieldName', value);\n                }\n            },\n\n            updateNewFieldType: function updateNewFieldType(value) {\n                if (value) {\n                    this.set('newFieldType', value);\n                }\n            },\n\n            ignoreElement: function ignoreElement() {\n                this.set('ignoring', true);\n                this.set('previousListener', this.get('document.view.listener'));\n                this.get('document.view').config({\n                    mode: 'select',\n                    listener: this,\n                    partialSelects: false\n                });\n                this.set('document.view.restrictToDescendants', this.get('mappedElement'));\n                this.get('document.view').unblockInteractions('indoc-annotation');\n                this.hide();\n            },\n\n            deleteIgnore: function deleteIgnore(index) {\n                var ignore = this.get('pluginState.ignores').get(index),\n                    ignoreData = this.get('alldata').findBy('tagid', ignore.tagid);\n                this.get('alldata').removeObject(ignoreData);\n                this.get('pluginState.ignores').removeObject(ignore);\n                this.get('sprites').removeIgnore(ignore.get('element').get(0));\n                this.updateData('pluginState');\n            },\n\n            ignoreBeneath: function ignoreBeneath(_, value, index) {\n                var ignore = this.get('pluginState.ignores').objectAt(index),\n                    ignoreData = this.get('alldata').findBy('tagid', ignore.get('tagid'));\n                ignore.set('ignoreBeneath', value);\n                ignoreData['ignore_beneath'] = value;\n                this.updateData('pluginState');\n            },\n\n            elementHovered: function elementHovered(data, _, hovered) {\n                if (hovered) {\n                    this.get('document.view').setElementHovered(data.data.element);\n                } else {\n                    this.get('document.view').mouseOutHandler();\n                }\n            },\n\n            elementClicked: function elementClicked(data) {\n                if (Object.keys(this.get('data.annotations')).length > 0) {\n                    if (confirm('You have mapped attributes for this Annotation that will be lost if you change this element.\\n' + 'Do you wish to continue?')) {\n                        this.mapToNewElement(data.data.element);\n                    }\n                } else {\n                    this.mapToNewElement(data.data.element);\n                }\n            },\n\n            acceptSuggestion: function acceptSuggestion() {\n                this.set('data.suggested', false);\n                this.get('ws').logEvent('suggestions', this.get('data.suggestor'), 'accepted');\n            }\n        },\n\n        //*******************************************************************\\\\\n        //\n        //                      Document Interaction\n        //\n        //*******************************************************************\\\\\n\n        documentActions: {\n            elementSelected: function elementSelected(element) {\n                if (this.get('ignoring')) {\n                    var ignored,\n                        jqElem = Ember['default'].$(element),\n                        tagid = jqElem.data('tagid'),\n                        ignoreData = this.get('alldata').findBy('tagid', tagid);\n                    if (ignoreData) {\n                        ignored = ignoreData;\n                    } else {\n                        ignored = {\n                            id: utils['default'].shortGuid(),\n                            tagid: tagid,\n                            ignore: true,\n                            ignore_beneath: false\n                        };\n                        this.get('alldata').pushObject(ignored);\n                    }\n                    this.get('pluginState.ignores').pushObject(Ember['default'].Object.create({\n                        id: ignored.id,\n                        tagid: tagid,\n                        element: jqElem,\n                        ignoreBeneath: ignored.ignore_beneath\n                    }));\n                    this.updateData('pluginState');\n\n                    this.get('document.view').config({\n                        listener: this.get('previousListener'),\n                        partialSelects: true\n                    });\n                    this.set('document.view.restrictToDescendants', null);\n                    this.get('document.view').setInteractionsBlocked(this.get('inDoc'), 'indoc-annotation');\n                    this.set('ignoring', false);\n                    this.show();\n                }\n            },\n\n            elementHovered: function elementHovered() {\n                this.get('document.view').redrawNow();\n            }\n        },\n\n        //*******************************************************************\\\\\n        //\n        //                        Update Annotation\n        //\n        //*******************************************************************\\\\\n\n        createAnnotationData: function createAnnotationData(generatedData) {\n            var element = this.get('mappedElement'),\n                data = {\n                annotations: {},\n                required: [],\n                is_required: false,\n                weight: 1.0,\n                variant: 0,\n                id: utils['default'].shortGuid(),\n                tagid: element.data('tagid')\n            };\n            if (element.prop('tagName') === 'INS') {\n                data.generated = true;\n                data.tagid = generatedData.tagid;\n                data.slice = generatedData.slice;\n                data.insert_after = generatedData.insert_after;\n                data.annotations = { content: null };\n            }\n            return data;\n        },\n\n        setAttr: function setAttr(index, value, field, required) {\n            var annotation = this.getAnnotation(index),\n                update = false;\n            if (!annotation) {\n                return;\n            }\n            if (field === 'field' && value === '#sticky' && annotation[field] !== '#sticky') {\n                var maxSticky = this.getWithDefault('pluginState.maxSticky', 0) + 1,\n                    sticky = '_sticky' + maxSticky;\n                this.set('pluginState.maxSticky', maxSticky);\n                this.updateData('pluginState');\n                value = sticky;\n            }\n            if (field && annotation[field] !== value) {\n                try {\n                    annotation.set(field, value);\n                } catch (e) {\n                    annotation[field] = value;\n                }\n                update = true;\n            }\n            if ((required || required === false) && annotation['required'] !== required) {\n                try {\n                    annotation.set('required', required);\n                    annotation.set('is_required', required);\n                } catch (e) {\n                    annotation['required'] = required;\n                    annotation['is_required'] = required;\n                }\n                update = true;\n            }\n            if (annotation.field && annotation.field === '#create') {\n                annotation.field = null;\n                update = false;\n            }\n            if (update) {\n                this.updateAnnotations();\n            }\n        },\n\n        removeAnno: function removeAnno(index) {\n            var annotation = this.getAnnotation(index);\n            if (annotation) {\n                this.get('mappings').removeObject(annotation);\n                this.updateAnnotations();\n            }\n        },\n\n        getAttr: function getAttr(index, attr) {\n            var annotation = this.getAnnotation(index);\n            return annotation[attr];\n        },\n\n        getAnnotation: function getAnnotation(index) {\n            return this.get('mappings').objectAt(index);\n        },\n\n        updateAnnotations: function updateAnnotations() {\n            var annotations = {},\n                required = [],\n                idMap = this.get('fieldNameIdMap'),\n                is_required = false,\n                weight = 1;\n            this.get('mappings').forEach(function (annotation) {\n                var attribute = annotation['attribute'],\n                    field = annotation['field'];\n                if (field in idMap) {\n                    field = idMap[field];\n                }\n                try {\n                    annotations[attribute] = field;\n                } catch (e) {\n                    annotations.set(attribute, field);\n                }\n                if (annotation['required']) {\n                    required.push(field);\n                }\n                is_required = annotation.is_required;\n                weight = annotation.weight;\n            });\n            this.set('data.annotations', annotations);\n            this.set('data.required', required);\n            this.set('data.is_required', is_required);\n            this.set('data.weight', parseFloat(weight));\n            if (this.get('mappedElement').attr('content')) {\n                this.set('data.text-content', 'text content');\n            }\n            this.updateExtractedFields();\n            this.notifyPropertyChange('sprite');\n        },\n\n        updateExtractedFields: function updateExtractedFields() {\n            var id = this.get('data.id'),\n                annotations = this.get('data.annotations'),\n                required = this.get('data.required'),\n                extracted = this.getWithDefault('pluginState.extracted', []).filter(function (f) {\n                if (f.id && f.id !== id) {\n                    return true;\n                }\n            });\n            var suggested = this.get('data.suggested');\n            for (var key in annotations) {\n                var fieldName = annotations[key];\n                if (!suggested && fieldName && fieldName[0] !== '#') {\n                    extracted.pushObject({\n                        id: id,\n                        name: fieldName,\n                        required: required.indexOf(annotations[key]) > -1\n                    });\n                }\n            }\n            this.set('pluginState.extracted', extracted);\n            this.updateData('pluginState.extracted');\n        },\n\n        //*******************************************************************\\\\\n        //\n        //                    Manage selectboxes fields\n        //\n        //*******************************************************************\\\\\n\n        itemFields: (function () {\n            var fields = this.get('item.fields') || [];\n            var options = fields.map(function (field) {\n                var name = field.get('name');\n                return { value: name, label: name };\n            });\n            // Commented to disable creating new fields\n            // options.pushObject({ value: '#sticky', label: '-just required-' });\n            // options.pushObject({ value: '#create', label: '-create new-' });\n            return options;\n        }).property('item.fields.@each'),\n\n        weightFields: (function () {\n            var options = [];\n            options.pushObject({ value: 1, label: '1' });\n            options.pushObject({ value: 2, label: '2' });\n            options.pushObject({ value: 3, label: '3' });\n            options.pushObject({ value: 4, label: '4' });\n            options.pushObject({ value: 5, label: '5' });\n            options.pushObject({ value: 6, label: '6' });\n            options.pushObject({ value: 7, label: '7' });\n            options.pushObject({ value: 8, label: '8' });\n            options.pushObject({ value: 9, label: '9' });\n            options.pushObject({ value: 10, label: '10' });\n            return options;\n        }).property('annotation.weight', 'data.weight'),\n\n        variantList: (function () {\n            var variants = [{ value: 0, label: 'Base' }],\n                i = 1,\n                maxVariant = this.getWithDefault('pluginState.maxVariant', 0);\n            while (i <= maxVariant) {\n                variants.push({ value: i, label: '#' + i });\n                i += 1;\n            }\n            variants.push({ value: i, label: 'Add new: #' + i });\n            return variants;\n        }).property('pluginState.maxVariant'),\n\n        attributes: (function () {\n            var mapped = this.get('data.annotations') || {};\n            var attrs = (this.get('mappedElement').getAttributeList() || []).mapBy('name');\n            return attrs.filter(function (name) {\n                if (name in mapped) {\n                    return false;\n                }\n                return true;\n            });\n        }).property('data.annotations'),\n\n        attributeValues: (function () {\n            var values = {};\n            (this.get('mappedElement').getAttributeList() || []).forEach(function (attr) {\n                var name = attr.get('name'),\n                    value = attr.get('value');\n                if (('' + attr).length > 0) {\n                    values[name] = value;\n                } else {\n                    values[name] = '< Empty attribute >';\n                }\n            });\n            return values;\n        }).property('data.tagid'),\n\n        parents: (function () {\n            return this.createHierarchy(this.get('mappedElement').parents(), false);\n        }).property('mappedElement'),\n\n        children: (function () {\n            return this.createHierarchy(this.get('mappedElement').children(), true);\n        }).property('mappedElement'),\n\n        //*******************************************************************\\\\\n        //\n        //          Highlight and Scroll to elements in document\n        //\n        //*******************************************************************\\\\\n\n        mouseEnter: function mouseEnter(event) {\n            if (!this.getWithDefault('inDoc', false)) {\n                var element = this.get('mappedDOMElement');\n                this.get('document.view').scrollToElement(element);\n                this.get('sprites').highlight(element);\n            }\n            event.stopPropagation();\n        },\n\n        mouseLeave: function mouseLeave(event) {\n            if (!this.getWithDefault('inDoc', false)) {\n                this.get('sprites').removeHighlight(this.get('mappedDOMElement'));\n            }\n            event.stopPropagation();\n        },\n\n        //*******************************************************************\\\\\n        //\n        //                             Visibility\n        //\n        //*******************************************************************\\\\\n\n        hideWidget: (function () {\n            if (this.get('data') === null) {\n                this.closeWidget();\n            }\n        }).observes('data'),\n\n        closeWidget: function closeWidget() {\n            this.sendAction('close');\n            this.reset();\n            this.get('document.view').unblockInteractions('indoc-annotation');\n            this.destroy();\n        },\n\n        hide: function hide() {\n            this.$(this.element).css('display', 'none');\n        },\n\n        show: function show() {\n            this.$(this.element).css('display', 'block');\n        },\n\n        showAnnotation: (function () {\n            var data = this.get('data');\n            if (data && (data.annotations || data.ignore && this.get('inDoc'))) {\n                return true;\n            }\n            return false;\n        }).property('data.ignore', 'data.annotations'),\n\n        updateSprite: (function () {\n            var text = [];\n            var data = this.get('data');\n            var annotations = this.get('data.annotations');\n\n            if (!data || data.ignore && !data.annotations) {\n                return;\n            }\n            for (var key in annotations) {\n                if (annotations[key]) {\n                    text.push(key + ' > ' + annotations[key]);\n                }\n            }\n            if (text.length < 1) {\n                text = 'No Mappings';\n            } else {\n                text = text.join(', ');\n            }\n            if (data.suggested) {\n                text = 'Suggestion: ' + text;\n            }\n            this.get('sprites').addSprite(this.get('mappedDOMElement'), text, this.get('mappings'), {\n                fillColor: data.suggested ? 'rgba(28, 171, 76, 0.4)' : this.get('sprites.fillColor')\n            });\n        }).observes('sprite', 'data.suggested', 'mappings'),\n\n        updateIgnore: (function () {\n            var data = this.get('data');\n            if (!data || !data.ignore) {\n                return;\n            }\n            this.get('sprites').addIgnore(this.get('mappedDOMElement'), data.ignore_beneath);\n        }).observes('sprite'),\n\n        positionWidget: function positionWidget() {\n            if (this.get('inDoc')) {\n                var x = this.get('pos.x'),\n                    y = this.get('pos.y');\n                if (x > window.innerWidth - 350) {\n                    x = window.innerWidth - 350;\n                }\n                if (y > window.innerHeight - 230) {\n                    y = window.innerHeight - 230;\n                }\n                Ember['default'].$(this.get('element')).css({ 'top': Math.max(y, 50),\n                    'left': Math.max(x - 100, 50) });\n                this.get('document.view').blockInteractions('indoc-annotation');\n            }\n        },\n\n        //*******************************************************************\\\\\n        //\n        //                             Data State\n        //\n        //*******************************************************************\\\\\n\n        mappings: (function () {\n            var mappings = [],\n                annotations = this.get('data.annotations'),\n                required = this.get('data.required'),\n                is_required = this.get('data.is_required'),\n                weight = this.get('data.weight'),\n                attributes = this.get('attributeValues'),\n                nameMap = this.get('fieldIdNameMap');\n            for (var key in annotations) {\n                var value = annotations[key],\n                    annotation = Ember['default'].Object.create({\n                    field: value,\n                    attribute: key,\n                    required: required.indexOf(value) >= 0\n                });\n                if (value in nameMap) {\n                    annotation.field = nameMap[value];\n                }\n                if (/_sticky+/.test('' + annotation.field)) {\n                    annotation.field = '#sticky';\n                }\n                if (key in attributes) {\n                    annotation.content = attributes[key].substring(0, 400);\n                }\n                annotation.is_required = is_required;\n                annotation.weight = weight;\n                mappings.push(annotation);\n            }\n            return mappings;\n        }).property('data.annotations', 'data.required', 'mappedElement', 'refreshMapped'),\n\n        subElementIgnores: (function () {\n            var mappedElement = this.get('mappedElement');\n            var ignores = this.get('pluginState.ignores').filter(function (ignore) {\n                return mappedElement.find('[data-tagid=' + ignore.tagid + ']').length;\n            });\n            return ignores;\n        }).property('mappedElement', 'pluginState.ignores.@each'),\n\n        fieldIdNameMap: (function () {\n            return this._makeFieldMap('id', 'name');\n        }).property('item.fields.@each'),\n\n        fieldNameIdMap: (function () {\n            return this._makeFieldMap('name', 'id');\n        }).property('item.fields.@each'),\n\n        _makeFieldMap: function _makeFieldMap(from, to) {\n            var fields = this.get('item.fields') || [],\n                map = {};\n            fields.forEach(function (field) {\n                map[field.get(from)] = field.get(to);\n            });\n            return map;\n        },\n\n        setData: function setData() {\n            var tagid,\n                annotation,\n                generatedData = {};\n            if (this.get('data')) {\n                return;\n            }\n            var element = this.get('mappedElement');\n            this.set('mappedDOMElement', element.get(0));\n            if (element.prop('tagName') === 'INS') {\n                generatedData = this.findGeneratedAnnotation();\n                tagid = generatedData.tagid;\n                annotation = this.get('alldata').findBy('tagid', tagid);\n            } else {\n                tagid = element.data('tagid');\n                annotation = this.get('alldata').findBy('tagid', tagid);\n            }\n            if (annotation) {\n                var annotations = annotation.annotations || {},\n                    required = annotation.required || [],\n                    is_required = annotation.is_required || false,\n                    weight = annotation.weight || 1.0;\n                this.set('data', annotation);\n                this.set('data.annotations', annotations);\n                this.set('data.required', required);\n                this.set('data.is_required', is_required);\n                this.set('data.weight', weight);\n                this.set('data.variant', this.getWithDefault('data.variant', 0));\n            } else {\n                this.sendAction('dissmissAllSuggestions');\n                this.set('data', this.createAnnotationData(generatedData));\n                this.get('alldata').unshiftObject(this.get('data'));\n            }\n            if (this.get('data.generated')) {\n                this.get('mappedElement').attr('data-genid', this.get('data').id);\n            }\n        },\n\n        setIgnores: function setIgnores() {\n            var ignoreData, elem, ignores;\n            if (!this.get('pluginState').ignores) {\n                ignores = [];\n                ignoreData = this.get('alldata').filter(function (item) {\n                    return item['ignore'];\n                });\n                ignoreData.forEach(function (data) {\n                    elem = this.get('document.iframe').find('[data-tagid=' + data.tagid + ']');\n                    ignores.addObject(Ember['default'].Object.create({\n                        id: data.id,\n                        tagid: data.tagid,\n                        element: elem,\n                        ignoreBeneath: data.ignore_beneath\n                    }));\n                }, this);\n                this.set(\"pluginState.ignores\", ignores);\n                this.updateData('pluginState');\n            }\n        },\n\n        mapToElement: function mapToElement() {\n            if (!this.get('mappedDOMElement') && this.get('data')) {\n                var data = this.get('data'),\n                    id = data.id,\n                    generated = data.generated,\n                    insertAfter = data.insert_after,\n                    iframe = this.getIframe(),\n                    tagid = data.tagid;\n                if (generated) {\n                    var elem = iframe.find('[data-genid=' + id + ']');\n                    if (elem.length < 1) {\n                        if (insertAfter) {\n                            elem = iframe.find('[data-tagid=' + tagid + ']').parent().find('ins');\n                        } else {\n                            elem = iframe.find('[data-tagid=' + tagid + ']').siblings('ins');\n                        }\n                    }\n                    this.set('mappedElement', elem);\n                } else {\n                    this.set('mappedElement', iframe.find('[data-tagid=' + tagid + ']'));\n                }\n                this.set('mappedDOMElement', this.get('mappedElement').get(0));\n            }\n            this.updateSprite();\n            this.updateIgnore();\n        },\n\n        getIframe: function getIframe() {\n            return this.get('document.view').getIframe();\n        },\n\n        mapToNewElement: function mapToNewElement(elem) {\n            var jqElem = Ember['default'].$(elem),\n                boundingBox = jqElem.boundingBox();\n            this.get('sprites').removeSprite(this.get('mappedDOMElement'));\n            this.get('sprites').removeIgnore(this.get('mappedDOMElement'));\n            if (this.get('mappedDOMElement').tagName === 'INS') {\n                this.get('mappedElement').removePartialAnnotation();\n            }\n            this.set('mappedElement', jqElem);\n            var newData = this.createAnnotationData(),\n                existingData = this.get('alldata').findBy('tagid', newData.tagid);\n            if (existingData && existingData.length > 0) {\n                this.get('alldata').removeObject(this.get('data'));\n                this.set('data', existingData.get(0));\n                this.notifyPropertyChange('data.annotations');\n                this.notifyPropertyChange('data.required');\n                this.notifyPropertyChange('data.tagid');\n            } else {\n                this.set('data.variant', newData.variant);\n                this.set('data.tagid', newData.tagid);\n                this.set('data.required', newData.required);\n                this.set('data.annotations', newData.annotations);\n            }\n            this.setData();\n            this.setIgnores();\n            this.mapToElement();\n            this.get('document.view').scrollToElement(elem);\n            this.set('pos', { x: boundingBox.top, y: boundingBox.left });\n            this.updateExtractedFields();\n            this.positionWidget();\n            this.setState(false, false, true);\n        },\n\n        //*******************************************************************\\\\\n        //\n        //                               Utils\n        //\n        //*******************************************************************\\\\\n\n        findGeneratedAnnotation: function findGeneratedAnnotation() {\n            var element = this.get('mappedElement'),\n                elem = element.get(0),\n                previous_tag = element.prev(),\n                insert_after = true,\n                nodes,\n                node;\n            // Next nearest tag is the parent of this element\n            if (previous_tag.length === 0) {\n                previous_tag = element.parent();\n                nodes = previous_tag[0].childNodes;\n                insert_after = false;\n            } else {\n                // Find the next nearest non generated tag\n                while (previous_tag.prop('tagName') === 'INS') {\n                    previous_tag = previous_tag.prev();\n                }\n                // If there is only another ins tag before the parent\n                if (previous_tag.length === 0) {\n                    previous_tag = element.parent();\n                    insert_after = false;\n                    node = previous_tag[0].childNodes[0];\n                } else {\n                    node = previous_tag[0].nextSibling;\n                }\n                // Loop over all text nodes and generated tags until the\n                // next tag is found\n                nodes = [];\n                while (node) {\n                    nodes.push(node);\n                    node = node.nextSibling;\n                    if (node === null || node.nodeType === node.ELEMENT_NODE && node.tagName !== 'INS') {\n                        break;\n                    }\n                }\n            }\n            var a = { tagid: previous_tag.data('tagid'),\n                generated: true,\n                insert_after: insert_after },\n                last_node_ins = false,\n                start = 0;\n            // Calculate the length and start position of the slice\n            // ignoring the ins tag and with leading whitespace removed\n            for (var idx = 0; idx < nodes.length; idx++) {\n                node = nodes[idx];\n                if (node.nodeType === node.ELEMENT_NODE && node.tagName === 'INS') {\n                    last_node_ins = true;\n                    if (node === elem) {\n                        a['slice'] = [start, start + node.innerHTML.length];\n                        break;\n                    } else {\n                        // No need to strip ins elements\n                        start += node.innerHTML.length;\n                    }\n                } else {\n                    // Need to remove external whitespace so that there\n                    // is no ambiguity in the start position of the\n                    // slice\n                    if (last_node_ins) {\n                        start += node.textContent.length;\n                    } else {\n                        start += node.textContent.lstrip().length;\n                    }\n                    last_node_ins = false;\n                }\n            }\n            return a;\n        },\n\n        createHierarchy: function createHierarchy(elements, forward) {\n            var elementsArr = [],\n                resultArr = [];\n            for (var i = 0; i < elements.length; i++) {\n                if (forward) {\n                    elementsArr.push(elements.get(i));\n                } else {\n                    elementsArr.unshift(elements.get(i));\n                }\n            }\n            var previousElem;\n            if (elements.length > 1) {\n                previousElem = elements[1];\n            }\n            elementsArr.forEach(function (elem) {\n                var jqElem = Ember['default'].$(elem),\n                    attributes = jqElem.getAttributeList();\n                if (attributes.length < 1) {\n                    return;\n                }\n                resultArr.push({\n                    label: jqElem.prop('tagName').toLowerCase(),\n                    hovered: false,\n                    separator: Ember['default'].$.inArray(previousElem, jqElem.siblings()) !== -1 ? '' : 'chevron-right',\n                    data: {\n                        element: elem\n                    }\n                });\n                previousElem = elem;\n            });\n            return resultArr;\n        },\n\n        topLeftIcon: (function () {\n            var base = 'fa fa-icon fa-',\n                icon = this.get('showingBasic') ? 'cogs' : 'arrow-left';\n            return base + icon;\n        }).property('showingBasic'),\n\n        topLeftAction: (function () {\n            return this.get('showingBasic') ? 'showAdvanced' : 'backToMain';\n        }).property('showingBasic'),\n\n        createFieldDisabled: (function () {\n            return (this.get('newFieldName') + '').trim().length < 1;\n        }).property('newFieldName'),\n\n        setState: function setState(field, advanced, basic) {\n            this.set('creatingField', field);\n            this.set('showingAdvanced', advanced);\n            this.set('showingBasic', basic);\n        },\n\n        createNewField: function createNewField() {\n            var fieldName = this.get('newFieldName'),\n                fieldType = this.get('newFieldType'),\n                attrIndex = this.get('createNewIndex');\n\n            var error = validateFieldName['default'](fieldName, this.getWithDefault('item.fields', []));\n            if (error) {\n                return NotificationManager['default'].showWarningNotification('Validation Error', error);\n            }\n            if (fieldName && fieldName.length > 0 && fieldType) {\n                this.set('newFieldType', null);\n                this.set('newFieldName', null);\n                this.set('createNewIndex', null);\n                this.set('guessedName', null);\n                this.set('guessedType', null);\n                this.set('defaultName', null);\n                this.sendAction('createField', this.get('item'), fieldName, fieldType);\n                this.setAttr(attrIndex, fieldName, 'field');\n                this.setState(false, false, true);\n            }\n        },\n\n        addNewMapping: function addNewMapping() {\n            var annotations = this.get('data.annotations'),\n                attributes = this.get('attributes');\n            if (!annotations || attributes.length < 1) {\n                return;\n            }\n            var attribute = this.guessFieldExtraction(this.get('mappedDOMElement'), attributes);\n            this.set('guessedAttribute', attribute);\n            if (!attribute) {\n                attribute = attributes.get(0);\n            }\n            annotations[attribute] = null;\n            this.set('data.annotations', annotations);\n            this.notifyPropertyChange('data.annotations');\n        },\n\n        setPluginStateVariables: function setPluginStateVariables() {\n            if (!this.get('pluginState').maxVariant) {\n                var maxVariant = 0;\n                this.get('alldata').forEach(function (d) {\n                    var variant = d.variant || 0;\n                    variant = parseInt(variant);\n                    maxVariant = variant > maxVariant ? variant : maxVariant;\n                });\n                this.set('pluginState.maxVariant', maxVariant);\n            }\n            if (!this.get('pluginState').maxSticky) {\n                var maxSticky = 0;\n                this.get('alldata').forEach(function (d) {\n                    for (var key in d.annotations) {\n                        var value = d.annotations[key];\n                        if (/^_sticky/.test(value)) {\n                            var sticky = parseInt(value.substring(7));\n                            sticky = sticky < 0 ? 0 : sticky;\n                            maxSticky = sticky > maxSticky ? sticky : maxSticky;\n                        }\n                    }\n                });\n                this.set('pluginState.maxSticky', maxSticky);\n            }\n            this.updateData('pluginState');\n        },\n\n        updateData: function updateData(property) {\n            if (!this.get(property)) {\n                return;\n            }\n            this.sendAction('updatePluginData', property, this.get(property));\n        },\n\n        //*******************************************************************\\\\\n        //\n        //                          Initialization\n        //\n        //*******************************************************************\\\\\n\n        setup: (function () {\n            this.setData();\n            this.setIgnores();\n            this.mapToElement();\n            this.updateExtractedFields();\n            this.setPluginStateVariables();\n            if (this.get('inDoc') && Object.keys(this.get('data.annotations')).length < 1) {\n                this.addNewMapping();\n            }\n            this.notifyPropertyChange('sprite');\n        }).on('init'),\n\n        reset: function reset() {\n            this.set('data', null);\n            this.set('mappedElement', null);\n            this.set('mappedDOMElement', null);\n            this.set('fieldName', null);\n            this.set('fieldType', null);\n            this.set('showingBasic', true);\n            this.set('showingAdvanced', false);\n            this.set('creatingField', false);\n        },\n\n        didInsertElement: function didInsertElement() {\n            this.positionWidget();\n            this._super();\n            Ember['default'].run.scheduleOnce('afterRender', this, this.afterRenderEvent);\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            this.get('sprites').removeSprite(this.get('mappedDOMElement'));\n            if (this.get('inDoc')) {\n                this.get('document.view').unblockInteractions('indoc-annotation');\n            }\n        },\n\n        afterRenderEvent: (function () {\n            Ember['default'].run.next(this, function () {\n                this.mapToElement();\n                this.notifyPropertyChange('sprite');\n                this.notifyPropertyChange('data.tagid');\n            });\n        }).observes('document.iframe')\n\n    });\n\n});","define('portia-web/components/annotations-plugin/template', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            inline(env, morph0, context, \"bs-button\", [], {\"clicked\": get(env, context, \"topLeftAction\"), \"icon\": get(env, context, \"topLeftIcon\"), \"size\": \"xs\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"col-md-8\");\n            var el2 = dom.createTextNode(\"\\n                    Annotation suggestion\\n            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"col-md-3\");\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element7 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element7,1,1);\n            var morph1 = dom.createMorphAt(element7,3,3);\n            inline(env, morph0, context, \"bs-button\", [], {\"clicked\": \"acceptSuggestion\", \"icon\": \"fa fa-icon fa-check\", \"title\": \"Accept suggestion\", \"type\": \"success\", \"size\": \"xs\"});\n            inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"delete\", \"icon\": \"fa fa-icon fa-trash\", \"title\": \"Remove suggestion\", \"type\": \"warning\", \"size\": \"xs\"});\n            return fragment;\n          }\n        };\n      }());\n      var child3 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"pull-right\");\n              var el3 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element5 = dom.childAt(fragment, [1]);\n              var element6 = dom.childAt(element5, [1]);\n              var attrMorph0 = dom.createAttrMorph(element5, 'class');\n              var morph0 = dom.createMorphAt(element6,1,1);\n              var morph1 = dom.createMorphAt(element6,3,3);\n              attribute(env, attrMorph0, element5, \"class\", concat(env, [\"col-md-3 \", subexpr(env, context, \"unless\", [get(env, context, \"data.suggested\"), \"col-md-offset-8\"], {})]));\n              inline(env, morph0, context, \"bs-button\", [], {\"clicked\": \"delete\", \"icon\": \"fa fa-icon fa-trash\", \"title\": \"Delete Annotation\", \"type\": \"danger\", \"size\": \"xs\"});\n              inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"dismiss\", \"icon\": \"fa fa-icon fa-close\", \"title\": \"Finish Editing\", \"size\": \"xs\"});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"col-md-1\");\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"col-md-1\");\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);\n              inline(env, morph0, context, \"bs-button\", [], {\"clicked\": \"delete\", \"icon\": \"fa fa-icon fa-trash\", \"title\": \"Delete Annotation\", \"type\": \"danger\", \"size\": \"xs\"});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"if\", [get(env, context, \"inDoc\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      var child4 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                    Add\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"row\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-1\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-4 small-label\");\n            var el3 = dom.createTextNode(\"Field Name\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-4 small-label\");\n            var el3 = dom.createTextNode(\"Field Type\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-3 small-label\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"row\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-1\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-4\");\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-4\");\n            dom.setAttribute(el2,\"style\",\"margin-top:3px;\");\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-3\");\n            dom.setAttribute(el2,\"style\",\"margin-top:4px;\");\n            var el3 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element4 = dom.childAt(fragment, [5]);\n            var morph0 = dom.createMorphAt(dom.childAt(element4, [3]),1,1);\n            var morph1 = dom.createMorphAt(dom.childAt(element4, [5]),1,1);\n            var morph2 = dom.createMorphAt(dom.childAt(element4, [7]),1,1);\n            inline(env, morph0, context, \"text-field\", [], {\"action\": \"createField\", \"update\": \"updateNewFieldName\", \"width\": \"110px\", \"placeholder\": get(env, context, \"guessedName\"), \"default\": get(env, context, \"defaultName\")});\n            inline(env, morph1, context, \"item-select\", [], {\"options\": get(env, context, \"extractionFieldTypes\"), \"value\": get(env, context, \"guessedType\"), \"changed\": \"updateNewFieldType\", \"submit\": \"createField\", \"width\": \"100px\"});\n            block(env, morph2, context, \"bs-button\", [], {\"clicked\": \"createField\", \"icon\": \"fa fa-icon fa-plus\", \"size\": \"xs\", \"type\": \"primary\", \"disabled\": get(env, context, \"createFieldDisabled\")}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child5 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                var el2 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"span\");\n                dom.setAttribute(el2,\"class\",\"small-label\");\n                var el3 = dom.createTextNode(\"Parents:\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);\n                inline(env, morph0, context, \"j-breadcrumbs\", [], {\"breadcrumbs\": get(env, context, \"parents\"), \"clicked\": \"elementClicked\", \"elementHovered\": \"elementHovered\"});\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                var el2 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"span\");\n                dom.setAttribute(el2,\"class\",\"small-label\");\n                var el3 = dom.createTextNode(\"Children:\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);\n                inline(env, morph0, context, \"j-breadcrumbs\", [], {\"breadcrumbs\": get(env, context, \"children\"), \"clicked\": \"elementClicked\", \"elementHovered\": \"elementHovered\"});\n                return fragment;\n              }\n            };\n          }());\n          var child2 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 2,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"col-xs-10\");\n                var el2 = dom.createTextNode(\"\\n                    \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"span\");\n                dom.setAttribute(el2,\"class\",\"btn btn-light btn-sm pattern\");\n                var el3 = dom.createTextNode(\"\\n                        Ignore Elements Beneath\\n                        \");\n                dom.appendChild(el2, el3);\n                var el3 = dom.createComment(\"\");\n                dom.appendChild(el2, el3);\n                var el3 = dom.createTextNode(\"\\n                    \");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"col-xs-1 button-align-med\");\n                var el2 = dom.createTextNode(\"\\n                    \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement, blockArguments) {\n                var dom = env.dom;\n                var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);\n                var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);\n                set(env, context, \"ignore\", blockArguments[0]);\n                set(env, context, \"index\", blockArguments[1]);\n                inline(env, morph0, context, \"check-box\", [], {\"checked\": get(env, context, \"ignore.ignoreBeneath\"), \"action\": \"ignoreBeneath\", \"name\": get(env, context, \"index\")});\n                inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"deleteIgnore\", \"clickedParam\": get(env, context, \"index\"), \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"size\": \"xs\"});\n                return fragment;\n              }\n            };\n          }());\n          var child3 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                Select Ignores\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"row\");\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-md-2 small-label\");\n              dom.setAttribute(el2,\"style\",\"margin-top:4px;\");\n              var el3 = dom.createTextNode(\"Variant:\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-md-10\");\n              var el3 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              dom.setAttribute(el1,\"style\",\"max-height:60px;\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:10px;margin-left:114px;\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);\n              var morph2 = dom.createMorphAt(dom.childAt(fragment, [3, 3]),1,1);\n              var morph3 = dom.createMorphAt(dom.childAt(fragment, [5]),1,1);\n              var morph4 = dom.createMorphAt(dom.childAt(fragment, [7]),1,1);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"if\", [get(env, context, \"parents\")], {}, child0, null);\n              block(env, morph1, context, \"if\", [get(env, context, \"children\")], {}, child1, null);\n              inline(env, morph2, context, \"item-select\", [], {\"options\": get(env, context, \"variantList\"), \"value\": get(env, context, \"data.variant\"), \"changed\": \"updateVariant\", \"width\": \"82px\"});\n              block(env, morph3, context, \"each\", [get(env, context, \"subElementIgnores\")], {}, child2, null);\n              block(env, morph4, context, \"bs-button\", [], {\"clicked\": \"ignoreElement\", \"size\": \"xs\", \"type\": \"info\", \"title\": \"Select sub elements to ignore\"}, child3, null);\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          var child0 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 2,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"            \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  dom.setAttribute(el1,\"class\",\"row\");\n                  var el2 = dom.createTextNode(\"\\n                \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"div\");\n                  dom.setAttribute(el2,\"class\",\"col-md-7\");\n                  dom.setAttribute(el2,\"style\",\"overflow:hidden;text-overflow:ellipsis;\\\"\");\n                  var el3 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"div\");\n                  dom.setAttribute(el2,\"class\",\"col-md-3\");\n                  var el3 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n            \");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement, blockArguments) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline, content = hooks.content;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var element3 = dom.childAt(fragment, [1]);\n                  var morph0 = dom.createMorphAt(dom.childAt(element3, [1]),1,1);\n                  var morph1 = dom.createMorphAt(dom.childAt(element3, [3]),1,1);\n                  set(env, context, \"annotation\", blockArguments[0]);\n                  set(env, context, \"index\", blockArguments[1]);\n                  inline(env, morph0, context, \"collapsible-text\", [], {\"fullText\": get(env, context, \"annotation.content\"), \"trimTo\": 100, \"title\": get(env, context, \"annotation.content\")});\n                  content(env, morph1, context, \"annotation.field\");\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"row\");\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"div\");\n                dom.setAttribute(el2,\"class\",\"col-md-7 small-label\");\n                var el3 = dom.createTextNode(\"Value\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"div\");\n                dom.setAttribute(el2,\"class\",\"col-md-3 small-label\");\n                var el3 = dom.createTextNode(\"Field\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n        \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);\n                dom.insertBoundary(fragment, null);\n                block(env, morph0, context, \"each\", [get(env, context, \"mappings\")], {}, child0, null);\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 2,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  dom.setAttribute(el1,\"class\",\"row\");\n                  var el2 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"div\");\n                  dom.setAttribute(el2,\"class\",\"col-md-2\");\n                  var el3 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"div\");\n                  dom.setAttribute(el2,\"class\",\"col-md-3\");\n                  dom.setAttribute(el2,\"style\",\"max-height:80px;overflow:hidden;text-overflow:ellipsis;\");\n                  var el3 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"div\");\n                  dom.setAttribute(el2,\"class\",\"col-md-3\");\n                  var el3 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"div\");\n                  dom.setAttribute(el2,\"class\",\"col-md-2\");\n                  var el3 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"div\");\n                  dom.setAttribute(el2,\"class\",\"col-md-2\");\n                  var el3 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createElement(\"div\");\n                  var el4 = dom.createTextNode(\"\\n                            \");\n                  dom.appendChild(el3, el4);\n                  var el4 = dom.createComment(\"\");\n                  dom.appendChild(el3, el4);\n                  var el4 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el3, el4);\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                \");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n                \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  dom.setAttribute(el1,\"style\",\"margin:5px;border:1px solid #ccc;\");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement, blockArguments) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var element0 = dom.childAt(fragment, [1]);\n                  var element1 = dom.childAt(element0, [9]);\n                  var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);\n                  var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n                  var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);\n                  var morph3 = dom.createMorphAt(dom.childAt(element0, [7]),1,1);\n                  var morph4 = dom.createMorphAt(element1,1,1);\n                  var morph5 = dom.createMorphAt(dom.childAt(element1, [3]),1,1);\n                  set(env, context, \"annotation\", blockArguments[0]);\n                  set(env, context, \"index\", blockArguments[1]);\n                  inline(env, morph0, context, \"item-select\", [], {\"class\": \"full-width\", \"options\": get(env, context, \"attributes\"), \"value\": get(env, context, \"annotation.attribute\"), \"changed\": \"updateAttribute\", \"name\": get(env, context, \"index\"), \"addSelected\": true});\n                  inline(env, morph1, context, \"collapsible-text\", [], {\"fullText\": get(env, context, \"annotation.content\"), \"trimTo\": 100, \"title\": get(env, context, \"annotation.content\")});\n                  inline(env, morph2, context, \"item-select\", [], {\"class\": \"full-width\", \"options\": get(env, context, \"itemFields\"), \"value\": get(env, context, \"annotation.field\"), \"changed\": \"updateField\", \"name\": get(env, context, \"index\")});\n                  inline(env, morph3, context, \"item-select\", [], {\"options\": get(env, context, \"weightFields\"), \"value\": get(env, context, \"annotation.weight\"), \"changed\": \"updateWeight\", \"name\": get(env, context, \"index\"), \"addSelected\": true});\n                  inline(env, morph4, context, \"check-box\", [], {\"checked\": get(env, context, \"annotation.required\"), \"action\": \"updateRequired\", \"name\": get(env, context, \"index\"), \"value\": get(env, context, \"annotation.required\"), \"style\": \"margin:3px;\"});\n                  inline(env, morph5, context, \"bs-button\", [], {\"clicked\": \"removeMapping\", \"clickedParam\": get(env, context, \"index\"), \"icon\": \"fa fa-icon fa-times\", \"size\": \"xs\", \"type\": \"danger\", \"title\": \"Remove Mapping\"});\n                  return fragment;\n                }\n              };\n            }());\n            var child1 = (function() {\n              var child0 = (function() {\n                return {\n                  isHTMLBars: true,\n                  revision: \"Ember@1.11.4\",\n                  blockParams: 0,\n                  cachedFragment: null,\n                  hasRendered: false,\n                  build: function build(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode(\"                            Field\\n\");\n                    dom.appendChild(el0, el1);\n                    return el0;\n                  },\n                  render: function render(context, env, contextualElement) {\n                    var dom = env.dom;\n                    dom.detectNamespace(contextualElement);\n                    var fragment;\n                    if (env.useFragmentCache && dom.canClone) {\n                      if (this.cachedFragment === null) {\n                        fragment = this.build(dom);\n                        if (this.hasRendered) {\n                          this.cachedFragment = fragment;\n                        } else {\n                          this.hasRendered = true;\n                        }\n                      }\n                      if (this.cachedFragment) {\n                        fragment = dom.cloneNode(this.cachedFragment, true);\n                      }\n                    } else {\n                      fragment = this.build(dom);\n                    }\n                    return fragment;\n                  }\n                };\n              }());\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n                \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  dom.setAttribute(el1,\"class\",\"row\");\n                  var el2 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"div\");\n                  dom.setAttribute(el2,\"class\",\"col-md-4\");\n                  var el3 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"                    \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                \");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, block = hooks.block;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var morph0 = dom.createMorphAt(dom.childAt(fragment, [3, 1]),1,1);\n                  block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"addNewMapping\", \"icon\": \"fa fa-icon fa-plus\", \"title\": \"Extract unmapped attributes\", \"size\": \"xs\", \"type\": \"primary\"}, child0, null);\n                  return fragment;\n                }\n              };\n            }());\n            var child2 = (function() {\n              var child0 = (function() {\n                return {\n                  isHTMLBars: true,\n                  revision: \"Ember@1.11.4\",\n                  blockParams: 0,\n                  cachedFragment: null,\n                  hasRendered: false,\n                  build: function build(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode(\"                    Done\\n\");\n                    dom.appendChild(el0, el1);\n                    return el0;\n                  },\n                  render: function render(context, env, contextualElement) {\n                    var dom = env.dom;\n                    dom.detectNamespace(contextualElement);\n                    var fragment;\n                    if (env.useFragmentCache && dom.canClone) {\n                      if (this.cachedFragment === null) {\n                        fragment = this.build(dom);\n                        if (this.hasRendered) {\n                          this.cachedFragment = fragment;\n                        } else {\n                          this.hasRendered = true;\n                        }\n                      }\n                      if (this.cachedFragment) {\n                        fragment = dom.cloneNode(this.cachedFragment, true);\n                      }\n                    } else {\n                      fragment = this.build(dom);\n                    }\n                    return fragment;\n                  }\n                };\n              }());\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"            \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  dom.setAttribute(el1,\"style\",\"text-align:center;\");\n                  var el2 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createComment(\"\");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"            \");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, block = hooks.block;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n                  block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"dismiss\", \"icon\": \"fa fa-icon fa-check\", \"size\": \"xs\", \"type\": \"success\"}, child0, null);\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"row\");\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"div\");\n                dom.setAttribute(el2,\"class\",\"col-md-2 small-label\");\n                var el3 = dom.createTextNode(\"Attribute\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"div\");\n                dom.setAttribute(el2,\"class\",\"col-md-3 small-label\");\n                var el3 = dom.createTextNode(\"Value\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"div\");\n                dom.setAttribute(el2,\"class\",\"col-md-3 small-label\");\n                var el3 = dom.createTextNode(\"Field\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"div\");\n                dom.setAttribute(el2,\"class\",\"col-md-2 small-label\");\n                var el3 = dom.createTextNode(\"Weight\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"div\");\n                dom.setAttribute(el2,\"class\",\"col-md-2 small-label\");\n                var el3 = dom.createTextNode(\"Req\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n        \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"scrolling-container\");\n                dom.setAttribute(el1,\"style\",\"max-height: 100px;\");\n                var el2 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"        \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"    \");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element2 = dom.childAt(fragment, [7]);\n                var morph0 = dom.createMorphAt(element2,1,1);\n                var morph1 = dom.createMorphAt(element2,2,2);\n                var morph2 = dom.createMorphAt(fragment,9,9,contextualElement);\n                block(env, morph0, context, \"each\", [get(env, context, \"mappings\")], {}, child0, null);\n                block(env, morph1, context, \"if\", [get(env, context, \"attributes\")], {}, child1, null);\n                block(env, morph2, context, \"if\", [get(env, context, \"inDoc\")], {}, child2, null);\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"if\", [get(env, context, \"data.suggested\")], {}, child0, child1);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"if\", [get(env, context, \"showingAdvanced\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"row\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-md-1\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element8 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element8, [1]),1,1);\n          var morph1 = dom.createMorphAt(element8,3,3);\n          var morph2 = dom.createMorphAt(element8,4,4);\n          var morph3 = dom.createMorphAt(fragment,3,3,contextualElement);\n          dom.insertBoundary(fragment, null);\n          block(env, morph0, context, \"unless\", [get(env, context, \"data.suggested\")], {}, child0, null);\n          block(env, morph1, context, \"if\", [get(env, context, \"data.suggested\")], {}, child1, null);\n          block(env, morph2, context, \"if\", [get(env, context, \"data.suggested\")], {}, child2, child3);\n          block(env, morph3, context, \"if\", [get(env, context, \"creatingField\")], {}, child4, child5);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"showAnnotation\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/components/bread-crumbs', ['exports', 'ember', 'ember-breadcrumbs/components/bread-crumbs'], function (exports, Ember, BreadCrumbs) {\n\n\t'use strict';\n\n\texports['default'] = BreadCrumbs['default'];\n\n});","define('portia-web/components/bs-badge', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'span',\n    classNameBindings: ['class'],\n    classNames: ['badge']\n  });\n\n});","define('portia-web/components/bs-button', ['exports', 'ember', 'portia-web/mixins/popover'], function (exports, Ember, Popover) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(Popover['default'], {\n    clickedParam: null,\n    size: null,\n    active: false,\n\n    tagName: 'button',\n    classNameBindings: ['class'],\n    processing: false,\n\n    attributeBindings: ['disabled', 'title', 'width'],\n\n    activeIcon: (function () {\n      return this.get('processing') ? 'fa fa-icon fa-circle-o-notch spinner' : this.get('icon');\n    }).property('processing'),\n\n    'class': (function () {\n      var classes = ['btn', 'btn-' + this.getWithDefault('type', 'default')],\n          size = this.get('size');\n      if (size) {\n        classes.push('btn-' + size);\n      }\n      return classes.join(' ');\n    }).property('type', 'size'),\n\n    typeChanges: (function () {\n      this.set('type', this.get('activeType'));\n    }).observes('activeType'),\n\n    click: function click() {\n      return this.sendAction('clicked', this.get('clickedParam'));\n    }\n  });\n\n});","define('portia-web/components/bs-dropdown', ['exports', 'ember', 'portia-web/mixins/modal-handler'], function (exports, Ember, ModalHandler) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(ModalHandler['default'], {\n        tagName: 'div',\n        classNames: 'btn-group',\n        classNameBindings: ['isOpen:open'],\n        iconClasses: 'fa fa-icon fa-sliders',\n\n        setUp: (function () {\n            this.close();\n            this.set('actions', this.getWithDefault('actions', []));\n        }).on('init'),\n\n        toggle: (function () {\n            return this.get('isOpen') ? 'open' : '';\n        }).property('isOpen'),\n\n        close: function close() {\n            this.set('isOpen', false);\n        },\n\n        mouseDown: function mouseDown() {\n            this.maintainFocus = true;\n            Ember['default'].run.next(this, function () {\n                delete this.maintainFocus;\n            });\n        },\n\n        focusOut: function focusOut() {\n            if (!this.maintainFocus) {\n                this.close();\n            }\n        },\n\n        actions: {\n            clicked: function clicked() {\n                this.set('isOpen', !this.get('isOpen'));\n            },\n\n            close: function close() {\n                this.close();\n            },\n\n            openModal: function openModal(action) {\n                this.close();\n                this.set('_modalName', 'name');\n                this.showComponentModal(action.title, action.modal, action, action.okCallback, action.cancelCallback, action.button_class, action.button_text);\n            },\n\n            closeModal: function closeModal() {\n                return this.ModalManager.get('name').destroy();\n            }\n        }\n    });\n\n});","define('portia-web/components/bs-label', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        attributeBindings: ['content'],\n        tagName: 'span',\n        classNames: 'label',\n        classNameBindings: ['labelType'],\n\n        labelType: (function () {\n            return 'label-' + this.getWithDefault('type', 'default');\n        }).property('type')\n    });\n\n});","define('portia-web/components/bs-message', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'div',\n        classNames: 'bs-message',\n        classNameBindings: ['bgType'],\n\n        bgType: (function () {\n            return 'bg-' + (this.get('background') || 'default');\n        }).property('type')\n    });\n\n});","define('portia-web/components/bs-modal', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(Ember['default'].Evented, {\n        layoutName: 'components/bs-modal',\n        classNames: ['modal'],\n        classNameBindings: ['fade', 'isVis:in'],\n        attributeBindings: ['role', 'aria-labelledby', 'isAriaHidden:aria-hidden', \"ariaLabelledBy:aria-labelledby\"],\n\n        isAriaHidden: (function () {\n            return \"\" + this.get('isVisible');\n        }).property('isVisible'),\n\n        modalBackdrop: '<div class=\"modal-backdrop fade in\"></div>',\n        role: 'dialog',\n        footerViews: [],\n        backdrop: true,\n        title: null,\n        isVisible: false,\n        manual: false,\n        isVis: false,\n        fullSizeButtons: false,\n        fade: true,\n\n        didInsertElement: function didInsertElement() {\n            var name;\n            this._super();\n            this.setupBinders();\n            name = this.get('name');\n            Ember['default'].assert(\"Modal name is required for modal view \" + this.get('elementId'), this.get('name'));\n            if (name == null) {\n                name = this.get('elementId');\n            }\n            this.ModalManager.add(name, this);\n            if (this.manual) {\n                return this.show();\n            }\n        },\n\n        becameVisible: function becameVisible() {\n            Ember['default'].$('body').addClass('modal-open');\n            if (this.get(\"backdrop\")) {\n                return this.appendBackdrop();\n            }\n        },\n\n        becameHidden: function becameHidden() {\n            Ember['default'].$('body').removeClass('modal-open');\n            if (this._backdrop) {\n                return this._backdrop.remove();\n            }\n        },\n\n        appendBackdrop: function appendBackdrop() {\n            var parentElement;\n            parentElement = this.$().parent();\n            return this._backdrop = Ember['default'].$(this.modalBackdrop).appendTo(parentElement);\n        },\n\n        show: function show() {\n            var current;\n            this.set('isVisible', true);\n            current = this;\n            Ember['default'].run.later(function () {\n                current.set('isVis', true);\n            }, 15);\n        },\n\n        hide: function hide() {\n            var current;\n            this.set('isVis', false);\n            current = this;\n            this.$().one('webkitTransitionEnd', function () {\n                current.set('isVisible', false);\n            });\n            return false;\n        },\n\n        toggle: function toggle() {\n            return this.toggleProperty('isVisible');\n        },\n\n        click: function click(event) {\n            var target, targetDismiss;\n            target = event.target;\n            targetDismiss = target.getAttribute(\"data-dismiss\");\n            if (targetDismiss === 'modal') {\n                return this.close();\n            }\n        },\n\n        keyPressed: function keyPressed(event) {\n            if (event.keyCode === 27) {\n                return this.close(event);\n            }\n        },\n\n        close: function close() {\n            var current;\n            this.set('isVis', false);\n            current = this;\n            this.$().one('webkitTransitionEnd', function () {\n                if (current.get('manual')) {\n                    current.destroy();\n                } else {\n                    current.hide();\n                }\n            });\n            return this.trigger('closed');\n        },\n\n        willDestroyElement: function willDestroyElement() {\n            var name;\n            Ember['default'].$('body').removeClass('modal-open');\n            this.removeHandlers();\n            name = this.get('name');\n            if (name == null) {\n                name = this.get('elementId');\n            }\n            this.ModalManager.remove(name, this);\n            if (this._backdrop) {\n                return this._backdrop.remove();\n            }\n        },\n\n        removeHandlers: function removeHandlers() {\n            return Ember['default'].$(window.document).unbind(\"keyup\", this._keyUpHandler);\n        },\n\n        setupBinders: function setupBinders() {\n            var handler;\n            handler = (function (_this) {\n                return function (event) {\n                    return _this.keyPressed(event);\n                };\n            })(this);\n            Ember['default'].$(window.document).bind(\"keyup\", handler);\n            return this._keyUpHandler = handler;\n        }\n    });\n\n});","define('portia-web/components/bs-notifications', ['exports', 'ember', 'portia-web/utils/notification-manager'], function (exports, Ember, NotificationManager) {\n\n    'use strict';\n\n    var NotificationsView = Ember['default'].CollectionView.extend({\n        classNames: ['notifications'],\n        content: NotificationManager['default'].content,\n\n        itemViewClass: Ember['default'].View.extend({\n            classNames: ['alert', 'notification'],\n            classNameBindings: ['alertType'],\n            templateName: 'components/bs-notification',\n            isVisible: false,\n            showTime: 5000,\n            fadeInTime: 400,\n            fadeOutTime: 400,\n            timeoutId: null,\n\n            alertType: (function () {\n                return 'alert-' + (this.get('content.type') || 'info');\n            }).property('content.type'),\n\n            didInsertElement: function didInsertElement() {\n                var _this = this;\n                return this.$().fadeIn(this.get('fadeInTime'), function () {\n                    _this.set('timeoutId', setTimeout(function () {\n                        _this.fadeOut();\n                    }, _this.get('showTime')));\n                });\n            },\n\n            fadeOut: function fadeOut() {\n                var _this = this;\n                clearTimeout(this.get('timeoutId'));\n                return this.$().stop().animate({ opacity: 0 }, this.get('fadeOutTime'), function () {\n                    _this.$().slideUp(_this.get('fadeOutTime'), function () {\n                        _this.get('parentView.content').removeObject(_this.get('content'));\n                    });\n                });\n            },\n\n            click: function click() {\n                this.fadeOut();\n            },\n\n            actions: {\n                close: function close() {\n                    return this.fadeOut();\n                }\n            }\n        })\n    });\n\n    exports['default'] = NotificationsView;\n\n});","define('portia-web/components/check-box', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        attributeBindings: ['type', 'value', 'style'],\n        classNames: ['offset-checkbox'],\n        tagName: 'input',\n        type: 'checkbox',\n        checked: false,\n        disabled: false,\n\n        initState: (function () {\n            this.$().prop('checked', this.get('checked'));\n            this.$().prop('disabled', this.get('disabled'));\n        }).on('didInsertElement'),\n\n        _updateElementValue: function _updateElementValue() {\n            this.set('checked', this.$().prop('checked'));\n        },\n\n        change: function change() {\n            this._updateElementValue();\n            this.sendAction('action', this.get('value'), this.get('checked'), this.get('name'));\n        }\n    });\n\n});","define('portia-web/components/closable-accordion', ['exports', 'ember-idx-accordion/accordion'], function (exports, AccordionComponent) {\n\n    'use strict';\n\n    exports['default'] = AccordionComponent['default'].extend({\n        select: function select(item) {\n            if (!item) {\n                return;\n            }\n            if (item === this.get('selected')) {\n                this.set('selected', null);\n                return this.set('selected-idx', -1);\n            } else {\n                this.set('selected', item);\n                return this.set('selected-idx', item.get('index'));\n            }\n        }\n    });\n\n});","define('portia-web/components/collapsible-text', ['exports', 'ember', 'portia-web/mixins/popover'], function (exports, Ember, Popover) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(Popover['default'], {\n        fullText: '',\n        tagName: 'span',\n        collapsed: true,\n        trimTo: 400,\n\n        collapsible: (function () {\n            return this.get('fullText') && this.get('fullText').trim().length > this.get('trimTo');\n        }).property('fullText', 'trimTo'),\n\n        displayedText: (function () {\n            var text = this.get('fullText') || '';\n            if (!this.get('collapsed')) {\n                return text.trim();\n            } else {\n                return text.trim().substring(0, this.get('trimTo'));\n            }\n        }).property('collapsed', 'fullText', 'trimTo'),\n\n        click: function click() {\n            this.set('collapsed', !this.get('collapsed'));\n        }\n    });\n\n});","define('portia-web/components/copy-clipboard', ['exports', 'ember-cli-zero-clipboard/components/zero-clipboard'], function (exports, ZeroClipboard) {\n\n    'use strict';\n\n    exports['default'] = ZeroClipboard['default'].extend({\n        layoutName: 'components/bs-button',\n        tagName: 'button',\n        classNameBindings: 'class',\n        'class': 'btn btn-default btn-xs btn-xs-size fa fa-icon fa-clipboard',\n        icon: 'fa fa-icon fa-clipboard',\n\n        actions: {\n            afterCopy: function afterCopy() {}\n        }\n    });\n\n});","define('portia-web/components/copy-spider/component', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        watchDestinationProject: (function () {\n            this.get('data').params.destinationProject = this.get('destinationProject');\n        }).observes('destinationProject'),\n\n        willInsertElement: function willInsertElement() {\n            this.get('data').params = {\n                spiders: [],\n                items: []\n            };\n\n            this.get('slyd').getProjectNames().then((function (projects) {\n                this.set('projects', projects);\n                this.set('destinationProject', projects[0].id);\n            }).bind(this));\n\n            this.get('slyd').getSpiderNames().then((function (spiders) {\n                this.set('spiders', spiders);\n            }).bind(this));\n\n            this.get('slyd').loadItems().then((function (items) {\n                this.set('items', items.map(function (item) {\n                    return item.name;\n                }));\n            }).bind(this));\n        },\n\n        actions: {\n            selectSpider: function selectSpider(spider, isSelected) {\n                var params = this.get('data').params;\n                if (!isSelected) {\n                    params.spiders = params.spiders.without(spider);\n                } else if (!params.spiders.contains(spider)) {\n                    params.spiders.push(spider);\n                }\n            },\n\n            selectItem: function selectItem(item, isSelected) {\n                var params = this.get('data').params;\n                if (!isSelected) {\n                    params.items = params.items.without(item);\n                } else if (!params.items.contains(item)) {\n                    params.items.push(item);\n                }\n            }\n        }\n    });\n\n});","define('portia-web/components/copy-spider/template', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"checkbox\");\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"label\");\n          var el3 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1, 1]);\n          var morph0 = dom.createMorphAt(element1,1,1);\n          var morph1 = dom.createMorphAt(element1,3,3);\n          inline(env, morph0, context, \"check-box\", [], {\"action\": \"selectSpider\", \"value\": get(env, context, \"this\")});\n          content(env, morph1, context, \"this\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"checkbox\");\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"label\");\n          var el3 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 1]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          var morph1 = dom.createMorphAt(element0,3,3);\n          inline(env, morph0, context, \"check-box\", [], {\"action\": \"selectItem\", \"value\": get(env, context, \"this\")});\n          content(env, morph1, context, \"this\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"form-group\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"label\");\n        dom.setAttribute(el2,\"for\",\"targetProject\");\n        var el3 = dom.createTextNode(\"Destination Project\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group col-md-6\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        dom.setAttribute(el3,\"for\",\"targetProject\");\n        var el4 = dom.createTextNode(\"Spiders\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group col-md-6\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        dom.setAttribute(el3,\"for\",\"targetProject\");\n        var el4 = dom.createTextNode(\"Items\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),3,3);\n        var morph1 = dom.createMorphAt(dom.childAt(element2, [1]),3,3);\n        var morph2 = dom.createMorphAt(dom.childAt(element2, [3]),3,3);\n        inline(env, morph0, context, \"view\", [\"select\"], {\"content\": get(env, context, \"projects\"), \"optionValuePath\": \"content.id\", \"optionLabelPath\": \"content.name\", \"value\": get(env, context, \"destinationProject\"), \"id\": \"targetProject\", \"class\": \"form-control\"});\n        block(env, morph1, context, \"each\", [get(env, context, \"spiders\")], {}, child0, null);\n        block(env, morph2, context, \"each\", [get(env, context, \"items\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/components/display-button-edit-delete', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'div',\n        classNames: ['row'],\n        text: '',\n        name: null,\n\n        actions: {\n            saveText: function saveText(text, name) {\n                if (arguments.length > 0) {\n                    this.set('text', text);\n                }\n                this.sendAction('save', this.get('text'), name);\n            },\n\n            deleteText: function deleteText() {\n                this.sendAction('delete', this.get('text'));\n            }\n        }\n    });\n\n});","define('portia-web/components/draggable-button', ['exports', 'portia-web/components/bs-button', 'portia-web/mixins/draggable'], function (exports, BsButton, Draggable) {\n\n    'use strict';\n\n    exports['default'] = BsButton['default'].extend(Draggable['default'], {\n        tagName: 'span'\n    });\n\n});","define('portia-web/components/dummy-component', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend({});\n\n});","define('portia-web/components/edit-item', ['exports', 'ember', 'portia-web/mixins/notification-handler', 'portia-web/utils/validate-field-name'], function (exports, Ember, NotificationHandler, _validateFieldName) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(NotificationHandler['default'], {\n        item: null,\n        items: null,\n        extractionTypes: [],\n\n        actions: {\n            addField: function addField() {\n                this.sendAction('addField', this.get('item'));\n            },\n\n            deleteField: function deleteField(field) {\n                this.sendAction('deleteField', this.get('item'), field);\n            },\n\n            'delete': function _delete() {\n                this.sendAction('delete', this.get('item'));\n            },\n\n            validateFieldName: function validateFieldName(input) {\n                var error = _validateFieldName['default'](input.text, this.get('item.fields'));\n                if (error) {\n                    input.setInvalid(error);\n                }\n            },\n\n            validateItemName: function validateItemName(input) {\n                if (this.get('items').findBy('display_name', input.text)) {\n                    input.setInvalid('There is already a item with that name.');\n                }\n            }\n        }\n    });\n\n});","define('portia-web/components/edit-items/component', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'a',\n\n        click: function click() {\n            this.get('actionData.controller').transitionToRoute('items');\n            this.sendAction('clicked');\n        }\n    });\n\n});","define('portia-web/components/edit-items/template', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"Edit Items\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/components/em-accordion-item', ['exports', 'ember-idx-accordion/accordion-item'], function (exports, AccordionItemComponent) {\n\n\t'use strict';\n\n\texports['default'] = AccordionItemComponent['default'];\n\n});","define('portia-web/components/em-accordion', ['exports', 'ember-idx-accordion/accordion'], function (exports, AccordionComponent) {\n\n\t'use strict';\n\n\texports['default'] = AccordionComponent['default'];\n\n});","define('portia-web/components/extracted-item', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        extractedItem: null,\n\n        fields: Ember['default'].computed.reads('extractedItem.fields'),\n\n        textFields: (function () {\n            return this.get('fields').filter(function (field) {\n                return field.get('type') !== 'image';\n            });\n        }).property('fields'),\n\n        imageFields: (function () {\n            return this.get('fields').filter(function (field) {\n                return field.get('type') === 'image';\n            });\n        }).property('fields'),\n\n        variants: Ember['default'].computed.reads('extractedItem.variants'),\n\n        matchedTemplate: Ember['default'].computed.reads('extractedItem.matchedTemplate'),\n\n        url: Ember['default'].computed.reads('extractedItem.url'),\n\n        actions: {\n            loadUrl: function loadUrl() {\n                this.sendAction('loadUrl', this.get('url'));\n            },\n\n            editTemplate: function editTemplate(templateName) {\n                this.sendAction('editTemplate', templateName);\n            }\n        }\n    });\n\n});","define('portia-web/components/extractor-dropzone', ['exports', 'ember', 'portia-web/mixins/droppable'], function (exports, Ember, Droppable) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(Droppable['default'], {\n        tagName: 'span'\n    });\n\n});","define('portia-web/components/file-download/component', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'a',\n\n        click: function click() {\n            this.sendAction('clicked');\n            if (!this.element.href) {\n                this.get('slyd').makeAjaxCall({\n                    type: 'POST',\n                    url: '/projects',\n                    data: { 'cmd': 'download',\n                        'args': [this.get('slyd.project'), '*', [0, 10]] },\n                    dataType: 'binary'\n                }).then((function (blob) {\n                    this.element.setAttribute('href', window.URL.createObjectURL(blob));\n                    Ember['default'].run.next(this, function () {\n                        this.element.click();\n                        this.element.removeAttribute('href');\n                    });\n                }).bind(this));\n            }\n        }\n    });\n\n});","define('portia-web/components/file-download/template', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"Download\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/components/inline-editable-text-field', ['exports', 'ember', 'portia-web/mixins/notification-handler'], function (exports, Ember, NotificationHandler) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(NotificationHandler['default'], {\n        tagName: 'div',\n        classNames: 'class',\n        classNameBindings: ['editing::not-editing'],\n        editing: false,\n        validation: '.*',\n        text: '',\n        name: null,\n\n        click: function click() {\n            if (!this.get('editing')) {\n                this.set('editing', true);\n                Ember['default'].run.later((function () {\n                    var input = Ember['default'].$(this.get('element')).find('input');\n                    input.focus();\n                    var value = input.val();\n                    input.val('').val(value);\n                }).bind(this), 300);\n            }\n        },\n\n        actions: {\n            update: function update(text) {\n                this.set('editing', false);\n                if (Ember['default'].$.trim(text).length < 1) {\n                    return;\n                }\n                if (text !== this.get('text')) {\n                    var error = null;\n                    this.sendAction('validate', {\n                        text: text,\n                        setInvalid: function setInvalid(err) {\n                            return error = err;\n                        }\n                    });\n\n                    var re = new RegExp(this.get('validation'), 'g');\n                    if (!error && !re.test(text)) {\n                        error = '\"' + text + '\" is not a valid name. Names must match \"' + this.get('validation') + '\".';\n                    }\n\n                    if (error) {\n                        this.set('editing', true);\n                        this.showWarningNotification('Validation Error', error);\n                    } else {\n                        this.set('text', text);\n                        this.sendAction('action', this.get('text'), this.get('name'));\n                    }\n                }\n            }\n        }\n    });\n\n});","define('portia-web/components/inline-help', ['exports', 'ember', 'portia-web/mixins/popover'], function (exports, Ember, Popover) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(Popover['default'], {\n        tagName: 'span',\n        message: null,\n        html: true,\n        attributeBindings: ['name', 'title'],\n        classNames: ['fa', 'fa-icon', 'fa-icon', 'fa-info-circle', 'inline-help'],\n\n        title: (function () {\n            if (this.get('message')) {\n                return this.messages.get(this.get('message'));\n            }\n        }).property('message')\n    });\n\n});","define('portia-web/components/item-select', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        value: null,\n        name: null,\n        attributeBindings: ['value', 'style'],\n        tagName: 'select',\n        classNames: ['selectbox'],\n\n        options: [],\n        style: (function () {\n            var width = this.get('width');\n            if (width) {\n                return 'width:' + width + ';';\n            }\n            return '';\n        }).property('width'),\n\n        keyUp: function keyUp(e) {\n            if (e.which === 13) {\n                this.sendAction('submit', this.get('value'), this.get('name'));\n            }\n        },\n\n        buildOptions: function buildOptions() {\n            var selectedValue = this.get('value'),\n                labelProperty = this.getWithDefault('labelProperty', 'name'),\n                valueProperty = this.getWithDefault('valueProperty', 'name'),\n                defaultValue = [];\n            if (!selectedValue) {\n                defaultValue = [{ value: '', label: '', selected: true }];\n            } else {\n                this.sendAction('changed', selectedValue, this.get('name'));\n            }\n            var seenSelected = false,\n                arr = defaultValue.concat(this.get('options').map(function (opt) {\n                if (typeof opt === 'string') {\n                    opt = { value: opt };\n                } else if (opt instanceof Ember['default'].Object) {\n                    opt = {\n                        value: opt.get(valueProperty),\n                        label: opt.get(labelProperty)\n                    };\n                } else {\n                    opt = {\n                        value: opt[valueProperty] || opt.value,\n                        label: opt[labelProperty] || opt.label\n                    };\n                }\n                if (opt.value === selectedValue) {\n                    seenSelected = true;\n                }\n                opt.label = opt.label || opt.value;\n                opt.selected = opt.value === selectedValue;\n                return opt;\n            }));\n            if (!seenSelected && selectedValue && this.get('addSelected')) {\n                arr.push({\n                    value: selectedValue,\n                    label: selectedValue,\n                    selected: true\n                });\n            }\n            return arr;\n        },\n\n        optionsList: (function () {\n            return this.buildOptions();\n        }).property('value', 'options'),\n\n        change: function change(e) {\n            if (e.type !== 'change') {\n                return;\n            }\n            var originalEvent = e.originalEvent,\n                target = originalEvent.explicitOriginalTarget || originalEvent.target,\n                changedTo = target.value;\n            this.set('value', changedTo);\n            this.sendAction('changed', changedTo, this.get('name'));\n        }\n    });\n\n});","define('portia-web/components/j-breadcrumb', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'li',\n        classNames: 'breadcrumbs',\n        attributeBindings: 'title',\n        html: true,\n\n        label: (function () {\n            return this.get('info.label');\n        }).property('info.label', 'info'),\n\n        click: function click() {\n            this.sendAction('clicked', this.get('info'));\n        },\n\n        mouseEnter: function mouseEnter() {\n            this.set('info.showFull', true);\n            this.sendAction('hovered', this.get('info'), this.get('index'), true);\n        },\n\n        mouseLeave: function mouseLeave() {\n            this.set('info.showFull', false);\n            this.sendAction('hovered', this.get('info'), this.get('index'), false);\n        }\n    });\n\n});","define('portia-web/components/j-breadcrumbs', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        openOnLeft: true,\n        tagName: 'ul',\n        classNames: 'breadcrumbs',\n\n        actions: {\n            clicked: function clicked(breadcrumb) {\n                this.sendAction('clicked', breadcrumb);\n            },\n\n            hovered: function hovered(breadcrumb, index, _hovered) {\n                this.sendAction('elementHovered', breadcrumb, index, _hovered);\n            }\n        }\n    });\n\n});","define('portia-web/components/json-file-compare', ['exports', 'ember', 'portia-web/mixins/conflict-mixin'], function (exports, Ember, ConflictMixin) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(ConflictMixin['default'], {\n        tagName: 'span',\n        json: null,\n        path: '',\n\n        v: function v(json) {\n            var toString = function toString(v) {\n                return JSON.stringify(v).trim().substring(0, 500).replace(/^\"|\"$/g, '');\n            };\n            if (json) {\n                if (Array.isArray(json)) {\n                    return json.map(function (v) {\n                        return toString(v);\n                    }).join(', ');\n                } else {\n                    return toString(json);\n                }\n            } else {\n                return '';\n            }\n        },\n\n        isObject: (function () {\n            return this._isObject();\n        }).property('json'),\n\n        isArray: (function () {\n            return this._isArray();\n        }).property('json'),\n\n        isConflict: (function () {\n            return this._isConflict();\n        }).property('json'),\n\n        conflictValues: (function () {\n            var obj = Ember['default'].Object.create().setProperties(this.get('json')),\n                accepted = this.get('conflictedKeyPaths.' + this.get('path') + '.accepted'),\n                rejected = this.get('conflictedKeyPaths.' + this.get('path') + '.rejected'),\n                values = [{ key: 'base_val', value: this.v(obj.get('__CONFLICT.base_val')), label: 'Original' }, { key: 'my_val', value: this.v(obj.get('__CONFLICT.my_val')), label: 'Your change' }, { key: 'other_val', value: this.v(obj.get('__CONFLICT.other_val')), label: 'Other change' }];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var v = _step.value;\n\n                    v.accepted = accepted.has(v.key);\n                    v.rejected = rejected.has(v.key);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator['return']) {\n                        _iterator['return']();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return values;\n        }).property('json', 'refresh'),\n\n        resolved: (function () {\n            return this.get('conflictedKeyPaths.' + this.get('path') + '.resolved');\n        }).property('refresh'),\n\n        resolvedRepr: (function () {\n            return this.v(this.resolvedValue());\n        }).property('resolved'),\n\n        value: (function () {\n            return this.v(this.get('json'));\n        }).property('json'),\n\n        entries: (function () {\n            var _this = this;\n\n            var json = this.get('json');\n            if (json) {\n                if (this._isArray()) {\n                    var idx = -1;\n                    return json.map(function (data) {\n                        if (_this._isObject(data) && '__CONFLICT' in data) {\n                            idx += 1;\n                            var a = {\n                                conflict: true,\n                                key: idx,\n                                path: _this.get('path') + '.' + idx,\n                                json: data\n                            };\n                            return a;\n                        } else {\n                            return {\n                                value: data\n                            };\n                        }\n                    });\n                }\n                return Object.keys(json).sort().map((function (key) {\n                    return {\n                        path: this.get('path') ? this.get('path') + '.' + key : key,\n                        key: key,\n                        json: json[key]\n                    };\n                }).bind(this));\n            } else {\n                return null;\n            }\n        }).property('json'),\n\n        actions: {\n            conflictOptionSelected: function conflictOptionSelected(path, option) {\n                if (option) {\n                    this._conflictOptionSelected(path, option);\n                } else {\n                    this._resetPath(path);\n                }\n                this.notifyPropertyChange('refresh');\n            },\n\n            conflictOptionRejected: function conflictOptionRejected(path, option) {\n                this._conflictOptionRejected(path, option);\n                this.notifyPropertyChange('refresh');\n            },\n\n            conflictOptionUpdated: function conflictOptionUpdated(path, accepted, rejected) {\n                this._conflictOptionUpdated(path, accepted, rejected);\n                this.notifyPropertyChange('refresh');\n            }\n        }\n    });\n\n});","define('portia-web/components/label-with-tooltip', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'div',\n        attributeBindings: ['title']\n    });\n\n});","define('portia-web/components/page-actions-editor', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var TYPES = ['click', 'set', 'wait', 'scroll'];\n\n    exports['default'] = Ember['default'].Component.extend({\n        actionTypes: TYPES,\n        pageActions: null,\n        editing: null,\n        isEditingWait: Ember['default'].computed.equal('editing.type', 'wait'),\n        isEditingSet: Ember['default'].computed.equal('editing.type', 'set'),\n        isEditingScroll: Ember['default'].computed.equal('editing.type', 'scroll'),\n        addingNew: false,\n\n        actions: {\n            reorderPageAction: function reorderPageAction(originalIndex, newIndex) {\n                var pageActions = this.get('pageActions');\n                var action = pageActions[originalIndex];\n                pageActions.removeAt(originalIndex);\n                pageActions.insertAt(newIndex, action);\n            },\n\n            deletePageAction: function deletePageAction(index) {\n                var pageActions = this.get('pageActions');\n                pageActions.removeAt(index);\n            },\n            editPageAction: function editPageAction(pageAction) {\n                pageAction._edited = true;\n                this.set('editing', pageAction);\n            },\n            back: function back() {\n                this.set('editing', null);\n            },\n            addContinue: function addContinue() {\n                this.set('addingNew', false);\n            },\n            addNew: function addNew() {\n                var pa = Ember['default'].Object.create({\n                    type: \"wait\",\n                    _edited: true\n                });\n                this.set('addingNew', true);\n                this.set('editing', pa);\n                this.get('pageActions').pushObject(pa);\n            }\n        }\n    });\n\n});","define('portia-web/components/pin-toolbox-button', ['exports', 'ember', 'portia-web/components/bs-button'], function (exports, Ember, BsButton) {\n\n    'use strict';\n\n    exports['default'] = BsButton['default'].extend({\n        toolbox: Ember['default'].Object.create(),\n\n        classNameBindings: ['pinned'],\n\n        disabled: Ember['default'].computed.reads('toolbox.fixed'),\n        pinned: Ember['default'].computed.or('toolbox.fixed', 'toolbox.pinned'),\n\n        click: function click() {\n            this.toggleProperty('toolbox.pinned');\n            if (window.localStorage) {\n                localStorage.portia_toolbox_pinned = this.get('toolbox.pinned') ? 'true' : '';\n            }\n        }\n    });\n\n});","define('portia-web/components/regex-text-field-with-button/component', ['exports', 'portia-web/components/text-field-with-button', 'portia-web/mixins/notification-handler'], function (exports, TextFieldWithButton, NotificationHandler) {\n\n    'use strict';\n\n    exports['default'] = TextFieldWithButton['default'].extend(NotificationHandler['default'], {\n        classNames: ['regex-textfield'],\n        actions: {\n            sendText: function sendText(text) {\n                if (arguments.length > 0 && typeof text === 'string') {\n                    this.set('text', text);\n                }\n                try {\n                    new RegExp(this.get('text'));\n                    this.sendAction('action', this.get('text'));\n                    if (/([^\\\\]|^)\\[\\]/.test(this.get('text'))) {\n                        // A lone [] is invalid in a python RegExp but valid in JS\n                        throw new Error('Invalid regexp');\n                    }\n                } catch (e) {\n                    this.showWarningNotification('Validation Error', '\"' + this.get('text') + '\" ' + 'is not a valid regular expression');\n                    return;\n                }\n                if (this.get('reset')) {\n                    this.$().find('textarea').val('');\n                    this.$().find('input[type=\"text\"]').val('');\n                }\n            }\n        }\n    });\n\n});","define('portia-web/components/regex-text-field-with-button/template', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"col-xs-10\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"col-xs-2 button-align-sm\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);\n        inline(env, morph0, context, \"text-field\", [], {\"clear\": get(env, context, \"clear\"), \"width\": \"110%\", \"placeholder\": get(env, context, \"placeholder\"), \"action\": \"sendText\", \"update\": \"updateText\"});\n        inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"sendText\", \"icon\": \"fa fa-icon fa-plus\", \"disabled\": get(env, context, \"disabled\"), \"type\": \"primary\", \"size\": \"xs\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/components/reorder-handler', ['exports', 'ember', 'portia-web/mixins/draggable'], function (exports, Ember, Draggable) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(Draggable['default'], {\n        tagName: 'i',\n        classNames: 'fa fa-icon fa-arrows reorder-handler',\n        attributeBindings: ['style'],\n        dragStart: function dragStart(event) {\n            var dataTransfer = event.originalEvent.dataTransfer;\n            dataTransfer.effectAllowed = \"move\";\n            dataTransfer.setData('text/plain', \"\");\n            var dragElement = this.$().parentsUntil('.reorderable-list').eq(-1);\n            dataTransfer.setDragImage(dragElement[0], 5, 5);\n            dragElement.addClass('dragging');\n        }\n    });\n\n});","define('portia-web/components/reorderable-list', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    exports['default'] = Ember['default'].Component.extend({\n        classNames: ['reorderable-list'],\n\n        drop: function drop(event) {\n            event.preventDefault();\n            this.$('.drop-helper').remove();\n            var $moved = this.$('.dragging').removeClass('dragging');\n\n            var _getDropTarget = this.getDropTarget(event.originalEvent);\n\n            var _getDropTarget2 = _slicedToArray(_getDropTarget, 2);\n\n            var target = _getDropTarget2[0];\n            var after = _getDropTarget2[1];\n\n            // All this are no-ops\n            if (after && target === $moved.prev()[0] || !after && target === $moved.next()[0] || target === $moved[0]) {\n                return;\n            }\n            var originalIndex = $moved.prevAll().length;\n            var newIndex = $(target).prevAll().length + (after ? 1 : 0);\n            if ($(target).prevAll().filter($moved).length) {\n                // If dropping after the original position, remove one to\n                // compensate for the removed element\n                newIndex -= 1;\n            }\n            this.sendAction('reorder', originalIndex, newIndex);\n        },\n\n        dragLeave: function dragLeave(event) {\n            event.preventDefault();\n            this.$('.drop-helper').remove();\n        },\n\n        getDropTarget: function getDropTarget(event) {\n            var container = this.$()[0];\n            if (event.target === container) {\n                return [null, null];\n            }\n\n            var overTarget = event.target.parentNode === container ? event.target : $(event.target).parentsUntil(this.$()).get(-1);\n\n            var clientRect = overTarget.getBoundingClientRect();\n            var targetY = event.clientY - clientRect.top;\n            var after = targetY > clientRect.height / 2;\n            return [overTarget, after];\n        },\n\n        dragOver: function dragOver(event) {\n            this.$('.drop-helper').remove();\n            var helper = $('<div/>').addClass('drop-helper');\n\n            var _getDropTarget3 = this.getDropTarget(event.originalEvent);\n\n            var _getDropTarget32 = _slicedToArray(_getDropTarget3, 2);\n\n            var target = _getDropTarget32[0];\n            var after = _getDropTarget32[1];\n\n            if (target) {\n                event.preventDefault();\n                helper[after ? 'insertAfter' : 'insertBefore'](target);\n            }\n        }\n    });\n\n});","define('portia-web/components/text-area-with-button', ['exports', 'portia-web/components/text-field-with-button'], function (exports, TextFieldWithButton) {\n\n    'use strict';\n\n    exports['default'] = TextFieldWithButton['default'].extend({\n        outerClasses: ['box-spacer'],\n        classNameBindings: ['outerClasses']\n    });\n\n});","define('portia-web/components/text-area', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'textarea',\n        attributeBindings: ['placeholder', 'style', 'name', 'value'],\n        classNames: 'textarea',\n        width: null,\n        placeholder: null,\n        resize: false,\n        max_height: null,\n        name: null,\n        splitlines: false,\n        clear: null,\n        value: null,\n        submitOnEnter: true,\n\n        style: (function () {\n            var attrs = [],\n                width = this.get('width'),\n                resize = this.get('resize'),\n                max_height = this.get('max_height');\n            if (width) {\n                attrs.push('width:' + width);\n            }\n            if (resize) {\n                attrs.push('resize:' + resize);\n            }\n            if (max_height) {\n                attrs.push('max-height:' + max_height);\n            }\n            if (attrs.length === 0) {\n                return;\n            }\n            attrs.push('');\n            return attrs.join(';');\n        }).property('width', 'resize', 'max_height'),\n\n        keyUp: function keyUp(e) {\n            if (e.which === 13 && this.getWithDefault('submitOnEnter', true)) {\n                var text = this.get('element').value,\n                    split = [];\n                if (this.get('splitlines')) {\n                    text = text.split(/\\r?\\n/);\n                    for (var i = 0; i < text.length; i++) {\n                        if (text[i].length > 0) {\n                            split.push(text[i]);\n                        }\n                    }\n                    this.sendAction('action', split, this.get('name'));\n                } else {\n                    this.sendAction('action', text, this.get('name'));\n                }\n            }\n            this.change();\n        },\n\n        change: function change() {\n            this.sendAction('update', this.get('element').value, this.get('name'));\n        },\n\n        paste: function paste() {\n            this.change();\n        }\n    });\n\n});","define('portia-web/components/text-field-dropdown-button', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'div',\n        bindAttributes: ['class'],\n        options: [],\n        placeholder: '',\n\n        actions: {\n            save: function save(text) {\n                if (arguments.length > 0 && typeof text === 'string') {\n                    this.set('text', text);\n                }\n                this.sendAction('action', this.get('text'), this.get('option'));\n                if (this.get('reset')) {\n                    this.$().find('textarea').val('');\n                    this.$().find('input[type=\"text\"]').val('');\n                }\n            },\n\n            updateText: function updateText(text) {\n                this.set('text', text);\n            },\n\n            updateOption: function updateOption(option) {\n                this.set('option', option);\n            }\n        }\n    });\n\n});","define('portia-web/components/text-field-with-button', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        outerClasses: ['row'],\n        tagName: 'div',\n        classNameBindings: ['outerClasses'],\n        text: null,\n        placeholder: '',\n\n        disabled: (function () {\n            return Ember['default'].$.trim(this.get('text')).length < 1;\n        }).property('text'),\n\n        setValue: (function () {\n            this.$().find('textarea').val(this.get('data'));\n            this.set('text', this.get('data'));\n        }).observes('data'),\n\n        actions: {\n            sendText: function sendText(text) {\n                if (arguments.length > 0 && typeof text === 'string') {\n                    this.set('text', text);\n                }\n                this.sendAction('action', this.get('text'));\n                if (this.get('reset')) {\n                    this.$().find('textarea').val('');\n                    this.$().find('input[type=\"text\"]').val('');\n                }\n            },\n\n            updateText: function updateText(text) {\n                this.set('text', text);\n            }\n        }\n    });\n\n});","define('portia-web/components/text-field', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        tagName: 'input',\n        type: 'text',\n        value: '',\n        name: null,\n        width: null,\n        placeholder: null,\n        clear: false,\n        attributeBindings: ['type', 'disabled', 'placeholder', 'style', 'value'],\n        classNames: ['form-control', 'input-sm'],\n\n        setValue: (function () {\n            if (this.get('value')) {\n                this.get('element').value = this.get('value');\n            }\n        }).on('didInsertElement'),\n\n        style: (function () {\n            var width = this.get('width');\n            if (width) {\n                return 'width:' + width + ';';\n            }\n            return '';\n        }).property('width'),\n\n        keyUp: function keyUp(e) {\n            if (e.which === 13) {\n                if (this.get('saveOnExit')) {\n                    // XXX: Focusout will trigger to avoid double save\n                    Ember['default'].$(this.get('element')).trigger('focusout');\n                } else {\n                    this.sendAction('action', this.get('element').value, this.get('name'));\n                }\n                if (this.get('clear')) {\n                    this.get('element').value = '';\n                    this.set('clear', false);\n                }\n            }\n            this.change();\n        },\n\n        focusOut: function focusOut() {\n            if (this.get('saveOnExit') && this.get('element')) {\n                this.sendAction('action', this.get('element').value, this.get('name'));\n            }\n            if (this.get('clear')) {\n                this.get('element').value = '';\n                this.set('clear', false);\n            }\n            this.change();\n        },\n\n        change: function change() {\n            if (this.get('element')) {\n                this.sendAction('update', this.get('element').value, this.get('name'));\n            }\n        },\n\n        didInsertElement: function didInsertElement() {\n            this._super();\n            this.$().focus();\n        }\n    });\n\n});","define('portia-web/components/tool-box', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        classNameBindings: ['fixed:toolbox-fixed'],\n\n        documentView: (function () {\n            this.set('documentView', this.get('document.view'));\n        }).property('document.view'),\n\n        fixed: Ember['default'].computed.reads('control.fixed'),\n        pinned: Ember['default'].computed.reads('control.pinned'),\n\n        setBlocked: (function () {\n            if (this.get('documentView')) {\n                this.get('documentView').setInteractionsBlocked(this.get('fixed'));\n            }\n        }).observes('fixed'),\n\n        setToolboxNow: function setToolboxNow(show) {\n            if (!show && this.get('fixed')) {\n                return;\n            }\n            Ember['default'].$('#toolbox').css('margin-right', show ? 0 : -365);\n            Ember['default'].$('#scraped-doc').css('margin-right', show ? 400 : 35);\n\n            Ember['default'].run.later(this, function () {\n                var docView = this.get('documentView');\n                if (docView && docView.redrawNow) {\n                    docView.redrawNow();\n                }\n            }, show ? 320 : 820);\n        },\n\n        setToolbox: function setToolbox(show) {\n            Ember['default'].run.debounce(this, this.setToolboxNow, show, show ? 300 : 800);\n        },\n\n        showToolbox: function showToolbox() {\n            return this.setToolbox(true);\n        },\n        hideToolbox: function hideToolbox() {\n            return this.setToolbox(false);\n        },\n\n        mouseEnter: function mouseEnter() {\n            this.showToolbox();\n        },\n\n        mouseLeave: function mouseLeave(e) {\n            if (!this.get('fixed') && !this.get('pinned')) {\n                if (e.target.tagName.toLowerCase() !== 'select') {\n                    this.hideToolbox();\n                }\n            }\n        },\n\n        changeState: (function () {\n            if (this.get('pinned') || this.get('fixed')) {\n                this.showToolbox();\n            } else {\n                this.hideToolbox();\n            }\n        }).observes('fixed', 'pinned'),\n\n        didInsertElement: function didInsertElement() {\n            this._super();\n        }\n    });\n\n});","define('portia-web/components/top-bar', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend({});\n\n});","define('portia-web/components/web-document-js/component', ['exports', 'ember', 'portia-web/components/web-document', 'portia-web/utils/interaction-event', 'portia-web/utils/utils', 'portia-web/utils/selector-prediction'], function (exports, Ember, WebDocument, interaction_event, utils, selector_prediction) {\n\n    'use strict';\n\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    function paintCanvasMessage(canvas) {\n        var ctx = canvas.getContext('2d');\n\n        var pattern = document.createElement('canvas');\n        pattern.width = 20;\n        pattern.height = 20;\n        var pctx = pattern.getContext('2d');\n        pctx.fillStyle = \"#ccc\";\n        pctx.fillRect(0, 0, 10, 10);\n        pctx.fillRect(10, 10, 10, 10);\n        pattern = ctx.createPattern(pattern, \"repeat\");\n\n        ctx.fillStyle = pattern;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.font = '16px sans-serif';\n        ctx.fillStyle = 'black';\n        ctx.fillText('Displaying the content of the canvas is not supported', 10, canvas.height / 2);\n    }\n\n    function addEmbedBlockedMessage(node) {\n        if (!node || !node.parentNode || /EMBED|OBJECT/.test(node.parentNode.tagName)) {\n            return;\n        }\n        var computedStyle = window.getComputedStyle(node);\n\n        var width = node.hasAttribute(\"width\") ? node.getAttribute(\"width\") + \"px\" : computedStyle.width;\n        var height = node.hasAttribute(\"height\") ? node.getAttribute(\"height\") + \"px\" : computedStyle.height;\n\n        var errorMsg = $(\"<div/>\").css({\n            'background-color': '#269',\n            'background-image': 'linear-gradient(rgba(255,255,255,.2) 1px, transparent 1px), ' + 'linear-gradient(90deg, rgba(255,255,255,.2) 1px, transparent 1px)',\n            'background-size': '20px 20px, 20px 20px',\n            'text-align': \"center\",\n            'overflow': \"hidden\",\n            'font-size': \"18px\",\n            'display': \"block\",\n            'font-family': 'sans-serif',\n            'color': 'white',\n            'text-shadow': '1px black',\n            'width': width,\n            'height': height,\n            'lineHeight': height\n        }).text(\"Portia doesn't support browser plugins.\");\n        node.style.display = \"none\";\n        node.parentNode.insertBefore(errorMsg[0], node);\n    }\n\n    function treeMirrorDelegate() {\n        return {\n            createElement: function createElement(tagName) {\n                var node = null;\n                if (tagName === 'SCRIPT' || tagName === 'BASE') {\n                    node = document.createElement('NOSCRIPT');\n                } else {\n                    try {\n                        node = document.createElement(tagName);\n                    } catch (e) {\n                        // Invalid tag name\n                        node = document.createElement('NOSCRIPT');\n                    }\n                }\n                if (tagName === 'FORM') {\n                    $(node).on('submit', function () {\n                        return false;\n                    });\n                } else if (tagName === 'IFRAME' || tagName === 'FRAME') {\n                    node.setAttribute('src', '/static/frames-not-supported.html');\n                } else if (tagName === 'CANVAS') {\n                    paintCanvasMessage(node);\n                } else if (tagName === 'OBJECT' || tagName === 'EMBED') {\n                    setTimeout(addEmbedBlockedMessage.bind(null, node), 100);\n                }\n                return node;\n            },\n            setAttribute: function setAttribute(node, attrName, value) {\n                if (/^on/.test(attrName) || // Disallow JS attributes\n                (node.tagName === 'FRAME' || node.tagName === 'IFRAME') && (attrName === 'src' || attrName === 'srcdoc') || // Frames not supported\n                (node.tagName === 'OBJECT' || node.tagName === 'EMBED') && (attrName === 'data' || attrName === 'src') || // Block embed / object\n                node.tagName === 'META' && attrName === 'http-equiv' // Disallow meta http-equiv\n                ) {\n                        return true;\n                    }\n\n                try {\n                    node.setAttribute(attrName, value);\n                } catch (e) {\n                    console.log(e, attrName, value);\n                }\n\n                if (node.tagName === 'CANVAS' && (attrName === 'width' || attrName === 'height')) {\n                    paintCanvasMessage(node);\n                }\n\n                return true;\n            }\n        };\n    }\n\n    exports['default'] = WebDocument['default'].extend({\n        loading: false, // Whatever a page is being loaded at the moment\n        currentUrl: \"\", // Current URL\n        currentFp: \"\", // Hash of the url.\n        mutationsAfterLoaded: 0,\n\n        connect: (function () {\n            var _this = this;\n\n            var ws = this.get('ws');\n\n            ws.addCommand('loadStarted', (function () {\n                this.showLoading(true);\n            }).bind(this));\n\n            ws.addCommand('metadata', (function (data) {\n                this[data.loaded ? 'hideLoading' : 'showLoading']();\n                this.set('loading', !data.loaded);\n                this.set('currentUrl', data.url);\n                this.set('currentFp', data.fp);\n\n                this.sendDocumentEvent('pageMetadata', data);\n\n                Ember['default'].run.next(this, this.redrawNow);\n            }).bind(this));\n\n            ws.addCommand('mutation', (function (data) {\n                this.assertInMode('browse');\n                data = data._data;\n                var action = data[0];\n                var args = data.slice(1);\n                if (action === 'initialize') {\n                    this.iframePromise = this.clearIframe().then((function () {\n                        this.set('mutationsAfterLoaded', 0);\n                        this._updateEventHandlers();\n                        var doc = this.getIframeNode().contentWindow.document;\n                        this.treeMirror = new TreeMirror(doc, treeMirrorDelegate(this));\n                    }).bind(this));\n                }\n                this.iframePromise.then((function () {\n                    if (action === 'applyChanged') {\n                        this.incrementProperty('mutationsAfterLoaded');\n                    }\n                    this.treeMirror[action].apply(this.treeMirror, args);\n                }).bind(this));\n            }).bind(this));\n\n            ws.addCommand('cookies', function (msg) {\n                return _this.saveCookies(msg._data);\n            });\n        }).on('init'),\n\n        /**\n         * Loads and displays a url interactively\n         * Can only be called in \"browse\" mode.\n         */\n        loadUrl: function loadUrl(url, spider, baseurl) {\n            this.assertInMode('browse');\n            this.set('loading', true);\n            this.showLoading(true);\n            this.get('ws').send({\n                _meta: {\n                    spider: spider,\n                    project: this.get('slyd.project'),\n                    id: utils['default'].shortGuid(),\n                    viewport: this.iframeSize(),\n                    user_agent: navigator.userAgent,\n                    cookies: this.cookies\n                },\n                _command: 'load',\n                url: url,\n                baseurl: baseurl\n            });\n        },\n\n        _wsOpenChange: (function () {\n            this.setInteractionsBlocked(this.get('ws.closed'), 'ws');\n        }).observes('ws.closed'),\n\n        /**\n            Displays a document by setting it as the content of the iframe.\n            readyCallback will be called when the document finishes rendering.\n             Only allowed in \"select\" mode\n        */\n        displayDocument: function displayDocument(documentContents, readyCallback) {\n            var _this2 = this;\n\n            Ember['default'].run.next(function () {\n                _this2.assertInMode('select');\n                // We need to disable all interactions with the document we are loading\n                // until we trigger the callback.\n                _this2.blockInteractions('loadingDoc');\n                _this2.set('loadingDoc', true);\n                _this2.set('cssEnabled', true);\n\n                _this2.clearIframe().then(function () {\n                    var iframeDoc = _this2.getIframe()[0];\n                    iframeDoc.open('text/html', 'replace');\n                    iframeDoc.write(documentContents);\n                    iframeDoc.close();\n                    _this2._updateEventHandlers();\n                })['finally'](function () {\n                    _this2.unblockInteractions('loadingDoc');\n                    _this2.set('loadingDoc', false);\n                    if (readyCallback) {\n                        readyCallback(_this2.getIframe());\n                    }\n                });\n            });\n        },\n\n        clearIframe: function clearIframe() {\n            var defer = new Ember['default'].RSVP.defer();\n            var iframe = this.getIframeNode();\n            var id = utils['default'].shortGuid();\n            // Using a empty static page because using srcdoc or an data:uri gives\n            // permission problems and/or broken baseURI behaviour in different browsers.\n            iframe.setAttribute('src', '/static/empty-frame.html?' + id);\n            iframe.removeAttribute('srcdoc');\n            // Using a message to workaround onload bug on some browsers (cough IE cough).\n            var $win = $(window).bind('message', function onMessage(e) {\n                if (e.originalEvent.data.frameReady === id) {\n                    $win.unbind('message', onMessage);\n                    defer.resolve();\n                }\n            });\n            return defer.promise;\n        },\n\n        frameEventListeners: [],\n        addFrameEventListener: function addFrameEventListener(event, fn) {\n            var useCapture = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n            this.frameEventListeners.push([event, fn, useCapture]);\n            this.getIframe()[0].addEventListener(event, fn, useCapture);\n        },\n\n        installEventHandlersForBrowsing: function installEventHandlersForBrowsing() {\n            var _this3 = this;\n\n            this.uninstallEventHandlers();\n            var iframe = this.getIframe();\n            iframe.on('keyup.portia keydown.portia keypress.portia input.portia ' + 'mousedown.portia mouseup.portia', this.postEvent.bind(this));\n            iframe.on('click.portia', this.clickHandlerBrowse.bind(this));\n            iframe.on('scroll.portia', this.redrawNow.bind(this));\n            this.addFrameEventListener(\"scroll\", function (e) {\n                return Ember['default'].run.throttle(_this3, _this3.postEvent, e, 200);\n            }, true);\n            this.addFrameEventListener('focus', this.postEvent.bind(this), true);\n            this.addFrameEventListener('blur', this.postEvent.bind(this), true);\n            this.addFrameEventListener('change', this.postEvent.bind(this), true);\n        },\n\n        uninstallEventHandlers: function uninstallEventHandlers() {\n            var frameDoc = this.getIframe()[0];\n            this.frameEventListeners.forEach(function (_ref) {\n                var _ref2 = _slicedToArray(_ref, 3);\n\n                var event = _ref2[0];\n                var fn = _ref2[1];\n                var useCapture = _ref2[2];\n\n                frameDoc.removeEventListener(event, fn, useCapture);\n            });\n            this.frameEventListeners = [];\n            this._super();\n        },\n\n        clickHandlerBrowse: function clickHandlerBrowse(evt) {\n            if (evt.which <= 1 && !evt.ctrlKey) {\n                // Ignore right/middle click or Ctrl+click\n                if (evt.target.tagName !== 'INPUT') {\n                    evt.preventDefault();\n                }\n                this.postEvent(evt);\n            }\n        },\n\n        postEvent: function postEvent(evt) {\n            var interaction = interaction_event['default'](evt);\n            if (!interaction) {\n                return;\n            }\n            this.get('ws').send({\n                _meta: {\n                    spider: this.get('slyd.spider'),\n                    project: this.get('slyd.project')\n                },\n                _command: 'interact',\n                interaction: interaction\n            });\n            this.saveAction(interaction, evt);\n        },\n\n        saveAction: function saveAction(interactionEvent, nativeEvent) {\n            if (!this.get('recording')) {\n                return;\n            }\n            var pageActions = this.get('pageActions');\n            var type = interactionEvent.type;\n\n            var typemap = {\n                'click': 'click',\n                'input': 'set',\n                'change': 'set',\n                'scroll': 'scroll'\n            };\n\n            // Filter actions we are not interested in\n            if (!pageActions || !(type in typemap)) {\n                return null; // We don't record that kind of actions\n            }\n\n            var actionType = typemap[type];\n\n            var target = nativeEvent.target;\n            if (target.nodeType === Node.DOCUMENT_NODE) {\n                target = target.documentElement;\n            }\n            if (type === 'click' && $(target).is('option,select,input:text,body,textarea,html') || // Ignore click events in some elements\n            type === 'change' && !$(target).is('select')) {\n                // We only care about change events in select elements\n                return null;\n            }\n\n            var selector = selector_prediction.predictCss(selector_prediction.matchesExactly($(target)));\n\n            // If we are inputting more text into a field, or changing again a select make it only one interaction\n            if ((actionType === 'set' || actionType === 'scroll') && pageActions.length) {\n                var lastAction = pageActions[pageActions.length - 1];\n\n                if (lastAction.type === actionType && lastAction.selector === selector && !lastAction._edited) {\n                    if (actionType === 'set') {\n                        Ember['default'].set(lastAction, 'value', $(target).val());\n                    } else if (actionType === 'scroll') {\n                        Ember['default'].set(lastAction, 'percent', Math.max(lastAction.percent, interactionEvent.scrollTopPercent));\n                    }\n                    return;\n                }\n            }\n\n            // Record the action\n            var action = Ember['default'].Object.create({\n                type: actionType,\n                selector: selector,\n                target: target\n            });\n            if (actionType === 'set') {\n                action.value = $(target).val();\n            } else if (actionType === 'scroll') {\n                action.percent = interactionEvent.scrollTopPercent;\n            }\n            pageActions.pushObject(action);\n        },\n\n        bindResizeEvent: (function () {\n            if (!Ember['default'].testing) {\n                Ember['default'].$(window).on('resize', Ember['default'].run.bind(this, this.handleResize));\n            }\n        }).on('init'),\n\n        handleResize: function handleResize() {\n            this.get('ws').send({\n                _command: 'resize',\n                size: this.iframeSize()\n            });\n        },\n\n        saveCookies: function saveCookies(cookies) {\n            this.cookies = cookies;\n            if (window.sessionStorage) {\n                window.sessionStorage.portia_cookies = JSON.stringify(cookies);\n            }\n        },\n\n        loadCookies: (function () {\n            if (window.sessionStorage && sessionStorage.portia_cookies) {\n                this.cookies = JSON.parse(sessionStorage.portia_cookies);\n            }\n        }).on('init'),\n\n        actions: {\n            reconnectWebsocket: function reconnectWebsocket() {\n                this.get('ws').connect();\n            }\n        }\n    });\n\n});","define('portia-web/components/web-document-js/template', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\" Reconnecting... \");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          block(env, morph0, context, \"bs-message\", [], {\"background\": \"warning\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"a\");\n              dom.setAttribute(el1,\"href\",\"#\");\n              var el2 = dom.createTextNode(\"Try Again\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\".\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1]);\n              element(env, element0, context, \"action\", [\"reconnectWebsocket\"], {\"on\": \"click\"});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            Reconnecting to server in \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\" seconds.\\n\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);\n            dom.insertBoundary(fragment, null);\n            content(env, morph0, context, \"ws.secondsUntilReconnect\");\n            block(env, morph1, context, \"unless\", [get(env, context, \"ws.reconnectImminent\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"bs-message\", [], {\"background\": \"warning\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"scraped-doc\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"iframe\");\n        dom.setAttribute(el2,\"id\",\"scraped-doc-iframe\");\n        dom.setAttribute(el2,\"src\",\"/static/start.html\");\n        dom.setAttribute(el2,\"class\",\"adjust-height\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"canvas\");\n        dom.setAttribute(el2,\"id\",\"infocanvas\");\n        dom.setAttribute(el2,\"class\",\"doc-canvas adjust-height\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"id\",\"loader-container\");\n        dom.setAttribute(el2,\"class\",\"adjust-height\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"position:absolute;z-index:20;width:100%;pointer-events:none\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"id\",\"hovered-element-info\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element1,9,9);\n        var morph1 = dom.createMorphAt(element1,10,10);\n        block(env, morph0, context, \"if\", [get(env, context, \"ws.connecting\")], {}, child0, null);\n        block(env, morph1, context, \"if\", [get(env, context, \"ws.secondsUntilReconnect\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/components/web-document', ['exports', 'ember', 'portia-web/utils/canvas', 'portia-web/utils/annotation-store'], function (exports, Ember, utils__canvas, AnnotationStore) {\n\n    'use strict';\n\n    /* jshint scripturl:true */\n    var META_STYLE = '<style data-show-meta>\\n    head, title, meta, link {\\n        display: block;\\n        display: none9;\\n    }\\n    title::before {\\n        content: \\'Title: \\';\\n    }\\n    meta[name][content]::after {\\n        content: attr(name) \\': \"\\' attr(content) \\'\"\\';\\n    }\\n    meta[property][content]::after {\\n        content: attr(property) \\': \"\\' attr(content) \\'\"\\';\\n    }\\n    meta[itemprop][content]::after {\\n        content: attr(itemprop) \\': \"\\' attr(content) \\'\"\\';\\n    }\\n    link[href][rel]::after {\\n        content: \\'Link: rel: \"\\' attr(rel) \\'\" href: \"\\' attr(_portia_href) \\'\"\\';\\n    }\\n    link[href][rel][media]::after {\\n        content: \\'Link: rel: \"\\' attr(rel) \\'\" href: \"\\' attr(_portia_href) \\'\" media: \"\\' attr(media) \\'\"\\';\\n    }\\n    link[href][rel][type]::after {\\n        content: \\'Link: rel: \"\\' attr(rel) \\'\" href: \"\\' attr(_portia_href) \\'\" type: \"\\' attr(type) \\'\"\\';\\n    }\\n    link[href][rel][type][media]::after {\\n        content: \\'Link: rel: \"\\' attr(rel) \\'\" href: \"\\' attr(_portia_href) \\'\" type: \"\\' attr(type) \\'\" media: \"\\' attr(media) \\'\"\\';\\n    }\\n</style>';\n\n    exports['default'] = Ember['default'].Component.extend({\n        _register: (function () {\n            this.set('document.view', this); // documentView is a new property\n        }).on('init'),\n\n        didInsertElement: function didInsertElement() {\n            this.initCanvas();\n            var store = new AnnotationStore['default']();\n            var iframe = this.getIframe();\n            store.set('document', this.get('document'));\n            this.set('document.store', store);\n            this.set('document.iframe', iframe);\n\n            var iframeNode = this.getIframeNode();\n            iframeNode.onload = this._updateEventHandlers.bind(this);\n            iframeNode.onreadystatechange = this._updateEventHandlers.bind(this);\n        },\n\n        iframeId: 'scraped-doc-iframe',\n\n        sprites: [],\n\n        listener: null,\n\n        mode: \"uninitialized\", // How it responds to input events, modes are 'none', 'browse' and 'select'\n        useBlankPlaceholder: false,\n        recording: false, // If we are currently recording page actions\n\n        canvas: null,\n\n        ignoredElementTags: ['html', 'body'],\n\n        mouseDown: false,\n\n        loader: null,\n\n        loadingDoc: false,\n\n        cssEnabled: true, // Only in \"select\" mode\n\n        redrawSprites: (function () {\n            this.redrawNow();\n        }).observes('sprites.sprites.@each', 'sprites'),\n\n        /**\n            Attaches this documentview to a event listener\n            configuring it according to the options dictionary.\n            The options dictionary may contain:\n             listener: the event listener will be attached.\n            pageActions: Array where to save page actions performed.\n            mode: a string. Possible values are 'select', 'browse' and 'none'.\n            partialSelects: boolean. Whether to allow partial selections. It only\n                has effect for the 'select' mode.\n            blankPage: boolean (default false). Whether to show a blank page or\n                the placeholder page. Only has effect in \"none\" mode.\n        */\n        config: function config(options) {\n            this.set('listener', options.listener);\n            this.set('pageActions', options.pageActions);\n            if (options.mode && options.mode !== this.get('mode')) {\n                this.set('cssEnabled', true);\n                this.set('mode', options.mode);\n                Ember['default'].run.next(this, this.emptyIframe);\n                this.set('loading', false);\n                this.set('recording', false);\n                this.set('currentUrl', '');\n                this.set('currentFp', '');\n            }\n            if (options.mode === 'select') {\n                this.set('partialSelectionEnabled', !!options.partialSelects);\n            } else if (options.mode === 'none') {\n                this.set('useBlankPlaceholder', !!options.blankPage);\n            }\n            // Block interactions when the spider page is open\n            this.setInteractionsBlocked(this.get('mode') === 'none' && !this.get('useBlankPlaceholder'), 'spider-page');\n        },\n\n        /**\n            Detaches the datasource and event listener. Internally,\n            it also unbinds all event handlers.\n        */\n        reset: function reset() {\n            this.config({\n                mode: 'none'\n            });\n        },\n\n        /**\n            Set this property to a DOM element if you want to restrict element\n            selection to the children of the given element.\n        */\n        restrictToDescendants: null,\n\n        /**\n            Returns the document iFrame contents.\n        */\n        getIframe: function getIframe() {\n            return Ember['default'].$('#' + this.get('iframeId')).contents();\n        },\n\n        /**\n            Returns the document iFrame node.\n        */\n        getIframeNode: function getIframeNode() {\n            return Ember['default'].$('#' + this.get('iframeId'))[0];\n        },\n\n        /**\n            Redraws all datasource sprites and the hovered element (if in select\n            mode). This method can be called manually but it gets called\n            automatically:\n                 - Once 10 seconds.\n                - After a window resize or iframe scroll.\n                - The sprites exposed by the datasource change.\n        */\n        redrawNow: function redrawNow() {\n            var canvas = this.get('canvas');\n            if (!canvas || this.loadingDoc) {\n                return;\n            }\n            canvas = this.get('canvas');\n            if (this.get('sprites.sprites')) {\n                var sprites = this.get('sprites.sprites').copy();\n                if (this.get('hoveredSprite')) {\n                    sprites = sprites.concat([this.get('hoveredSprite')]);\n                }\n                canvas.draw(sprites, this.getIframe().scrollLeft(), this.getIframe().scrollTop());\n            } else {\n                canvas.clear();\n            }\n        },\n\n        clearNow: function clearNow() {\n            this.get('canvas').clear();\n        },\n\n        interactionsBlockedReasons: new Set(),\n\n        /**\n         *  Adds/lifts a reason for interactions with the document to be blocked.\n         *\n         *  Interactions are blocked for as long as there is a \"reason\" for them\n         *  to be blocked. This ensures that interactions are not unblocked by a\n         *  different module/reasons that blocked them.\n         */\n        setInteractionsBlocked: function setInteractionsBlocked(blocked) {\n            var reason = arguments.length <= 1 || arguments[1] === undefined ? \"default\" : arguments[1];\n\n            var reasons = this.get('interactionsBlockedReasons');\n            reasons[blocked ? 'add' : 'delete'](reason);\n            this.set('canvas.interactionsBlocked', reasons.size > 0);\n        },\n\n        blockInteractions: function blockInteractions(reason) {\n            return this.setInteractionsBlocked(true, reason);\n        },\n\n        unblockInteractions: function unblockInteractions(reason) {\n            return this.setInteractionsBlocked(false, reason);\n        },\n\n        /**\n            Returns the content of the document currently displayed by the\n            iframe.\n        */\n        getAnnotatedDocument: function getAnnotatedDocument() {\n            return this.getIframe().find('html').get(0).outerHTML;\n        },\n\n        /**\n            Displays a loading widget on top of the iframe. It should be removed\n            by calling hideLoading.\n        */\n        showLoading: function showLoading() {\n            this.blockInteractions('loading');\n            var loader = this.get('loader');\n            if (!loader) {\n                loader = new CanvasLoader('loader-container');\n                loader.setColor('#2398b2');\n                loader.setShape('spiral');\n                loader.setDiameter(90);\n                loader.setRange(0.9);\n                loader.setSpeed(1.0);\n                loader.setFPS(60);\n                var loaderObj = document.getElementById(\"canvasLoader\");\n                loaderObj.style.position = \"absolute\";\n                loaderObj.style[\"margin-left\"] = -loader.getDiameter() / 2 + \"px\";\n                loaderObj.style[\"margin-top\"] = '180px';\n                loaderObj.style[\"width\"] = loader.getDiameter() + \"px\";\n                loaderObj.style[\"left\"] = '50%';\n                this.set('loader', loader);\n            }\n            loader.show();\n        },\n\n        /**\n            Hides the loading widget displayed by a previous call to showLoading.\n        */\n        hideLoading: function hideLoading() {\n            if (this.get('loader')) {\n                this.get('loader').hide();\n            }\n            this.unblockInteractions('loading');\n        },\n\n        /**\n         * Only works in \"select\" mode\n         */\n        toggleCSS: function toggleCSS() {\n            this.assertInMode('select');\n            var iframe = this.getIframe();\n            if (this.get('cssEnabled')) {\n                iframe.find('link[rel=\"stylesheet\"]').each(function () {\n                    Ember['default'].$(this).renameAttr('href', '_href');\n                });\n                iframe.find('style').each(function () {\n                    var that = Ember['default'].$(this);\n                    that.renameAttr('type', '_type');\n                    that.attr('type', 'text/disabled');\n                });\n                iframe.find('[style]').each(function () {\n                    Ember['default'].$(this).renameAttr('style', '_style');\n                });\n                iframe.find('body').append($(META_STYLE));\n            } else {\n                iframe.find('[data-show-meta]').remove();\n                iframe.find('link[rel=\"stylesheet\"]').each(function () {\n                    Ember['default'].$(this).renameAttr('_href', 'href');\n                });\n                iframe.find('style').each(function () {\n                    Ember['default'].$(this).renameAttr('_type', 'type');\n                });\n                iframe.find('*[_style]').each(function () {\n                    Ember['default'].$(this).renameAttr('_style', 'style');\n                });\n            }\n            this.redrawNow();\n            this.toggleProperty('cssEnabled');\n        },\n\n        /**\n            Scrolls the iframe so the given element appears in the current\n            viewport.\n        */\n        scrollToElement: function scrollToElement(element) {\n            var rect = Ember['default'].$(element).boundingBox();\n            this.updateHoveredInfo(element);\n            this.getIframeNode().contentWindow.scrollTo(Math.max(0, parseInt(rect.left - 100)), Math.max(0, parseInt(rect.top - 100)));\n        },\n\n        _updateEventHandlers: (function () {\n            var mode = this.get('mode');\n            if (mode === 'select') {\n                this.installEventHandlersForSelecting();\n            } else if (mode === 'browse') {\n                this.installEventHandlersForBrowsing();\n            } else {\n                // none\n                this.uninstallEventHandlers();\n            }\n        }).observes('mode'),\n\n        emptyIframe: function emptyIframe() {\n            var iframe = this.getIframeNode();\n            iframe.removeAttribute('srcdoc');\n            iframe.setAttribute('src', this.get('useBlankPlaceholder') ? 'about:blank' : '/static/start.html');\n        },\n\n        assertInMode: function assertInMode(mode, msg) {\n            if (this.get('mode') !== mode) {\n                throw new Error(msg || 'documentView in incorrect mode ' + this.get('mode') + ' != ' + mode);\n            }\n        },\n\n        partialSelectionEnabled: false,\n\n        installEventHandlersForBrowsing: $.noop,\n\n        installEventHandlersForSelecting: function installEventHandlersForSelecting() {\n            this.uninstallEventHandlers();\n            var iframe = this.getIframe();\n            iframe.on('scroll.portia', this.redrawNow.bind(this));\n            iframe.on('click.portia', this.clickHandler.bind(this));\n            iframe.on('mouseover.portia', this.mouseOverHandler.bind(this));\n            iframe.on('mouseout.portia', this.mouseOutHandler.bind(this));\n            iframe.on('mousedown.portia', this.mouseDownHandler.bind(this));\n            iframe.on('mouseup.portia', this.mouseUpHandler.bind(this));\n            iframe.on('hover.portia', function (event) {\n                event.preventDefault();\n            }); // XXX: Why?\n            this.redrawNow();\n        },\n\n        uninstallEventHandlers: function uninstallEventHandlers() {\n            this.getIframe().off('.portia');\n            this.set('hoveredSprite', null);\n        },\n\n        getIframeContent: function getIframeContent() {\n            var iframe = this.getIframe().get(0);\n            return iframe.documentElement && iframe.documentElement.outerHTML;\n        },\n\n        _updateHoveredInfoVisibility: (function () {\n            var display = this.get('mode') === 'select' ? 'inline' : 'none';\n            Ember['default'].$(\"#hovered-element-info\").css('display', display);\n        }).observes('mode'),\n\n        initHoveredInfo: function initHoveredInfo() {\n            var contents = '<div class=\"path\"/><div class=\"attributes\"/>';\n            var element = Ember['default'].$('#hovered-element-info').html(contents).mouseenter(function () {\n                var floatPos = element.css('float');\n                if (floatPos === 'left') {\n                    floatPos = 'right';\n                } else {\n                    floatPos = 'left';\n                }\n                element.css('float', floatPos);\n            });\n        },\n\n        updateHoveredInfo: function updateHoveredInfo(element) {\n            var jqElem = Ember['default'].$(element),\n                path = jqElem.getPath(),\n                attributes = jqElem.getAttributeList();\n            if (jqElem.prop('class')) {\n                attributes.unshift({ name: 'class', value: jqElem.prop('class') });\n            }\n            if (jqElem.prop('id')) {\n                attributes.unshift({ name: 'id', value: jqElem.prop('id') });\n            }\n            var $attributes = $('#hovered-element-info .attributes').empty();\n            attributes.forEach(function (attribute) {\n                var value = (attribute.value + \"\").trim().substring(0, 50);\n                $attributes.append($('<div class=\"attribute\" style=\"margin:2px 0px 2px 0px\"></div>').append($('<span/>').text(attribute.name + ': ')).append($('<span style=\"color:#AAA\"></span>').text(value)));\n            });\n            $('#hovered-element-info .path').html(path);\n        },\n\n        sendElementHoveredEvent: function sendElementHoveredEvent(element, delay, mouseX, mouseY) {\n            this.sendDocumentEvent('elementHovered', element, mouseX, mouseY);\n        },\n\n        mouseOverHandler: function mouseOverHandler(event) {\n            event.preventDefault();\n            var target = event.target;\n            if (!target || target.nodeType !== Node.ELEMENT_NODE) {\n                // Ignore events on the document\n                return;\n            }\n            var tagName = target.tagName.toLowerCase();\n            if (Ember['default'].$.inArray(tagName, this.get('ignoredElementTags')) === -1 && !this.mouseDown) {\n                if (!this.get('restrictToDescendants') || Ember['default'].$(target).isDescendant(this.get('restrictToDescendants'))) {\n                    this.setElementHovered(target);\n                    this.sendElementHoveredEvent(target, event.clientX, event.clientY);\n                }\n            }\n        },\n\n        mouseOutHandler: function mouseOutHandler() {\n            this.set('hoveredSprite', null);\n            this.redrawNow();\n        },\n\n        clickHandler: function clickHandler(event) {\n            event.preventDefault();\n        },\n\n        mouseDownHandler: function mouseDownHandler(event) {\n            if (event.target.draggable) {\n                // Disable dragging of images, links, etc...\n                // This interferes with partial selection of links,\n                // but it's a lesser evil than dragging.\n                event.preventDefault();\n            }\n            this.set('hoveredSprite', null);\n            this.set('mouseDown', true);\n            this.redrawNow();\n        },\n\n        mouseUpHandler: function mouseUpHandler(event) {\n            this.set('mouseDown', false);\n            var selectedText = this.getIframeSelectedText();\n            if (selectedText) {\n                if (this.get('partialSelectionEnabled')) {\n                    if (selectedText.anchorNode === selectedText.focusNode) {\n                        this.sendDocumentEvent('partialSelection', selectedText, event.clientX, event.clientY);\n                    } else {\n                        alert('The selected text must belong to a single HTML element');\n                        selectedText.collapse(this.getIframe().find('html').get(0), 0);\n                    }\n                } else {\n                    selectedText.collapse(this.getIframe().find('html').get(0), 0);\n                }\n            } else if (event && event.target && event.target.nodeType === Node.ELEMENT_NODE) {\n                var target = event.target;\n                var tagName = target.tagName.toLowerCase();\n                if (Ember['default'].$.inArray(tagName, this.get('ignoredElementTags')) === -1) {\n                    if (!this.get('restrictToDescendants') || Ember['default'].$(target).isDescendant(this.get('restrictToDescendants'))) {\n                        this.sendDocumentEvent('elementSelected', target, event.clientX, event.clientY);\n                    }\n                }\n            }\n        },\n\n        sendDocumentEvent: function sendDocumentEvent(name) {\n            var actions = this.get('listener.documentActions');\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (actions && actions[name]) {\n                Ember['default'].run((function () {\n                    actions[name].apply(this.get('listener'), args);\n                }).bind(this));\n            }\n        },\n\n        getIframeSelectedText: function getIframeSelectedText() {\n            var range = this.getIframe().get(0).getSelection();\n            if (range && !range.isCollapsed) {\n                return range;\n            } else {\n                return null;\n            }\n        },\n\n        setElementHovered: function setElementHovered(element) {\n            this.updateHoveredInfo(element);\n            this.set('hoveredSprite', utils__canvas.ElementSprite.create({ 'element': element }));\n            this.redrawNow();\n        },\n\n        iframeSize: function iframeSize() {\n            var iframe_window = this.getIframeNode().contentWindow;\n            if (iframe_window) {\n                return iframe_window.innerWidth + 'x' + iframe_window.innerHeight;\n            }\n            return null;\n        },\n\n        initCanvas: function initCanvas() {\n            if (!this.get('canvas')) {\n                this.set('canvas', utils__canvas.Canvas.create({ canvasId: 'infocanvas' }));\n                this.initHoveredInfo();\n                if (!Ember['default'].testing) {\n                    window.resize = this.redrawNow.bind(this);\n                }\n            }\n        }\n    });\n\n});","define('portia-web/components/wizard-box', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\n        text: '',\n        defaultValue: '',\n\n        noText: (function () {\n            return this.get('text').length < 1;\n        }).property('text'),\n\n        actions: {\n            add: function add() {\n                if (!this.get('noText')) {\n                    this.sendAction('action', this.get('text'));\n                }\n            },\n\n            update: function update(text) {\n                if (text) {\n                    this.set('text', text.trim());\n                }\n            }\n        }\n    });\n\n});","define('portia-web/components/zero-clipboard', ['exports', 'ember', 'ember-cli-zero-clipboard/components/zero-clipboard'], function (exports, Ember, ZeroClipboard) {\n\n\t'use strict';\n\n\texports['default'] = ZeroClipboard['default'];\n\n});","define('portia-web/controllers/application', ['exports', 'portia-web/controllers/base-controller'], function (exports, BaseController) {\n\n\t'use strict';\n\n\texports['default'] = BaseController['default'].extend({});\n\n});","define('portia-web/controllers/base-controller', ['exports', 'ember', 'portia-web/mixins/controller-utils', 'portia-web/mixins/modal-handler', 'portia-web/mixins/notification-handler', 'portia-web/mixins/size-listener'], function (exports, Ember, ControllerUtils, ModalHandler, NotificationHandler, SizeListener) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend(SizeListener['default'], ModalHandler['default'], NotificationHandler['default'], ControllerUtils['default'], {\n        documentView: null,\n        breadCrumb: null,\n        breadCrumbs: null,\n\n        setBreadCrumbs: (function () {\n            this.set('breadCrumb', null);\n            this.set('breadCrumbs', null);\n        }).on('init'),\n\n        extractionTypes: ['text', 'number', 'image', 'price', 'raw html', 'safe html', 'geopoint', 'url', 'date'],\n\n        setDocumentView: (function () {\n            this.set('documentView', this.get('document.view'));\n        }).on('init'),\n\n        annotationsStore: Ember['default'].computed.reads('document.store'),\n\n        actions: {\n            updateField: function updateField(value, field) {\n                if (field) {\n                    this.set(field, value);\n                }\n            }\n        }\n    });\n\n});","define('portia-web/controllers/conflicts', ['exports', 'ember', 'portia-web/controllers/base-controller', 'portia-web/mixins/conflict-mixin', 'portia-web/utils/utils'], function (exports, Ember, BaseController, ConflictMixin, utils) {\n\n    'use strict';\n\n    exports['default'] = BaseController['default'].extend(ConflictMixin['default'], {\n        needs: ['application'],\n\n        currentFileName: null,\n\n        conflictedKeyPaths: {},\n\n        conflictedFileNames: (function () {\n            return Object.keys(this.get('model')).sort();\n        }).property('model'),\n\n        currentFileContents: (function () {\n            return this.get('model')[this.get('currentFileName')];\n        }).property('currentFileName'),\n\n        getConflictedKeyPaths: function getConflictedKeyPaths(content, parentPath) {\n            if (utils['default'].toType(content) === 'object') {\n                if ('__CONFLICT' in content) {\n                    return [parentPath];\n                } else {\n                    var conflicted = [];\n                    Object.keys(content).forEach((function (key) {\n                        var path = parentPath ? parentPath + '.' + key : key;\n                        conflicted = conflicted.concat(this.getConflictedKeyPaths(content[key], path));\n                    }).bind(this));\n                    return conflicted;\n                }\n            } else if (this._isArray(content)) {\n                var result = [],\n                    idx = -1;\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = content[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var v = _step.value;\n\n                        if (utils['default'].toType(v) === 'object' && '__CONFLICT' in v) {\n                            idx += 1;\n                            result.push(parentPath + '.' + idx);\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator['return']) {\n                            _iterator['return']();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                return result;\n            }\n            return [];\n        },\n\n        hasUnresolvedConflict: (function () {\n            var conflict = false;\n            if (this.get('conflictedKeyPaths')) {\n                conflict = Object.keys(this.get('conflictedKeyPaths')).any(function (key) {\n                    var conflictObj = this.get('conflictedKeyPaths.' + key);\n                    if (this._isArray(conflictObj)) {\n                        return conflictObj.any(function (key) {\n                            return !key.resolved;\n                        });\n                    }\n                    return !conflictObj.resolved;\n                }, this);\n            }\n            return conflict;\n        }).property('conflictedKeyPaths'),\n\n        saveDisabled: (function () {\n            return this.get('hasUnresolvedConflict') || !this.get('currentFileName');\n        }).property('hasUnresolvedConflict', 'currentFileName'),\n\n        resolveContent: function resolveContent(content, parentPath) {\n            if (Array.isArray(content)) {\n                if (this.get('conflictedKeyPaths')[parentPath]) {\n                    var result = [],\n                        idx = 0;\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                        for (var _iterator2 = content[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                            var item = _step2.value;\n\n                            if (this._isObject(item) && item['__CONFLICT']) {\n                                var resolved = this.resolvedValue(item, [parentPath, idx].join('.'));\n                                Array.prototype.push.apply(result, resolved);\n                                idx += 1;\n                            } else {\n                                result.push(item);\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError2 = true;\n                        _iteratorError2 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n                                _iterator2['return']();\n                            }\n                        } finally {\n                            if (_didIteratorError2) {\n                                throw _iteratorError2;\n                            }\n                        }\n                    }\n\n                    content = result;\n                }\n            } else if (utils['default'].toType(content) === 'object') {\n                if ('__CONFLICT' in content) {\n                    if (parentPath in this.get('conflictedKeyPaths')) {\n                        var option = this.get('conflictedKeyPaths.' + parentPath)['accepted'];\n                        content = content['__CONFLICT'][option.keys().next().value];\n                    }\n                } else {\n                    Object.keys(content).forEach((function (key) {\n                        var path = parentPath ? parentPath + '.' + key : key;\n                        content[key] = this.resolveContent(content[key], path);\n                    }).bind(this));\n                }\n            }\n            return content;\n        },\n\n        displayConflictedFile: function displayConflictedFile(fileName) {\n            this.set('currentFileName', fileName);\n            var conflictedPaths = this.getConflictedKeyPaths(this.get('currentFileContents'));\n            conflictedPaths.forEach(function (path) {\n                var splitPath = path.split('.');\n                if (splitPath.slice(-1)[0].match(/[0-9]+/)) {\n                    var parent = splitPath.slice(0, -1).join('.');\n                    if (!this.get('conflictedKeyPaths.' + parent)) {\n                        this.set('conflictedKeyPaths.' + parent, []);\n                    }\n                }\n                this.set('conflictedKeyPaths.' + path, Ember['default'].Object.create({\n                    'accepted': new Set(), 'rejected': new Set(), 'resolved': false }));\n            }, this);\n            this.notifyPropertyChange('conflictedKeyPaths');\n        },\n\n        actions: {\n\n            displayConflictedFile: function displayConflictedFile(fileName) {\n                this.get('documentView').setInteractionsBlocked(false);\n                this.displayConflictedFile(fileName);\n            },\n            conflictOptionUpdated: function conflictOptionUpdated(path, accepted, rejected) {\n                this._conflictOptionUpdated(path, accepted, rejected);\n                this.notifyPropertyChange('conflictedKeyPaths');\n            },\n\n            saveFile: function saveFile(fileName) {\n                this.get('slyd').saveFile(this.get('slyd.project'), fileName, this.resolveContent(this.get('model')[fileName])).then((function () {\n                    delete this.get('model')[fileName];\n                    this.notifyPropertyChange('model');\n                    this.set('conflictedKeyPaths', {});\n                    this.set('currentFileName', null);\n                    if (Ember['default'].isEmpty(this.get('conflictedFileNames'))) {\n                        this.get('slyd').publishProject(this.get('slyd.project'), true);\n                        this.showSuccessNotification(this.messages.get('conflicts_solved'));\n                        this.transitionToRoute('projects');\n                    } else {\n                        this.displayConflictedFile(this.get('conflictedFileNames')[0]);\n                    }\n                }).bind(this));\n            },\n\n            publish: function publish() {\n                this.get('slyd').publishProject(this.get('slyd.project'), true);\n            }\n        },\n\n        willEnter: function willEnter() {\n            this.set('model', this.get('model') || {});\n            this.get('document.view').config({\n                mode: 'none',\n                blankPage: true\n            });\n            if (!Ember['default'].isEmpty(this.get('conflictedFileNames'))) {\n                this.displayConflictedFile(this.get('conflictedFileNames')[0]);\n            }\n        }\n    });\n\n});","define('portia-web/controllers/conflicts/index', ['exports', 'portia-web/controllers/conflicts'], function (exports, ConflictsController) {\n\n    'use strict';\n\n    exports['default'] = ConflictsController['default'].extend({\n        breadCrumb: null\n    });\n\n});","define('portia-web/controllers/experiments', ['exports', 'portia-web/controllers/base-controller', 'portia-web/utils/experiments', 'ember', 'portia-web/utils/notification-manager'], function (exports, BaseController, expetiments, Ember, NotificationManager) {\n\n    'use strict';\n\n    exports['default'] = BaseController['default'].extend({\n        queryParams: ['updated'],\n\n        changed: (function () {\n            return this.get('model').any(function (experiment) {\n                return experiment.enabled !== experiment.newValue;\n            });\n        }).property('model.@each.newValue'),\n        notChanged: Ember['default'].computed.not('changed'),\n\n        actions: {\n            save: function save() {\n                this.get('model').forEach(function (experiment) {\n                    expetiments['default'].setEnabled(experiment.name, experiment.newValue);\n                });\n                // reload the page\n                location.href = location.href.replace(/(\\?[^?#]*)?$/, '?updated=1');\n                location.reload();\n            },\n            cancel: function cancel() {\n                this.transitionTo('projects');\n            }\n        },\n\n        willEnter: function willEnter() {\n            var _this = this;\n\n            Ember['default'].run.next(function () {\n                if (_this.get('updated')) {\n                    _this.set('updated', null);\n                    NotificationManager['default'].showSuccessNotification('Experiment preferences updated.');\n                    _this.transitionToRoute('projects');\n                }\n                _this.get('document.view').config({\n                    mode: 'none',\n                    blankPage: false\n                });\n            });\n        }\n    });\n\n});","define('portia-web/controllers/items', ['exports', 'portia-web/controllers/base-controller', 'portia-web/models/item', 'portia-web/models/item-field', 'portia-web/utils/utils'], function (exports, BaseController, Item, ItemField, utils) {\n\n    'use strict';\n\n    exports['default'] = BaseController['default'].extend({\n\n        needs: ['application', 'projects', 'project'],\n\n        documentView: null,\n\n        addItem: function addItem() {\n            var newItem = Item['default'].create({\n                name: utils['default'].shortGuid('_'),\n                display_name: 'New Item'\n            });\n            this.addField(newItem);\n            this.model.pushObject(newItem);\n        },\n\n        addField: function addField(owner, name, type) {\n            if (!owner) {\n                this.showErrorNotification('No Item selected for extraction');\n                return;\n            }\n            var newField = ItemField['default'].create({ name: name || 'new_field',\n                type: type || 'text',\n                required: false,\n                vary: false });\n            owner.set('fields', owner.fields || []);\n            owner.fields.pushObject(newField);\n        },\n\n        saveChanges: function saveChanges() {\n            var valid = true;\n            this.get('content').forEach((function (item) {\n                if (!item.isValid()) {\n                    this.showErrorNotification('The item ' + item.get('name') + ' or one of its fields has an invalid name. Only A-Z, a-z, 0-9, - and _ are allowed characters.');\n                    valid = false;\n                }\n            }).bind(this));\n            if (valid) {\n                var items = this.get('model'),\n                    slyd = this.get('slyd');\n                items = items.map(function (item) {\n                    item = item.serialize();\n                    if (item.fields) {\n                        item.fields = slyd.listToDict(item.fields);\n                    }\n                    return item;\n                });\n                items = slyd.listToDict(items);\n                this.get('ws').save('items', items).then((function (data) {\n                    items = slyd.dictToList(data.saved.items, Item['default']);\n                    items.forEach(function (item) {\n                        if (item.fields) {\n                            item.fields = slyd.dictToList(item.fields, ItemField['default']);\n                        }\n                    });\n                    this.set('project_models.items', items);\n                    this.transitionToRoute(this.getParentRoute());\n                }).bind(this));\n            }\n        },\n\n        getParentRoute: function getParentRoute() {\n            var handlerInfo = this.get('router').router.currentHandlerInfos;\n            return handlerInfo[handlerInfo.length - 2].name;\n        },\n\n        actions: {\n\n            addItem: function addItem() {\n                this.addItem();\n            },\n\n            addField: function addField(item) {\n                this.addField(item);\n            },\n\n            deleteItem: function deleteItem(item) {\n                this.model.removeObject(item);\n            },\n\n            deleteField: function deleteField(item, field) {\n                item.get('fields').removeObject(field);\n            },\n\n            saveChanges: function saveChanges() {\n                this.saveChanges();\n            },\n\n            undoChanges: function undoChanges() {\n                this.get('slyd').loadItems().then((function (items) {\n                    this.set('content', items);\n                    this.transitionToRoute(this.getParentRoute());\n                }).bind(this));\n            }\n        },\n\n        willEnter: function willEnter() {}\n    });\n\n});","define('portia-web/controllers/project', ['exports', 'ember', 'portia-web/controllers/base-controller', 'portia-web/models/spider', 'portia-web/utils/utils'], function (exports, Ember, BaseController, Spider, utils) {\n\n    'use strict';\n\n    exports['default'] = BaseController['default'].extend({\n        fixedToolbox: true,\n        breadCrumb: null,\n        _breadCrumbs: (function () {\n            this.setBreadCrumb();\n        }).observes('slyd.project'),\n\n        setBreadCrumb: function setBreadCrumb() {\n            var project_id = this.get('slyd.project');\n            this.set('breadCrumb', this._project_name(project_id));\n            this.set('breadCrumbModel', project_id);\n        },\n\n        additionalActions: (function () {\n            function makeCopyMessage(type, copied, renamed) {\n                return copied.length + \" \" + type + (copied.length > 1 ? \"s\" : \"\") + \" (\" + copied.map(function (item) {\n                    if (renamed[item]) {\n                        return item + \" as \" + renamed[item];\n                    }\n                    return item;\n                }).join(\", \") + \")\";\n            }\n\n            var copyAction = {\n                modal: 'copy-spider',\n                text: 'Copy Spider',\n                title: 'Copy Spider to project',\n                button_class: 'primary',\n                button_text: 'Copy',\n                okCallback: (function () {\n                    if (!copyAction.params.spiders.length && !copyAction.params.items.length) {\n                        return;\n                    }\n                    this.get('slyd').copySpider(this.get('slyd.project'), copyAction.params.destinationProject, copyAction.params.spiders, copyAction.params.items).then((function (response) {\n                        /*\n                            Create a notification message like:\n                                Successfully copied 2 spiders (spider1, spider2 as spider2_copy)\n                                and 1 item (default as default_copy).\n                        */\n                        var copiedSpiders = response.copied_spiders;\n                        var renamedSpiders = response.renamed_spiders;\n                        var copiedItems = response.copied_items;\n                        var renamedItems = response.renamed_items;\n                        var messageParts = [];\n                        if (copiedSpiders.length) {\n                            messageParts.push(makeCopyMessage(\"spider\", copiedSpiders, renamedSpiders));\n                        }\n                        if (copiedItems.length) {\n                            messageParts.push(makeCopyMessage(\"item\", copiedItems, renamedItems));\n                        }\n                        if (messageParts.length) {\n                            this.showSuccessNotification(\"Successfully copied \" + messageParts.join(\" and \") + \".\");\n                        }\n                    }).bind(this));\n                }).bind(this)\n            };\n\n            return [{\n                component: 'file-download'\n            }, copyAction,\n            //            {\n            //                component: 'edit-items',\n            //                controller: this\n            //            },\n            {\n                text: 'Documentation',\n                url: 'http://support.scrapinghub.com/list/24895-knowledge-base/?category=17201'\n            }];\n        }).property(),\n\n        needs: ['application', 'project'],\n\n        spiderPage: null,\n\n        _project_name: function _project_name(project_id) {\n            return this.get('project_models.projects.' + project_id) || project_id;\n        },\n\n        project_name: (function () {\n            return this._project_name(this.get('slyd.project'));\n        }).property('slyd.project'),\n\n        changedFiles: [],\n\n        isDeploying: false,\n        isPublishing: false,\n\n        filteredSpiders: (function () {\n            var a = Ember['default'].A(),\n                filterText = this.filterSpider || '',\n                re = new RegExp(filterText.replace(/[^A-Z0-9_-]*/gi, ''), 'i');\n            for (var i = 0; i < this.get('model').length; i++) {\n                var m = this.model[i];\n                if (re.test(m)) {\n                    a.push(m);\n                }\n            }\n            return a;\n        }).property('filterSpider', 'model', 'refreshSpiders'),\n\n        hasChanges: (function () {\n            return !Ember['default'].isEmpty(this.get('changedFiles'));\n        }).property('changedFiles.[]'),\n\n        noChanges: (function () {\n            return this.get('isPublishing') || this.get('isDeploying') || !this.get('hasChanges');\n        }).property('hasChanges', 'isDeploying', 'isPublishing'),\n\n        addSpider: function addSpider(siteUrl) {\n            siteUrl = utils['default'].cleanUrl(siteUrl);\n            if (!siteUrl || this.get('addingNewSpider')) {\n                return;\n            }\n            this.set('addingNewSpider', true);\n\n            var documentView = this.get('documentView');\n            documentView.showLoading();\n            this.set('slyd.spider', null);\n            this.set('ws.spider', null);\n            this.get('ws')._sendPromise({\n                _command: 'resolve',\n                _meta: { id: utils['default'].shortGuid() },\n                url: siteUrl\n            }).then((function (data) {\n                if (data.error) {\n                    documentView.hideLoading();\n                    this.showErrorNotification('Failed to create spider', data.error);\n                    return;\n                }\n                // XXX: Deal with incorrect model\n                var names = this.get('model');\n                if (!(names instanceof Array)) {\n                    names = [];\n                }\n                var baseName = URI.parse(siteUrl).hostname.replace(/^www[0-9]?\\./, '');\n                baseName = baseName.replace(/\\.com|\\.net|\\.co/, '');\n                baseName = baseName.replace(/\\.eg|\\.ae|\\.sa|\\.ke/, '');\n                baseName = baseName.replace(/^eg\\.|^sa\\.|^ae\\.|^ke\\.|^egypt\\.|^saudi\\.|^uae\\.|^en-ae\\.|^en-sa\\./, '');\n                var newSpiderName = this.getUnusedName(baseName, names);\n                var spider = Spider['default'].create({ 'name': newSpiderName,\n                    'start_urls': [siteUrl],\n                    'follow_patterns': [],\n                    'exclude_patterns': [],\n                    'js_enabled': false,\n                    'init_requests': [],\n                    'templates': [],\n                    'template_names': [],\n                    'plugins': {}\n                });\n                this.set('ws.spider', newSpiderName);\n                this.get('ws').save('spider', spider).then((function () {\n                    documentView.hideLoading();\n                    this.set('slyd.spider', newSpiderName);\n                    this.set('ws.spider', newSpiderName);\n                    this.editSpider(newSpiderName, siteUrl);\n                }).bind(this), (function (err) {\n                    documentView.hideLoading();\n                    this.set('ws.spider', this.get('slyd.spider'));\n                    throw err; // re-throw for the notification\n                }).bind(this));\n            }).bind(this), function (err) {\n                documentView.hideLoading();\n                throw err; // re-throw for the notification\n            })['finally']((function () {\n                this.set('controllers.application.siteWizard', null);\n                this.set('spiderPage', null);\n                this.set('addingNewSpider', false);\n            }).bind(this));\n        },\n\n        editSpider: function editSpider(spiderName, siteUrl) {\n            this.get('slyd').loadSpider(spiderName).then((function (spider) {\n                var query = {};\n                if (siteUrl) {\n                    query['queryParams'] = { url: siteUrl };\n                    this.transitionToRoute('spider', spider, query);\n                } else {\n                    this.transitionToRoute('spider', spider);\n                }\n            }).bind(this));\n        },\n\n        publishProject: function publishProject() {\n            return this.get('slyd').publishProject(this.get('slyd.project'));\n        },\n\n        discardChanges: function discardChanges() {\n            return this.get('slyd').discardChanges(this.get('slyd.project'));\n        },\n\n        deployProject: function deployProject() {\n            return this.get('slyd').deployProject(this.get('slyd.project'));\n        },\n\n        actions: {\n\n            editSpider: function editSpider(spiderName) {\n                this.editSpider(spiderName);\n            },\n\n            addSpider: function addSpider(siteUrl) {\n                this.addSpider(siteUrl);\n            },\n\n            deleteSpider: function deleteSpider(spider) {\n                var spiderName = spider;\n                this.showConfirm('Delete ' + spiderName, 'Are you sure you want to delete spider ' + spiderName + '?', (function () {\n                    this.set('ws.spider', spiderName);\n                    this.get('ws')['delete']('spider', spiderName).then((function () {\n                        this.set('ws.spider', null);\n                        this.get('model').removeObject(spiderName);\n                        this.set('refreshSpiders', !this.get('refreshSpiders'));\n                        this.get('changedFiles').addObject('spiders/' + spiderName + '.json');\n                    }).bind(this));\n                }).bind(this), null, 'danger', 'Yes, Delete');\n            },\n\n            rename: function rename(newName, oldName) {\n                this.get('slyd').renameProject(oldName, newName).then((function () {\n                    this.set('slyd.project', newName);\n                    this.set('ws.project', newName);\n                    this.replaceRoute('project', newName);\n                }).bind(this), (function (err) {\n                    this.set('slyd.project', oldName);\n                    this.set('ws.project', oldName);\n                    throw err;\n                }).bind(this));\n            },\n\n            publishProject: function publishProject() {\n                this.set('isPublishing', true);\n                this.publishProject().then((function (result) {\n                    this.set('isPublishing', false);\n                    if (result['status'] === 'ok') {\n                        if (!Ember['default'].isEmpty(result['schedule_url'])) {\n                            this.showConfirm('Schedule Project', this.messages.get('publish_ok_schedule'), function () {\n                                window.location = result['schedule_url'];\n                            });\n                        } else {\n                            this.showSuccessNotification(this.messages.get('publish_ok'));\n                        }\n                        this.set('changedFiles', []);\n                    } else if (result['status'] === 'conflict') {\n                        this.showWarningNotification(this.messages.get('publish_conflict'));\n                        this.transitionToRoute('conflicts');\n                    } else {\n                        this.showErrorNotification('Failed to publish project', result['message']);\n                    }\n                }).bind(this), (function (err) {\n                    this.set('isPublishing', false);\n                    throw err;\n                }).bind(this));\n            },\n\n            deployProject: function deployProject() {\n                this.set('isDeploying', true);\n                this.deployProject().then((function (result) {\n                    this.set('isDeploying', false);\n                    if (result['status'] === 'ok') {\n                        if (!Ember['default'].isEmpty(result['schedule_url'])) {\n                            this.showConfirm('Schedule Project', this.messages.get('deploy_ok_schedule'), function () {\n                                window.location = result['schedule_url'];\n                            });\n                        } else {\n                            this.showSuccessNotification(this.messages.get('deploy_ok'));\n                        }\n                    }\n                }).bind(this), (function (err) {\n                    this.set('isDeploying', false);\n                    throw err;\n                }).bind(this));\n            },\n\n            discardChanges: function discardChanges() {\n                this.set('isPublishing', true);\n                this.discardChanges().then((function () {\n                    this.set('isPublishing', false);\n                    this.transitionToRoute('projects');\n                }).bind(this), (function (err) {\n                    this.set('isPublishing', false);\n                    throw err;\n                }).bind(this));\n            },\n\n            conflictedFiles: function conflictedFiles() {\n                this.transitionToRoute('conflicts');\n            }\n        },\n\n        willEnter: function willEnter() {\n            this.setBreadCrumb();\n            this.get('documentView').reset();\n            if (this.get('controllers.application.siteWizard')) {\n                Ember['default'].run.next(this, this.addSpider, this.get('controllers.application.siteWizard'));\n            }\n        }\n    });\n\n});","define('portia-web/controllers/project/index', ['exports', 'portia-web/controllers/project'], function (exports, ProjectController) {\n\n    'use strict';\n\n    exports['default'] = ProjectController['default'].extend({\n        breadCrumb: null,\n        _breadCrumb: null,\n        setBreadCrumb: function setBreadCrumb() {}\n    });\n\n});","define('portia-web/controllers/projects', ['exports', 'ember', 'portia-web/controllers/base-controller', 'portia-web/models/item'], function (exports, Ember, BaseController, Item) {\n\n    'use strict';\n\n    exports['default'] = BaseController['default'].extend({\n        fixedToolbox: true,\n        breadCrumb: 'home',\n        needs: ['application'],\n        projectSite: null,\n\n        projectRevisions: {},\n\n        revisionsForProject: function revisionsForProject(projectName) {\n            if (projectName in this.get('projectRevisions')) {\n                return this.get('projectRevisions')[projectName];\n            } else {\n                return [];\n            }\n        },\n\n        openProject: function openProject(projectName, revision) {\n            this.get('slyd').editProject(projectName, revision).then((function () {\n                this.set('slyd.project', projectName);\n                this.set('ws.project', projectName);\n                this.transitionToRoute('project', { id: projectName });\n            }).bind(this));\n        },\n\n        displayProjects: (function () {\n            return (this.get('model') || []).map(function (p) {\n                if (p instanceof Object) {\n                    return p;\n                }\n                return { id: p, name: p };\n            });\n        }).property('model', 'model.@each'),\n\n        actions: {\n\n            openProject: function openProject(projectName) {\n                this.openProject(projectName, 'master');\n            },\n\n            openProjectRevision: function openProjectRevision(projectName, revision) {\n                this.openProject(projectName, revision);\n            },\n\n            deleteProject: function deleteProject(projectName) {\n                this.showConfirm('Delete ' + projectName, 'Are you sure you want to delete this project? This operation cannot be undone.', (function () {\n                    this.get('slyd').deleteProject(projectName).then((function () {\n                        this.set('model', this.get('model').filter(function (p) {\n                            if (p instanceof Object) {\n                                if (p.id !== projectName) {\n                                    return p;\n                                }\n                            } else {\n                                if (p !== projectName) {\n                                    return p;\n                                }\n                            }\n                        }));\n                    }).bind(this));\n                }).bind(this), function () {}, 'danger', 'Yes, Delete');\n            },\n\n            createProject: function createProject(projectSite) {\n                var newProjectName = this.getUnusedName('new_project', this.get('model'));\n                this.get('slyd').createProject(newProjectName).then((function () {\n                    this.get('slyd').editProject(newProjectName).then((function () {\n                        this.set('slyd.project', newProjectName);\n                        this.set('ws.project', newProjectName);\n                        // Initialize items spec.\n                        var itemsPromise = this.get('slyd').saveItems([Item['default'].create({ name: 'default', fields: []\n                        })]);\n                        // Initialize extractors spec.\n                        var extractorsPromise = this.get('slyd').saveExtractors([]);\n                        // Setup automatic creation of an initial spider.\n                        this.set('controllers.application.siteWizard', projectSite);\n                        Ember['default'].RSVP.all([itemsPromise, extractorsPromise]).then((function () {\n                            this.get('model').pushObject({ id: newProjectName, name: newProjectName });\n                            this.transitionToRoute('project', { id: newProjectName });\n                        }).bind(this));\n                    }).bind(this));\n                }).bind(this));\n            },\n\n            showProjectRevisions: function showProjectRevisions(projectName) {\n                this.get('slyd').projectRevisions(projectName).then((function (revisions) {\n                    this.get('projectRevisions')[projectName] = revisions['revisions'];\n                    this.notifyPropertyChange('projectRevisions');\n                }).bind(this));\n            },\n\n            hideProjectRevisions: function hideProjectRevisions(projectName) {\n                delete this.get('projectRevisions')[projectName];\n                this.notifyPropertyChange('projectRevisions');\n            }\n        },\n\n        willEnter: function willEnter() {\n            this.set('breadCrumb', 'home');\n            if (this.getWithDefault('controllers.application.currentRouteName', '').split('.')[1] === 'index') {\n                this.set('slyd.project', null);\n                this.set('ws.project', null);\n            }\n            this.get('documentView').reset();\n        }\n    });\n\n});","define('portia-web/controllers/projects/index', ['exports', 'portia-web/controllers/projects'], function (exports, ProjectsController) {\n\n    'use strict';\n\n    exports['default'] = ProjectsController['default'].extend({\n        breadCrumb: null\n    });\n\n});","define('portia-web/controllers/spider', ['exports', 'ember', 'portia-web/controllers/base-controller', 'portia-web/utils/canvas', 'portia-web/utils/sprite-store', 'portia-web/models/extracted-item', 'portia-web/models/template', 'portia-web/utils/utils'], function (exports, Ember, BaseController, canvas, SpriteStore, ExtractedItem, Template, utils) {\n\n    'use strict';\n\n    exports['default'] = BaseController['default'].extend({\n        fixedToolbox: false,\n\n        needs: ['application', 'projects', 'project', 'project/index'],\n\n        queryParams: ['url', 'baseurl'],\n        url: null,\n        baseurl: null,\n\n        saving: false,\n\n        browseHistory: [], // List of urls\n        pendingUrls: [], // List of urls we still need to fetch when testing spider\n\n        itemDefinitions: null,\n\n        extractedItems: [],\n\n        testing: false,\n\n        spriteStore: new SpriteStore['default'](),\n\n        startUrls: null,\n        startUrlsAction: 'addStartUrls',\n        editAllStartUrlsType: 'primary',\n        editAllStartUrlsAction: 'editAllStartUrls',\n        editAllStartUrlsText: 'Edit All',\n\n        countryCodes: [\"eg\", \"sa\", \"ae\", \"ke\"],\n        currencyCodes: [\"EGP\", \"AED\", \"SAR\", \"USD\", \"EUR\", \"KSh\", \"KES\"],\n\n        englishUrl: (function () {\n            return this.get('model.english_url');\n        }).property('model.english_url'),\n\n        englishUrlArgs: (function () {\n            return this.get('model.english_url_args');\n        }).property('model.english_url_args'),\n\n        arabicUrl: (function () {\n            return this.get('model.arabic_url');\n        }).property('model.arabic_url'),\n\n        arabicUrlArgs: (function () {\n            return this.get('model.arabic_url_args');\n        }).property('model.arabic_url_args'),\n\n        englishUrlAction: 'addEnglishUrl',\n        englishUrlArgsAction: 'addEnglishUrlArgs',\n        arabicUrlAction: 'addArabicUrl',\n        arabicUrlArgsAction: 'addArabicUrlArgs',\n\n        toggleCookiesAction: 'toggleCookies',\n        toggleCurrencyCookiesAction: 'toggleCurrencyCookies',\n\n        enCookieName: (function () {\n            return this.get('model.english_cookie_name');\n        }).property('model.english_cookie_name'),\n\n        enCookieValue: (function () {\n            return this.get('model.english_cookie_value');\n        }).property('model.english_cookie_value'),\n\n        arCookieName: (function () {\n            return this.get('model.arabic_cookie_name');\n        }).property('model.arabic_cookie_name'),\n\n        arCookieValue: (function () {\n            return this.get('model.arabic_cookie_value');\n        }).property('model.arabic_cookie_value'),\n\n        enCookieNameAction: 'addEnCookieName',\n        enCookieValueAction: 'addEnCookieValue',\n        arCookieNameAction: 'addArCookieName',\n        arCookieValueAction: 'addArCookieValue',\n\n        currencyCookieName: (function () {\n            return this.get('model.currency_cookie_name');\n        }).property('model.currency_cookie_name'),\n\n        currencyCookieValue: (function () {\n            return this.get('model.currency_cookie_value');\n        }).property('model.currency_cookie_value'),\n\n        currencyCookieNameAction: 'addCurrencyCookieName',\n        currencyCookieValueAction: 'addCurrencyCookieValue',\n\n        followPatternOptions: [{ value: 'all', label: 'Follow all in-domain links' }, { value: 'none', label: \"Don't follow links\" }, { value: 'patterns', label: 'Configure follow and exclude patterns' }],\n\n        hasStartUrls: (function () {\n            return this.get('startUrlCount') < 1 && this.get('editAllStartUrlsAction') === 'editAllStartUrls';\n        }).property('model.start_urls.@each'),\n\n        _breadCrumb: (function () {\n            this.set('slyd.spider', this.get('model.name'));\n            this.set('ws.spider', this.get('model.name'));\n            this.set('breadCrumb', this.get('model.name'));\n        }).observes('model.name'),\n\n        startUrlCount: (function () {\n            return this.get('model.start_urls').length;\n        }).property('model.start_urls.[]'),\n\n        displayEditPatterns: Ember['default'].computed.equal('links_to_follow', 'patterns'),\n\n        displayNofollow: (function () {\n            return this.get('links_to_follow') !== 'none';\n        }).property('links_to_follow'),\n\n        _showLinks: false,\n\n        showLinks: (function (key, show) {\n            if (arguments.length > 1) {\n                if (show) {\n                    this.set('_showLinks', true);\n                    this.set('documentView.sprites', this.get('spriteStore'));\n                } else {\n                    this.set('_showLinks', false);\n                    this.set('documentView.sprites', new SpriteStore['default']());\n                }\n            }\n            return this.get('_showLinks');\n        }).property('_showLinks'),\n\n        showItems: true,\n        isFetching: Ember['default'].computed.reads('documentView.loading'),\n        currentUrl: Ember['default'].computed.reads('documentView.currentUrl'),\n        noPageLoaded: Ember['default'].computed.not('currentUrl'),\n        addTemplateDisabled: Ember['default'].computed.or('noPageLoaded', 'ws.closed', 'isFetching', 'testing'),\n        reloadDisabled: Ember['default'].computed.or('noPageLoaded', 'ws.closed', 'isFetching'),\n        haveItems: Ember['default'].computed.notEmpty('extractedItems'),\n        pageActionsEnabled: Ember['default'].computed.reads('model.js_enabled'),\n\n        browseBackDisabled: (function () {\n            return this.get('ws.closed') || this.get('browseHistory').length <= 1;\n        }).property('browseHistory.@each', 'ws.closed'),\n\n        showNoItemsExtracted: (function () {\n            return this.get('currentUrl') && !this.get('isFetching') && !this.get('haveItems');\n        }).property('haveItems', 'isFetching'),\n\n        urlLabel: (function () {\n            return this.get('currentUrl') || 'No page loaded';\n        }).property('currentUrl', 'isFetching'),\n\n        itemsButtonLabel: (function () {\n            return this.get('showItems') ? \"Hide Items \" : \"Show Items\";\n        }).property('showItems'),\n\n        //    testButtonLabel: function() {\n        //        return this.get('testing') ? \"Stop testing\" : \"Test spider\";\n        //    }.property('testing'),\n\n        testButtonLabel: (function () {\n            return this.get('testing') ? \"Stop training\" : \"Train scrapely\";\n        }).property('testing'),\n\n        links_to_follow: (function (key, follow) {\n            // The spider spec only supports 'patterns' or 'none' for the\n            // 'links_to_follow' attribute; 'all' is only used for UI purposes.\n            var model = this.get('model');\n            var retVal = follow;\n            if (arguments.length > 1) {\n                if (follow !== 'patterns') {\n                    model.get('exclude_patterns').setObjects([]);\n                    model.get('follow_patterns').setObjects([]);\n                }\n                model.set('links_to_follow', follow === 'none' ? 'none' : 'patterns');\n            } else {\n                retVal = model.get('links_to_follow');\n                if (retVal === 'patterns' && Ember['default'].isEmpty(model.get('follow_patterns')) && Ember['default'].isEmpty(model.get('exclude_patterns'))) {\n                    retVal = 'all';\n                }\n            }\n            return retVal;\n        }).property('model.links_to_follow', 'model.follow_patterns', 'model.exclude_patterns'),\n\n        _get_init_request_property: function _get_init_request_property(prop) {\n            if (this.get('model.init_requests').length > 0) {\n                return this.get('model.init_requests')[0][prop];\n            }\n        },\n\n        loginUrl: (function () {\n            return this._get_init_request_property('loginurl');\n        }).property('model.init_requests'),\n\n        loginUser: (function () {\n            return this._get_init_request_property('username');\n        }).property('model.init_requests'),\n\n        loginPassword: (function () {\n            return this._get_init_request_property('password');\n        }).property('model.init_requests'),\n\n        getCookies: function getCookies() {\n            var _this = this;\n\n            if (this.get('model.cookies_enabled') || this.get('model.use_currency_cookies')) {\n                var currentUrl = this.get('currentUrl');\n                this.get('documentView').hideLoading();\n                this.set('testing', false);\n                this.showSuccessNotification(\"Detecting cookies started\", \"Detecting cookies process started successfully\");\n                this.get('slyd').getCookies(currentUrl).then(function (cookies) {\n                    _this.generateTable(cookies);\n                }, function () {\n                    _this.showSuccessNotification(\"Detecting cookies finished\", \"Detecting cookies process finished successfully\");\n                })['catch'](function (err) {\n                    throw err;\n                });\n            }\n        },\n\n        generateTable: function generateTable(cookies) {\n            var table = document.createElement(\"TABLE\");\n            table.border = \"1\";\n            for (var key in cookies) {\n                if (cookies.hasOwnProperty(key)) {\n                    var cookie = cookies[key];\n                    for (var prop in cookie) {\n                        if (cookie.hasOwnProperty(prop)) {\n                            var row = table.insertRow(-1);\n                            var cell1 = row.insertCell(-1);\n                            cell1.innerHTML = prop;\n                            var cell2 = row.insertCell(-1);\n                            cell2.innerHTML = cookie[prop];\n                        }\n                    }\n                }\n            }\n            var dvTables = document.getElementsByClassName(\"dvTable\");\n            var i;\n            for (i = 0; i < dvTables.length; i++) {\n                dvTables[i].innerHTML = \"\";\n                dvTables[i].appendChild(table.cloneNode(true));\n            }\n        },\n\n        spiderDomains: (function () {\n            var spiderDomains = new Set();\n            this.get('model.start_urls').forEach(function (startUrl) {\n                spiderDomains.add(URI.parse(startUrl)['hostname']);\n            });\n            return spiderDomains;\n        }).property('model.start_urls.@each'),\n\n        _updateSprites: (function () {\n            if (!this.get('currentUrl') || !this.get('showLinks')) {\n                return [];\n            }\n            var followedLinks = this.getWithDefault('followedLinks', {}),\n                allLinks = Ember['default'].$(Ember['default'].$('#scraped-doc-iframe').contents().get(0).links),\n                sprites = [],\n                colors = {\n                'raw': 'rgba(45,136,45,0.3)',\n                'js': 'rgba(34,102,102,0.3)'\n            };\n            allLinks.each((function (i, link) {\n                var uri = URI(link.href),\n                    followed = followedLinks[uri.fragment('').toString()] && this._allowedDomain(uri.hostname());\n                sprites.pushObject(canvas.ElementSprite.create({\n                    element: link,\n                    hasShadow: false,\n                    fillColor: followed ? colors[followedLinks[link.href]] : 'rgba(255,57,57,0.3)',\n                    strokeColor: 'rgba(164,164,164,0.1)' }));\n            }).bind(this));\n            this.set('spriteStore.sprites', sprites);\n        }).observes('followedLinks', 'showLinks', 'spiderDomains'),\n\n        _allowedDomain: function _allowedDomain(hostname) {\n            var split_host = hostname.split('.');\n            for (var i = 0; i < split_host.length; i++) {\n                if (this.get('spiderDomains').has(split_host.slice(-i - 2).join('.'))) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        editTemplate: function editTemplate(templateName) {\n            this.transitionToRoute('template', templateName);\n        },\n\n        viewTemplate: function viewTemplate(templateName) {\n            this.get('slyd').loadTemplate(this.get('model.name'), templateName).then((function (template) {\n                var newWindow = window.open('about:blank', '_blank', 'resizable=yes, scrollbars=yes');\n                if (newWindow) {\n                    newWindow.document.write(template.get('annotated_body'));\n                    newWindow.document.title = 'Sample ' + template.get('name');\n                } else {\n                    this.showWarningNotification('Could not open a new browser window. ' + 'Please check your browser\\'s pop-up settings.');\n                }\n            }).bind(this));\n        },\n\n        wrapItem: function wrapItem(item) {\n            var itemDefinition = (this.get('project_models.items') || this.get('itemDefinitions')).findBy('name', item['_type']);\n            return ExtractedItem['default'].create({ extracted: item,\n                definition: itemDefinition,\n                matchedTemplate: item['_template_name'] });\n        },\n\n        loadUrl: function loadUrl(url, baseUrl) {\n            this.get('documentView').loadUrl(url, this.get('model.name'), baseUrl);\n        },\n\n        addTemplate: function addTemplate() {\n            var _this2 = this;\n\n            var iframeTitle = this.get('documentView').getIframe()[0].title.trim().replace(/[^a-z\\s_-]/ig, '').replace(/\\s+/g, '_').substring(0, 48).replace(/_+$/, '') || utils['default'].shortGuid();\n\n            // Find an unique template name\n            var template_name = iframeTitle;\n            var template_num = 1;\n            while (this.get('model.template_names').contains(template_name)) {\n                template_name = iframeTitle + '_' + template_num++;\n            }\n\n            var template = Template['default'].create({\n                name: template_name,\n                extractors: {},\n                annotations: {},\n                page_id: this.get('documentView.currentFp'),\n                _new: true,\n                url: this.get('currentUrl')\n            });\n            var itemDefs = this.get('itemDefinitions');\n\n            if (!itemDefs.findBy('name', 'default') && !Ember['default'].isEmpty(itemDefs)) {\n                // The default item doesn't exist but we have at least one item def.\n                template.set('scrapes', itemDefs[0].get('name'));\n            } else {\n                template.set('scrapes', 'default');\n            }\n            this.get('model.template_names').pushObject(template_name);\n            var serialized = template.serialize();\n            serialized._new = true;\n            this.get('ws').save('template', serialized).then(function (data) {\n                var mutations = _this2.get('documentView.mutationsAfterLoaded');\n                if (!data.saved.template._uses_js && mutations > 1) {\n                    _this2.showWarningNotification('JavaScript is disabled', _this2.get('messages.template_js_disabled'));\n                }\n            }).then(function () {\n                return _this2.saveSpider(true);\n            }).then(function () {\n                _this2.editTemplate(template_name);\n            });\n        },\n\n        addStartUrls: function addStartUrls(urls) {\n            if (typeof urls === 'string') {\n                urls = urls.match(/[^\\s,]+/g);\n            }\n            var modelUrls = this.get('model.start_urls');\n            urls.forEach(function (url) {\n                url = utils['default'].cleanUrl(url);\n                if (url && Ember['default'].$.inArray(url, modelUrls) < 0) {\n                    modelUrls.pushObject(url);\n                }\n            });\n        },\n\n        addCountryCode: function addCountryCode(code) {\n            if (code) {\n                this.set('model.country_code', code);\n            }\n        },\n\n        addCurrencyCode: function addCurrencyCode(code) {\n            if (code) {\n                this.set('model.currency_code', code);\n            }\n        },\n\n        addEnglishUrl: function addEnglishUrl(url) {\n            if (url) {\n                this.set('model.english_url', url);\n            } else {\n                this.set('model.english_url', '');\n            }\n        },\n\n        addEnglishUrlArgs: function addEnglishUrlArgs(args) {\n            if (args) {\n                this.set('model.english_url_args', args);\n            } else {\n                this.set('model.english_url_args', '');\n            }\n        },\n\n        addArabicUrl: function addArabicUrl(url) {\n            if (url) {\n                this.set('model.arabic_url', url);\n            } else {\n                this.set('model.arabic_url', '');\n            }\n        },\n\n        addArabicUrlArgs: function addArabicUrlArgs(args) {\n            if (args) {\n                this.set('model.arabic_url_args', args);\n            } else {\n                this.set('model.arabic_url_args', '');\n            }\n        },\n\n        toggleCookies: function toggleCookies() {\n            if (this.get('model.cookies_enabled')) {\n                this.set('model.cookies_enabled', false);\n            } else {\n                this.set('model.cookies_enabled', true);\n            }\n        },\n\n        toggleCurrencyCookies: function toggleCurrencyCookies() {\n            if (this.get('model.use_currency_cookies')) {\n                this.set('model.use_currency_cookies', false);\n            } else {\n                this.set('model.use_currency_cookies', true);\n            }\n        },\n\n        addEnCookieName: function addEnCookieName(name) {\n            if (name) {\n                this.set('model.english_cookie_name', name);\n            } else {\n                this.set('model.english_cookie_name', '');\n            }\n        },\n\n        addEnCookieValue: function addEnCookieValue(value) {\n            if (value) {\n                this.set('model.english_cookie_value', value);\n            } else {\n                this.set('model.english_cookie_value', '');\n            }\n        },\n\n        addArCookieName: function addArCookieName(name) {\n            if (name) {\n                this.set('model.arabic_cookie_name', name);\n            } else {\n                this.set('model.arabic_cookie_name', '');\n            }\n        },\n\n        addArCookieValue: function addArCookieValue(value) {\n            if (name) {\n                this.set('model.arabic_cookie_value', value);\n            } else {\n                this.set('model.arabic_cookie_value', value);\n            }\n        },\n\n        addCurrencyCookieName: function addCurrencyCookieName(name) {\n            this.set('model.currency_cookie_name', name);\n        },\n\n        addCurrencyCookieValue: function addCurrencyCookieValue(value) {\n            this.set('model.currency_cookie_value', value);\n        },\n\n        addExcludePattern: function addExcludePattern(pattern, index) {\n            if (index !== undefined) {\n                this.get('model.exclude_patterns').insertAt(index, pattern);\n                this.notifyPropertyChange('links_to_follow');\n            } else {\n                this.get('model.exclude_patterns').pushObject(pattern);\n            }\n        },\n\n        deleteExcludePattern: function deleteExcludePattern(pattern) {\n            this.get('model.exclude_patterns').removeObject(pattern);\n        },\n\n        addFollowPattern: function addFollowPattern(pattern, index) {\n            if (index !== undefined) {\n                this.get('model.follow_patterns').insertAt(index, pattern);\n                this.notifyPropertyChange('links_to_follow');\n            } else {\n                this.get('model.follow_patterns').pushObject(pattern);\n            }\n        },\n\n        deleteFollowPattern: function deleteFollowPattern(pattern) {\n            this.get('model.follow_patterns').removeObject(pattern);\n        },\n\n        attachAutoSave: (function () {\n            this.get('model').addObserver('dirty', (function () {\n                Ember['default'].run.once(this, 'saveSpider');\n            }).bind(this));\n        }).observes('model'),\n\n        saveSpider: function saveSpider() {\n            var _this3 = this;\n\n            var force = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n            if (!force && this.get('saving')) {\n                return;\n            }\n            this.set('saving', true);\n            return this.get('ws').save('spider', this.get('model'))['finally'](function () {\n                if (!_this3.isDestroying) {\n                    _this3.set('saving', false);\n                }\n            });\n        },\n\n        testSpider: function testSpider() {\n            var _this4 = this;\n\n            var urls = this.get('pendingUrls');\n\n            var addItems = function addItems(data) {\n                var items = (data.items || []).map(_this4.wrapItem, _this4);\n                _this4.get('extractedItems').pushObjects(items);\n            };\n\n            var fetchNext = function fetchNext() {\n                if (urls.length) {\n                    return _this4.get('slyd').fetchDocument(urls.pop(), _this4.get('model.name')).then(addItems, utils['default'].showErrorNotification).then(fetchNext);\n                } else {\n                    return new Ember['default'].RSVP.Promise(function (resolve) {\n                        return resolve('done');\n                    });\n                }\n            };\n\n            fetchNext().then(function () {\n                _this4.get('documentView').hideLoading();\n                _this4.set('testing', false);\n            });\n        },\n\n        trainScrapely: function trainScrapely() {\n            var _this5 = this;\n\n            var result = null;\n\n            this.get('documentView').hideLoading();\n            this.set('testing', false);\n            this.showSuccessNotification(\"Training scrapely started\", \"The training process of scrapely is started successfully\");\n\n            result = this.get('slyd').trainScrapely(this.get('model.name')).then(function () {\n                _this5.showSuccessNotification(\"Training scrapely finished\", \"The training process of scrapely is finished successfully\");\n            })['catch'](function (err) {\n                throw err;\n            });\n            return result;\n        },\n\n        reload: function reload() {\n            // TODO: This resets the baseurl the page was loaded with (if it was set)\n            this.loadUrl(this.get('documentView.currentUrl'));\n        },\n\n        actions: {\n\n            editAllStartUrls: function editAllStartUrls() {\n                this.set('startUrlsAction', 'updateAllStartUrls');\n                this.set('startUrls', this.get('model.start_urls').join('\\n\\n'));\n                this.set('model.start_urls', []);\n                this.set('editAllStartUrlsType', 'danger');\n                this.set('editAllStartUrlsAction', 'cancelEditAllSpiders');\n                this.set('editAllStartUrlsText', 'cancel');\n            },\n\n            updateAllStartUrls: function updateAllStartUrls(urls) {\n                this.set('editAllStartUrlsType', 'primary');\n                this.set('editAllStartUrlsAction', 'editAllStartUrls');\n                this.set('editAllStartUrlsText', 'Edit All');\n                this.set('startUrlsAction', 'addStartUrls');\n                this.set('startUrls', null);\n                this.addStartUrls(urls);\n            },\n\n            cancelEditAllSpiders: function cancelEditAllSpiders() {\n                this.set('editAllStartUrlsType', 'primary');\n                this.set('editAllStartUrlsAction', 'editAllStartUrls');\n                this.set('editAllStartUrlsText', 'Edit All');\n                this.addStartUrls(this.get('startUrls'));\n                this.set('startUrls', null);\n            },\n\n            editTemplate: function editTemplate(templateName) {\n                this.editTemplate(templateName);\n            },\n\n            addTemplate: function addTemplate() {\n                this.addTemplate();\n            },\n\n            deleteTemplate: function deleteTemplate(templateName) {\n                this.get('model.template_names').removeObject(templateName);\n                this.get('ws')['delete']('template', templateName);\n            },\n\n            viewTemplate: function viewTemplate(templateName) {\n                this.viewTemplate(templateName);\n            },\n\n            loadUrl: function loadUrl(url) {\n                this.loadUrl(url);\n            },\n\n            reload: function reload() {\n                this.reload();\n            },\n\n            browseBack: function browseBack() {\n                var history = this.get('browseHistory');\n                history.popObject();\n                var lastPageUrl = history.get('lastObject');\n                // TODO: This resets the baseurl the page was loaded with (if it was set)\n                this.loadUrl(lastPageUrl);\n            },\n\n            navigate: function navigate(url) {\n                url = utils['default'].cleanUrl(url);\n                if (url) {\n                    this.loadUrl(url);\n                }\n            },\n\n            addStartUrls: function addStartUrls(urls) {\n                this.addStartUrls(urls);\n            },\n\n            addCountryCode: function addCountryCode(code) {\n                this.addCountryCode(code);\n            },\n\n            addCurrencyCode: function addCurrencyCode(code) {\n                this.addCurrencyCode(code);\n            },\n\n            addEnglishUrl: function addEnglishUrl(url) {\n                this.addEnglishUrl(url);\n            },\n\n            addEnglishUrlArgs: function addEnglishUrlArgs(args) {\n                this.addEnglishUrlArgs(args);\n            },\n\n            addArabicUrl: function addArabicUrl(url) {\n                this.addArabicUrl(url);\n            },\n\n            addArabicUrlArgs: function addArabicUrlArgs(args) {\n                this.addArabicUrlArgs(args);\n            },\n\n            toggleCookies: function toggleCookies() {\n                this.toggleCookies();\n            },\n\n            toggleCurrencyCookies: function toggleCurrencyCookies() {\n                this.toggleCurrencyCookies();\n            },\n\n            addEnCookieName: function addEnCookieName(name) {\n                this.addEnCookieName(name);\n            },\n\n            addEnCookieValue: function addEnCookieValue(value) {\n                this.addEnCookieValue(value);\n            },\n\n            addArCookieName: function addArCookieName(name) {\n                this.addArCookieName(name);\n            },\n\n            addArCookieValue: function addArCookieValue(value) {\n                this.addArCookieValue(value);\n            },\n\n            addCurrencyCookieName: function addCurrencyCookieName(name) {\n                this.addCurrencyCookieName(name);\n            },\n\n            addCurrencyCookieValue: function addCurrencyCookieValue(value) {\n                this.addCurrencyCookieValue(value);\n            },\n\n            detectCookies: function detectCookies() {\n                this.getCookies();\n            },\n\n            deleteStartUrl: function deleteStartUrl(url) {\n                this.get('model.start_urls').removeObject(url);\n            },\n\n            addExcludePattern: function addExcludePattern(text) {\n                if (text) {\n                    this.addExcludePattern(text);\n                }\n            },\n\n            deleteExcludePattern: function deleteExcludePattern(pattern) {\n                this.deleteExcludePattern(pattern);\n            },\n\n            editExcludePattern: function editExcludePattern(newVal, index) {\n                this.deleteExcludePattern(this.get('model.exclude_patterns').objectAt(index));\n                this.addExcludePattern(newVal, index);\n            },\n\n            addFollowPattern: function addFollowPattern(text) {\n                if (text) {\n                    this.addFollowPattern(text);\n                }\n            },\n\n            deleteFollowPattern: function deleteFollowPattern(pattern) {\n                this.deleteFollowPattern(pattern);\n            },\n\n            editFollowPattern: function editFollowPattern(newVal, index) {\n                this.deleteFollowPattern(this.get('model.follow_patterns').objectAt(index));\n                this.addFollowPattern(newVal, index);\n            },\n\n            addJSEnablePattern: function addJSEnablePattern(text) {\n                this.addJSPattern(text, 'enable');\n            },\n\n            editJSEnablePattern: function editJSEnablePattern(newVal, index) {\n                this.editJSPattern(newVal, index, 'enable');\n            },\n\n            deleteJSEnablePattern: function deleteJSEnablePattern(text) {\n                this.deleteJSPattern(text, 'enable');\n            },\n\n            addJSDisablePattern: function addJSDisablePattern(text) {\n                this.addJSPattern(text, 'disable');\n            },\n\n            editJSDisablePattern: function editJSDisablePattern(newVal, index) {\n                this.editJSPattern(newVal, index, 'disable');\n            },\n\n            deleteJSDisablePattern: function deleteJSDisablePattern(text) {\n                this.deleteJSPattern(text, 'disable');\n            },\n\n            toggleShowItems: function toggleShowItems() {\n                this.set('showItems', !this.get('showItems'));\n            },\n\n            rename: function rename(newName) {\n                var oldName = this.get('model.name');\n                if (newName.trim() === oldName.trim()) {\n                    return;\n                }\n                this.set('model.name', newName);\n                this.get('ws').rename('spider', oldName, newName).then((function () {\n                    this.replaceRoute('spider', newName);\n                }).bind(this), (function (err) {\n                    this.set('model.name', oldName);\n                    this.showErrorNotification(err.toString());\n                }).bind(this));\n            },\n\n            getCookies: function getCookies() {\n                if (this.get('testing')) {\n                    this.get('pendingUrls').clear();\n                } else {\n                    this.set('testing', true);\n                    this.get('documentView').showLoading();\n                    this.get('extractedItems').clear();\n                    this.set('showItems', true);\n                    this.get('pendingUrls').setObjects(this.get('model.start_urls').copy());\n                    this.getCookies();\n                }\n            },\n\n            testSpider: function testSpider() {\n                if (this.get('testing')) {\n                    this.get('pendingUrls').clear();\n                } else {\n                    this.set('testing', true);\n                    this.get('documentView').showLoading();\n                    this.get('extractedItems').clear();\n                    this.set('showItems', true);\n                    this.get('pendingUrls').setObjects(this.get('model.start_urls').copy());\n                    this.testSpider();\n                }\n            },\n\n            trainScrapely: function trainScrapely() {\n                if (this.get('testing')) {\n                    this.get('pendingUrls').clear();\n                } else {\n                    this.set('testing', true);\n                    this.get('documentView').showLoading();\n                    this.get('extractedItems').clear();\n                    this.set('showItems', true);\n                    this.get('pendingUrls').setObjects(this.get('model.start_urls').copy());\n                    this.trainScrapely();\n                }\n            },\n\n            updateLoginInfo: function updateLoginInfo() {\n                Ember['default'].run.once(this, 'saveSpider');\n            },\n\n            addInitRequest: function addInitRequest(value, field) {\n                if (field) {\n                    this.set(field, value);\n                    if (this.get('loginUrl') && this.get('loginUser') && this.get('loginPassword')) {\n                        this.set('model.init_requests', [{\n                            \"type\": \"login\",\n                            \"loginurl\": utils['default'].cleanUrl(this.get('loginUrl')),\n                            \"username\": this.get('loginUser'),\n                            \"password\": this.get('loginPassword')\n                        }]);\n                    }\n                }\n            },\n\n            toggleRecording: function toggleRecording() {\n                this.get('documentView').toggleProperty('recording');\n            }\n        },\n\n        documentActions: {\n            pageMetadata: function pageMetadata(data) {\n                if (!this.get('testing')) {\n                    this.set('extractedItems', (data.items || []).map(this.wrapItem, this));\n                }\n                this.set('followedLinks', data.links || []);\n\n                if (this.get('browseHistory.lastObject') !== data.url) {\n                    this.get('browseHistory').pushObject(data.url);\n                }\n            }\n        },\n\n        addJSPattern: function addJSPattern(text, type) {\n            if (!this.get('model.js_' + type + '_patterns')) {\n                this.set('model.js_' + type + '_patterns', [text]);\n            } else {\n                this.get('model.js_' + type + '_patterns').pushObject(text);\n            }\n            this.notifyPropertyChange('model.js_' + type + '_patterns');\n            this.notifyPropertyChange('links_to_follow');\n        },\n\n        editJSPattern: function editJSPattern(val, index, type) {\n            this.deleteJSPattern(this.get('model.js_' + type + '_patterns').objectAt(index), type);\n            this.get('model.js_' + type + '_patterns').insertAt(index, val);\n            this.notifyPropertyChange('model.js_' + type + '_patterns');\n            this.notifyPropertyChange('links_to_follow');\n        },\n\n        deleteJSPattern: function deleteJSPattern(text, type) {\n            this.get('model.js_' + type + '_patterns').removeObject(text);\n            this.notifyPropertyChange('model.js_' + type + '_patterns');\n            this.notifyPropertyChange('links_to_follow');\n        },\n\n        _willEnter: function _willEnter() {\n            var _this6 = this;\n\n            // willEnter spider.index controller\n            this.get('extractedItems').setObjects([]);\n            this.get('documentView').config({\n                mode: 'browse',\n                useBlankPlaceholder: false,\n                listener: this,\n                pageActions: this.get('model.page_actions')\n            });\n            this.get('browseHistory').clear();\n            Ember['default'].run.next(function () {\n                if (_this6.get('url')) {\n                    _this6.loadUrl(_this6.get('url'), _this6.get('baseurl'));\n                    _this6.set('url', null);\n                    _this6.set('baseurl', null);\n                }\n            });\n        },\n\n        _willLeave: function _willLeave() {\n            // willLeave spider.index controller\n            this.set('documentView.sprites', new SpriteStore['default']());\n            this.get('pendingUrls').clear();\n            this.get('documentView').hideLoading();\n            this.get('documentView.ws').send({ '_command': 'close_tab' });\n        }\n    });\n\n});","define('portia-web/controllers/spider/index', ['exports', 'portia-web/controllers/base-controller'], function (exports, BaseController) {\n\n    'use strict';\n\n    exports['default'] = BaseController['default'].extend({\n        _breadCrumb: null,\n\n        needs: ['spider'],\n\n        /**\n         * When returning from a sub-route to a parent route, the parent route's\n         * activate hook will not be called (because it was never deactivated).\n         *\n         * This is to workaround that, ideally most of the methods and state of the\n         * spider controller would be here.\n         */\n        willEnter: function willEnter() {\n            this.get('controllers.spider')._willEnter();\n        },\n        willLeave: function willLeave() {\n            this.get('controllers.spider')._willLeave();\n        }\n    });\n\n});","define('portia-web/controllers/template-items', ['exports', 'portia-web/controllers/items'], function (exports, Items) {\n\n\t'use strict';\n\n\texports['default'] = Items['default'];\n\n});","define('portia-web/controllers/template', ['exports', 'ember', 'portia-web/controllers/base-controller', 'portia-web/models/extractor', 'portia-web/models/mapped-field-data', 'portia-web/models/item', 'portia-web/models/item-field', 'portia-web/utils/sprite-store', 'portia-web/utils/utils', 'portia-web/utils/suggest-annotations'], function (exports, Ember, BaseController, Extractor, MappedFieldData, Item, ItemField, SpriteStore, utils, suggest_annotations) {\n\n    'use strict';\n\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    exports['default'] = BaseController['default'].extend({\n        model: null,\n\n        needs: ['application', 'projects', 'project', 'spider', 'spider/index'],\n\n        _breadCrumb: (function () {\n            this.set('breadCrumb', this.get('model.name'));\n        }).observes('model.name'),\n\n        annotations: [],\n\n        plugins: {},\n\n        showContinueBrowsing: true,\n\n        showDiscardButton: true,\n\n        showToggleCSS: true,\n\n        showFloatingAnnotationWidgetAt: null,\n\n        floatingAnnotation: null,\n\n        extractionTools: {},\n\n        activeExtractionTool: {\n            data: { extracts: [] },\n            pluginState: { extracted: [] },\n            sprites: new SpriteStore['default']()\n        },\n\n        enableExtractionTool: function enableExtractionTool(tool) {\n            // Convert old format to new\n            var tool_parts = tool.split('.'),\n                tool_name = tool_parts[tool_parts.length - 1];\n            if (tool_name === 'annotations-plugin' && !this.get('model.plugins.annotations-plugin')) {\n                this.set('model.plugins.annotations-plugin', {\n                    'extracts': this.get('annotationsStore').findAll()\n                });\n            } else if (!this.get('model.plugins.' + tool_name)) {\n                this.set('model.plugins.' + tool_name, {\n                    'extracts': []\n                });\n            }\n            if (!this.get('extractionTools.' + tool_name)) {\n                this.set('extractionTools.' + tool_name, Ember['default'].Object.create({\n                    data: this.get('model.plugins.' + tool_name),\n                    pluginState: {},\n                    sprites: new SpriteStore['default']({}),\n                    component: tool_name,\n                    options: this.getWithDefault('plugins.' + tool.replace(/\\./g, '_'), {})\n                }));\n            }\n\n            this.set('activeExtractionTool', this.get('extractionTools.' + tool_name));\n            this.set('documentView.sprites', this.get('activeExtractionTool.sprites'));\n        },\n\n        items: Ember['default'].computed.alias('project_models.items'),\n        extractors: Ember['default'].computed.alias('project_models.extractors'),\n\n        scrapedItem: (function () {\n            if (!Ember['default'].isEmpty(this.get('items'))) {\n                var item = this.get('items').findBy('name', this.get('model.scrapes'));\n                if (item) {\n                    if (!item.fields) {\n                        item.fields = [];\n                    }\n                    return item;\n                }\n            }\n            return null;\n        }).property('model.scrapes', 'items.@each'),\n\n        displayExtractors: (function () {\n            return this.get('extractors').map(function (ext) {\n                return {\n                    type: ext.get('regular_expression') ? '<RegEx>' : '<Type>',\n                    label: ext.get('regular_expression') || ext.get('type_extractor'),\n                    extractor: ext\n                };\n            });\n        }).property('extractors.@each', 'model.extractors.@each'),\n\n        currentlySelectedElement: null,\n\n        sprites: (function () {\n            return this.get('activeExtractionTool.sprites');\n        }).property('activeExtractionTool', 'activeExtractionTool.sprites'),\n\n        saveTemplate: function saveTemplate() {\n            this.dissmissAllSuggestions();\n            if (this.get('model')) {\n                this.set('model.extractors', this.validateExtractors());\n                this.set('model.plugins', this.getWithDefault('model.plugins', {}));\n                for (var key in this.get('extractionTools')) {\n                    this.set('model.plugins.' + key, this.getWithDefault('extractionTools.' + key + '.data', { extracts: [] }));\n                }\n            }\n            var mappedSprites = this.get('sprites._sprites');\n            var scrapelyData = {};\n            scrapelyData['url'] = this.get('model.url');\n            scrapelyData['flag'] = false;\n            scrapelyData['data'] = {};\n            for (var i = 0; i < mappedSprites.length; i++) {\n                var field = mappedSprites[i].scrapelyData.field;\n                var content = mappedSprites[i].scrapelyData.content;\n                scrapelyData['data'][field] = content;\n            }\n            this.set('model.scrapely_data', scrapelyData);\n            var missingFields = this.getMissingFields();\n            if (missingFields.length > 0) {\n                this.showWarningNotification('Required Fields Missing', 'You are unable to save this template as the following required fields are missing: \"' + missingFields.join('\", \"') + '\".');\n            } else {\n                return this.get('ws').save('template', this.get('model'));\n            }\n        },\n\n        getMissingFields: function getMissingFields() {\n            var itemRequiredFields = [],\n                scrapedFields = new Set(),\n                scraped_item = this.get('scrapedItem');\n            if (scraped_item) {\n                scraped_item.fields.forEach(function (field) {\n                    if (field.required) {\n                        itemRequiredFields.push(field.name);\n                    }\n                });\n            }\n            for (var plugin in this.get('extractionTools')) {\n                var extracted = this.getWithDefault('extractionTools.' + plugin + '.pluginState.extracted', []);\n                for (var i = 0; i < extracted.length; i++) {\n                    scrapedFields.add(extracted[i].name);\n                }\n            }\n            return itemRequiredFields.filter(function (field) {\n                if (!scrapedFields.has(field)) {\n                    return true;\n                }\n            });\n        },\n\n        saveExtractors: function saveExtractors() {\n            var serializedExtractors = {},\n                extractors = this.get('extractors');\n            // Cleanup extractor objects.\n            extractors.forEach(function (extractor) {\n                delete extractor['dragging'];\n            });\n            for (var i = 0; i < extractors.length; i++) {\n                var extractor = extractors[i].serialize(),\n                    _name = extractor.name;\n                delete extractor['name'];\n                serializedExtractors[_name] = extractor;\n            }\n            this.get('ws').save('extractors', serializedExtractors);\n        },\n\n        validateExtractors: function validateExtractors() {\n            var extractors = this.get('extractors'),\n                template_ext = this.get('model.extractors'),\n                new_extractors = {},\n                validated_extractors = {},\n                extractor_ids = new Set(),\n                addExtractorToSet = function addExtractorToSet(extractor_id) {\n                if (extractor_ids.has(extractor_id)) {\n                    new_extractors[field] = new_extractors[field] || new Set();\n                    new_extractors[field].add(extractor_id);\n                }\n            },\n                addExtractorToArray = function addExtractorToArray(extractor) {\n                arr.push(extractor);\n            };\n            extractors.forEach(function (extractor) {\n                extractor_ids.add(extractor.id);\n            });\n\n            for (var plugin in this.get('extractionTools')) {\n                var extracted = this.getWithDefault('extractionTools.' + plugin + '.pluginState.extracted', []);\n                for (var i = 0; i < extracted.length; i++) {\n                    var field = extracted[i].name,\n                        item_extractors = template_ext[field];\n                    if (item_extractors instanceof Array) {\n                        item_extractors.forEach(addExtractorToSet);\n                    }\n                }\n            }\n\n            for (var key in new_extractors) {\n                var arr = [];\n                new_extractors[key].forEach(addExtractorToArray);\n                validated_extractors[key] = arr;\n            }\n            return validated_extractors;\n        },\n\n        getAppliedExtractors: function getAppliedExtractors(fieldName) {\n            var extractorIds = this.get('model.extractors.' + fieldName) || [],\n                extractors = [],\n                seen = new Set();\n            for (var i = 0; i < extractorIds.length; i++) {\n                var extractor = this.get('extractors').filterBy('name', extractorIds[i])[0];\n                if (extractor) {\n                    extractor = extractor.copy();\n                    extractor['fieldName'] = fieldName;\n                    extractor['type'] = extractor.get('regular_expression') ? '<RegEx>' : '<Type>';\n                    extractor['label'] = extractor.get('regular_expression') || extractor.get('type_extractor');\n                    if (!seen.has(extractor['type'] + extractor['label'])) {\n                        extractors.push(extractor);\n                        seen.add(extractor['type'] + extractor['label']);\n                    }\n                }\n            }\n            return extractors;\n        },\n\n        mappedFieldsData: (function () {\n            var mappedFieldsData = [],\n                seenFields = new Set(),\n                scrapedItemFields = new Set(),\n                item_required_fields = new Set(),\n                extractedFields = this.get('activeExtractionTool.pluginState.extracted'),\n                scraped_item = this.get('scrapedItem');\n            if (scraped_item) {\n                scraped_item.fields.forEach(function (field) {\n                    if (field.required) {\n                        item_required_fields.add(field.name);\n                    }\n                    scrapedItemFields.add(field.name);\n                });\n            }\n            if (extractedFields) {\n                var mappedFields = {};\n                for (var i = 0; i < extractedFields.length; i++) {\n                    var field = extractedFields[i];\n                    if (scrapedItemFields.has(field.name)) {\n                        var mappedFieldData = mappedFields[field.name] || MappedFieldData['default'].create(),\n                            required = mappedFieldData.required ? true : field.required || item_required_fields.has(field.name);\n                        mappedFieldData.set('fieldName', field.name);\n                        mappedFieldData.set('required', required);\n                        mappedFieldData.set('disabled', true);\n                        mappedFieldData.set('extracted', true);\n                        mappedFieldData.set('extractors', this.getAppliedExtractors(field.name));\n                        mappedFields[field.name] = mappedFieldData;\n                    }\n                }\n                for (var key in mappedFields) {\n                    mappedFieldsData.pushObject(mappedFields[key]);\n                    seenFields.add(key);\n                }\n            }\n            if (scraped_item) {\n                this.get('scrapedItem').fields.forEach((function (field) {\n                    if (!seenFields.has(field.name)) {\n                        var mappedFieldData = MappedFieldData['default'].create();\n                        mappedFieldData.set('fieldName', field.name);\n                        mappedFieldData.set('required', field.required);\n                        mappedFieldData.set('disabled', true);\n                        mappedFieldData.set('extractors', this.getAppliedExtractors(field.name));\n                        mappedFieldsData.pushObject(mappedFieldData);\n                    }\n                }).bind(this));\n            }\n            return mappedFieldsData;\n        }).property('model.extractors.@each', 'extractors.@each', 'activeExtractionTool.pluginState.extracted', 'scrapedItem.fields.@each'),\n\n        createExtractor: function createExtractor(extractorType, extractorDefinition) {\n            var extractor = Extractor['default'].create({\n                name: utils['default'].shortGuid()\n            });\n            if (extractorType === 'regular_expression') {\n                try {\n                    new RegExp(extractorDefinition);\n                } catch (e) {\n                    if (e instanceof SyntaxError) {\n                        this.showErrorNotification('The text, \"' + extractorDefinition + '\", you provided is not a valid regex.');\n                    }\n                    return;\n                }\n            }\n            extractor.set(extractorType, extractorDefinition);\n            this.get('extractors').pushObject(extractor);\n        },\n\n        showFloatingAnnotationWidget: function showFloatingAnnotationWidget(element, x, y) {\n            this.set('showFloatingAnnotationWidgetAt', { x: x, y: y });\n            this.set('floatingElement', Ember['default'].$(element));\n        },\n\n        hideFloatingAnnotationWidget: function hideFloatingAnnotationWidget() {\n            this.set('showFloatingAnnotationWidgetAt', null);\n        },\n\n        /**\n         * @returns bool indicating if the user has created any annotation.\n         */\n        hasAnnotations: function hasAnnotations() {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = Object.values(this.get('extractionTools'))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var tool = _step.value;\n\n                    var annotations = (tool.pluginState || {}).extracted || [];\n                    if (annotations.length) {\n                        return true;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator['return']) {\n                        _iterator['return']();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return false;\n        },\n\n        actions: {\n\n            createField: function createField(item, fieldName, fieldType) {\n                item.addField(fieldName, fieldType);\n                var items = this.get('items').toArray(),\n                    slyd = this.get('slyd');\n                items = items.map(function (item) {\n                    item = item.serialize();\n                    if (item.fields) {\n                        item.fields = slyd.listToDict(item.fields);\n                    }\n                    return item;\n                });\n                items = slyd.listToDict(items);\n                this.get('ws').save('items', items).then((function (data) {\n\n                    items = slyd.dictToList(data.saved.items, Item['default']);\n                    items.forEach(function (item) {\n                        if (item.fields) {\n                            item.fields = slyd.dictToList(item.fields, ItemField['default']);\n                        }\n                    });\n                    this.set('project_models.items', items);\n                }).bind(this));\n            },\n\n            rename: function rename(newName) {\n                var oldName = this.get('model.name');\n                var saveFuture = this.saveTemplate();\n                if (!saveFuture) {\n                    Ember['default'].run.next(this, function () {\n                        this.set('model.name', oldName);\n                    });\n                    return;\n                }\n                this.set('templateName', oldName);\n                this.set('model.name', newName);\n                saveFuture.then((function () {\n                    var templateNames = this.get('controllers.spider.model.template_names');\n                    newName = this.getUnusedName(newName, templateNames);\n                    this.get('ws').rename('template', oldName, newName).then((function () {\n                        templateNames.removeObject(oldName);\n                        templateNames.addObject(newName);\n                        this.replaceRoute('template', newName);\n                    }).bind(this), (function (err) {\n                        this.set('model.name', this.get('templateName'));\n                        throw err;\n                    }).bind(this));\n                }).bind(this));\n            },\n\n            createExtractor: function createExtractor(text, option) {\n                if (text && text.length > 0) {\n                    this.createExtractor('regular_expression', text);\n                    this.saveExtractors();\n                } else if (option && option.length > 0) {\n                    this.createExtractor('type_extractor', option);\n                    this.saveExtractors();\n                }\n            },\n\n            deleteExtractor: function deleteExtractor(extractor) {\n                // Remove all references to this extractor.\n                var extractors = this.get('model.extractors');\n                Object.keys(extractors).forEach((function (fieldName) {\n                    extractors[fieldName].removeObject(extractor.extractor.id);\n                }).bind(this));\n                this.get('extractors').removeObject(extractor.extractor);\n                this.saveExtractors();\n            },\n\n            applyExtractor: function applyExtractor(fieldName, extractorId) {\n                var currentExtractors = this.get('model.extractors')[fieldName];\n                if (!currentExtractors) {\n                    currentExtractors = [];\n                    this.set('model.extractors.' + fieldName, currentExtractors);\n                }\n                if (currentExtractors.indexOf(extractorId) === -1) {\n                    currentExtractors.pushObject(extractorId);\n                    this.notifyPropertyChange('model.extractors');\n                }\n                this.notifyPropertyChange('mappedFieldsData');\n            },\n\n            removeAppliedExtractor: function removeAppliedExtractor(appliedExtractor) {\n                // TODO: we need to automatically remove extractors when the field they\n                // extract is no longer mapped from any annotation.\n                var fieldName = appliedExtractor['fieldName'];\n                this.get('model.extractors')[fieldName].removeObject(appliedExtractor['name']);\n                this.notifyPropertyChange('model.extractors');\n                this.notifyPropertyChange('mappedFieldsData');\n            },\n\n            editItems: function editItems() {\n                this.transitionToRoute('template-items');\n            },\n\n            continueBrowsing: function continueBrowsing() {\n                var saveFuture = this.saveTemplate();\n                if (!saveFuture) {\n                    return;\n                }\n                var sprites = this.get('documentView.sprites');\n                this.set('documentView.sprites', new SpriteStore['default']());\n                saveFuture.then((function () {\n                    this.transitionToRoute('spider', {\n                        queryParams: {\n                            url: this.get('model.url')\n                        }\n                    });\n                }).bind(this), (function (err) {\n                    this.set('documentView.sprites', sprites);\n                    throw err;\n                }).bind(this));\n            },\n\n            discardChanges: function discardChanges() {\n                var _this = this;\n\n                var finishDiscard = function finishDiscard() {\n                    _this.transitionToRoute('spider', {\n                        queryParams: {\n                            url: _this.get('model.url')\n                        }\n                    });\n                };\n                this.set('documentView.sprites', new SpriteStore['default']());\n\n                if (this.hasAnnotations()) {\n                    finishDiscard();\n                } else {\n                    this.get('slyd').deleteTemplate(this.get('slyd.spider'), this.get('model.name')).then(function () {\n                        _this.get('controllers.spider.model.template_names').removeObject(_this.get('model.name'));\n                    }).then(finishDiscard);\n                }\n            },\n\n            hideFloatingAnnotationWidget: function hideFloatingAnnotationWidget() {\n                this.hideFloatingAnnotationWidget();\n            },\n\n            toggleCSS: function toggleCSS() {\n                this.documentView.toggleCSS();\n            },\n\n            updatePluginField: function updatePluginField(field, value) {\n                this.set(['extractionTools', this.get('activeExtractionTool.component'), field].join('.'), value);\n                this.notifyPropertyChange(['activeExtractionTool', field].join('.'));\n            },\n\n            updateScraped: function updateScraped(name) {\n                this.set('model.scrapes', name);\n            },\n\n            dissmissAllSuggestions: function dissmissAllSuggestions() {\n                this.dissmissAllSuggestions(true);\n            },\n\n            acceptAllSuggestions: function acceptAllSuggestions() {\n                this.acceptAllSuggestions();\n            }\n        },\n\n        documentActions: {\n\n            elementSelected: function elementSelected(element, mouseX, mouseY) {\n                this.showFloatingAnnotationWidget(element, mouseX, mouseY);\n            },\n\n            partialSelection: function partialSelection(selection, mouseX, mouseY) {\n                var element = Ember['default'].$('<ins/>').get(0);\n                selection.getRangeAt(0).surroundContents(element);\n                this.showFloatingAnnotationWidget(element, mouseX, mouseY);\n            },\n\n            elementHovered: function elementHovered() {\n                this.get('documentView').redrawNow();\n            }\n        },\n\n        setDocument: function setDocument() {\n            if (!this.get('model') || !this.get('model.annotated_body')) {\n                return;\n            }\n            this.get('documentView').displayDocument(this.get('model.annotated_body'), (function () {\n                if (!this.get('model.plugins')) {\n                    this.set('model.plugins', Ember['default'].Object.create({}));\n                }\n                this.set('activeExtractionTool', {\n                    data: { extracts: [] },\n                    pluginState: {},\n                    sprites: new SpriteStore['default'](),\n                    component: 'dummy-component'\n                });\n                this.set('extractionTools', {});\n                this.enableExtractionTool(this.get('capabilities.plugins').get(0)['component'] || 'annotations-plugin');\n                this.suggestAnnotations();\n            }).bind(this));\n        },\n\n        suggestAnnotations: function suggestAnnotations() {\n            var _this2 = this;\n\n            if (this.hasAnnotations()) {\n                return;\n            }\n            var docView = this.get('documentView');\n\n            var item = this.get('scrapedItem');\n            var fields = new Set(item.get('fields').map(function (field) {\n                return field.name;\n            }));\n\n            var doc = docView.getIframeNode().contentDocument;\n            suggest_annotations.suggestAnnotations(doc, fields, function (suggestions) {\n                if (_this2.hasAnnotations()) {\n                    return;\n                }\n                _this2.dissmissAllSuggestions();\n                var annotations = _this2.get('activeExtractionTool.data.extracts');\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = suggestions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var _step2$value = _slicedToArray(_step2.value, 4);\n\n                        var field = _step2$value[0];\n                        var node = _step2$value[1];\n                        var attr = _step2$value[2];\n                        var suggestor = _step2$value[3];\n\n                        var mapping = {};\n                        mapping[attr] = field;\n                        annotations.pushObject(Ember['default'].Object.create({\n                            annotations: mapping,\n                            id: utils['default'].shortGuid(),\n                            tagid: $(node).data('tagid'),\n                            suggested: true,\n                            suggestor: suggestor,\n                            required: []\n                        }));\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n                            _iterator2['return']();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n            });\n        },\n\n        suggestionCount: (function () {\n            var annotations = this.getWithDefault('activeExtractionTool.data.extracts', []);\n            var count = 0;\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = annotations[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var annotation = _step3.value;\n\n                    if (annotation.suggested) {\n                        count++;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {\n                        _iterator3['return']();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            return count;\n        }).property('activeExtractionTool.data.extracts.@each.suggested'),\n\n        severalSuggestions: Ember['default'].computed.gte('suggestionCount', 2),\n\n        dissmissAllSuggestions: function dissmissAllSuggestions() {\n            var _this3 = this;\n\n            var userInitiated = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n            var annotations = this.getWithDefault('activeExtractionTool.data.extracts', []);\n            annotations.removeObjects(annotations.filter(function (annotation) {\n                if (userInitiated) {\n                    _this3.get('ws').logEvent('suggestions', annotation.suggestor, 'rejected_all');\n                }\n                return annotation.suggested;\n            }));\n            if (userInitiated) {\n                this.get('ws').logEvent('suggestions.all', 'rejected');\n            }\n        },\n\n        acceptAllSuggestions: function acceptAllSuggestions() {\n            this.get('ws').logEvent('suggestions.all', 'accepted');\n            var annotations = this.getWithDefault('activeExtractionTool.data.extracts', []);\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = annotations[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var annotation = _step4.value;\n\n                    if (annotation.suggested) {\n                        this.get('ws').logEvent('suggestions', annotation.suggestor, 'accepted_all');\n                        annotation.set('suggested', false);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4['return']) {\n                        _iterator4['return']();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n        },\n\n        /**\n         * This will make sure the template scrapes a valid item and if not it will create one.\n         */\n        ensureItem: (function () {\n            if (this.get('model') && !this.get('items').findBy('name', this.get('model.scrapes'))) {\n                // Template has an item that doesn't exist, create a new one\n                var fields = new Set();\n                Object.values(this.get('model.plugins')).forEach(function (plugin) {\n                    plugin.extracts.forEach(function (extract) {\n                        Object.values(extract.annotations).forEach(function (fieldName) {\n                            fields.add(fieldName);\n                        });\n                    });\n                });\n                var item = Item['default'].create({\n                    name: this.get('model.scrapes'),\n                    display_name: this.get('model.name'),\n                    fields: []\n                });\n                fields.forEach(function (fieldName) {\n                    return item.addField(fieldName);\n                });\n                this.get('items').pushObject(item);\n                this.showWarningNotification('Missing item', \"This template didn't have a valid item assigned so a new one was created.\");\n                this.get('slyd').saveItems(this.get('items').toArray());\n            }\n        }).observes('model.scrapes', 'items.@each'),\n\n        _willEnter: function _willEnter() {\n            // willEnter template.index controller\n            var plugins = {};\n            this.get('documentView').config({\n                mode: 'select',\n                listener: this,\n                partialSelects: true\n            });\n            this.get('capabilities.plugins').forEach(function (plugin) {\n                plugins[plugin['component'].replace(/\\./g, '_')] = plugin['options'];\n            });\n            this.set('extractedFields', []);\n            this.set('plugins', plugins);\n            this.setDocument();\n        },\n\n        _willLeave: function _willLeave() {\n            // willLeave template.index controller\n            this.hideFloatingAnnotationWidget();\n            this.get('documentView').reset();\n            this.set('activeExtractionTool', { extracts: [],\n                component: 'dummy-component',\n                pluginState: {} });\n        }\n    });\n\n});","define('portia-web/controllers/template/index', ['exports', 'portia-web/controllers/base-controller'], function (exports, BaseController) {\n\n    'use strict';\n\n    exports['default'] = BaseController['default'].extend({\n        breadCrumb: null,\n        _breadCrumb: null,\n\n        needs: ['template'],\n\n        /**\n         * When returning from a sub-route to a parent route, the parent route's\n         * activate hook will not be called (because it was never deactivated).\n         *\n         * This is to workaround that, ideally most of the methods and state of the\n         * template controller would be here.\n         */\n        willEnter: function willEnter() {\n            this.get('controllers.template')._willEnter();\n        },\n        willLeave: function willLeave() {\n            this.get('controllers.template')._willLeave();\n        }\n    });\n\n});","define('portia-web/helpers/trim', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.trim = trim;\n\n  function trim(input, length) {\n    if (!input) {\n      return '';\n    }\n    return input.substring(0, length || 45);\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(trim);\n\n});","define('portia-web/initialize', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, Em, IdxConfig) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: 'ember-idx-utils',\n    initialize: function initialize() {\n      if (!Em['default'].IdxConfig) {\n        Em['default'].IdxConfig = IdxConfig['default'].create();\n      }\n    }\n  };\n\n});","define('portia-web/initializers/add-prototypes', ['exports', 'ember', 'portia-web/models/attribute'], function (exports, Ember, Attribute) {\n\n    'use strict';\n\n    exports.initialize = initialize;\n\n    function initialize() {\n        Ember['default'].$.fn.getUniquePath = function () {\n            if (this.length !== 1) {\n                throw 'Requires one element.';\n            }\n            var path,\n                node = this;\n            while (node.length) {\n                var realNode = node[0],\n                    name = realNode.localName;\n                if (!name) {\n                    break;\n                }\n                name = name.toLowerCase();\n                var parent = node.parent();\n                var siblings = parent.children(name);\n                if (siblings.length > 1) {\n                    name += ':eq(' + siblings.index(realNode) + ')';\n                }\n                path = name + (path ? '>' + path : '');\n                node = parent;\n            }\n            return path;\n        };\n\n        Ember['default'].$.fn.getPath = function () {\n            if (!this.prop('tagName')) {\n                return;\n            }\n            var path = [this.prop('tagName').toLowerCase()];\n            this.parents().not('html').each(function () {\n                var entry = this.tagName.toLowerCase();\n                path.push(entry);\n            });\n            return path.reverse().join(' > ');\n        };\n\n        Ember['default'].$.fn.getAttributeList = function () {\n            var attributeList = [],\n                text_content_key = 'content';\n            if (this.attr('content')) {\n                text_content_key = 'text content';\n            }\n            if (this.text()) {\n                attributeList.push(Attribute['default'].create({\n                    name: text_content_key,\n                    value: this.text() }));\n            }\n            var element = this.get(0);\n            if (!element) {\n                return [];\n            }\n            var mappedAttributes = {};\n            for (var i = 0; i < element.attributes.length; i++) {\n                var attrib = element.attributes[i];\n                if (attrib.name.startsWith('_portia_')) {\n                    var originalName = attrib.name.slice(8);\n                    if (!mappedAttributes[originalName]) {\n                        mappedAttributes[originalName] = attrib.value;\n                    }\n                }\n            }\n            Ember['default'].$(element.attributes).each(function () {\n                if (!this.nodeName.startsWith('_portia_') && Ember['default'].$.inArray(this.nodeName, Ember['default'].$.fn.getAttributeList.ignoredAttributes) === -1 && this.value) {\n                    attributeList.push(Attribute['default'].create({\n                        name: this.nodeName,\n                        value: mappedAttributes[this.nodeName] || this.value }));\n                }\n            });\n            return attributeList;\n        };\n\n        Ember['default'].$.fn.getAttributeList.ignoredAttributes = ['id', 'class', 'width', 'style', 'height', 'cellpadding', 'cellspacing', 'border', 'bgcolor', 'color', 'colspan', 'data-scrapy-annotate', 'data-tagid', 'data-genid', 'data-parentid'];\n\n        Ember['default'].$.fn.boundingBox = function () {\n            if (!this || !this.offset()) {\n                return { top: 0, left: 0, width: 0, height: 0 };\n            }\n            var rect = {};\n            rect.left = this.offset().left;\n            rect.top = this.offset().top;\n            rect.width = this.outerWidth();\n            rect.height = this.outerHeight();\n            return rect;\n        };\n\n        Ember['default'].$.fn.isDescendant = function (parent) {\n            return Ember['default'].$(parent).find(this).length > 0;\n        };\n\n        Ember['default'].$.fn.findAnnotatedElements = function () {\n            return this.find('[data-scrapy-annotate]');\n        };\n\n        Ember['default'].$.fn.findAnnotatedElement = function (annotationId) {\n            var selector = '[data-scrapy-annotate*=\"' + annotationId + '\"]';\n            return this.find(selector);\n        };\n\n        Ember['default'].$.fn.findIgnoredElements = function (annotationId) {\n            var selector;\n            if (annotationId) {\n                selector = '[data-scrapy-ignore*=\"' + annotationId + '\"], [data-scrapy-ignore-beneath*=\"' + annotationId + '\"]';\n            } else {\n                selector = '[data-scrapy-ignore], [data-scrapy-ignore-beneath]';\n            }\n            return this.find(selector);\n        };\n\n        Ember['default'].$.fn.removePartialAnnotation = function () {\n            // FIXME: this may leave empty text node children.\n            var element = this.get(0);\n            var textNode = element.childNodes[0];\n            var parentNode = element.parentNode;\n            Ember['default'].$(textNode).unwrap();\n            parentNode.normalize();\n        };\n\n        Ember['default'].$.fn.renameAttr = function (from, to) {\n            return this.each(function () {\n                var $this = Ember['default'].$(this);\n                $this.attr(to, $this.attr(from));\n                $this.removeAttr(from);\n            });\n        };\n\n        Ember['default'].$.expr[':'].hasAttrWithPrefix = Ember['default'].$.expr.createPseudo(function (prefix) {\n            return function (obj) {\n                for (var i = 0; i < obj.attributes.length; i++) {\n                    if (obj.attributes[i].nodeName.indexOf(prefix) === 0) {\n                        return true;\n                    }\n                }\n                return false;\n            };\n        });\n\n        String.prototype.lstrip = function () {\n            return this.replace(/^[\\s\\r\\n]*/g, \"\");\n        };\n\n        if (!String.prototype.trim) {\n            (function () {\n                // Make sure we trim BOM and NBSP\n                var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n                String.prototype.trim = function () {\n                    return this.replace(rtrim, '');\n                };\n            })();\n        }\n    }\n\n    exports['default'] = {\n        name: 'add-prototypes',\n        initialize: initialize\n    };\n\n});","define('portia-web/initializers/bread-crumbs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: \"ember-breadcrumbs\",\n    initialize: function initialize() {\n      var application = arguments[1] || arguments[0];\n      application.inject(\"component:bread-crumbs\", \"router\", \"router:main\");\n      application.inject(\"component:bread-crumbs\", \"applicationController\", \"controller:application\");\n    }\n  };\n\n});","define('portia-web/initializers/controller-helper', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(_, app) {\n    app.inject('controller', 'router', 'router:main');\n  }\n\n  exports['default'] = {\n    name: 'controller-helper',\n    initialize: initialize\n  };\n\n});","define('portia-web/initializers/ember-cli-auto-register-helpers', ['exports', 'ember', 'portia-web/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    var matcher = new RegExp(config['default'].modulePrefix + '/helpers/.*');\n\n    Ember['default'].A(Ember['default'].keys(window.require.entries)).filter(function (path) {\n      return matcher.test(path);\n    }).forEach(function (path) {\n      var helperName = path.replace(config['default'].modulePrefix + '/helpers/', '');\n      Ember['default'].Handlebars.registerHelper(helperName, window.require(path)['default']);\n    });\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'ember-cli-auto-register-helpers',\n    initialize: initialize\n  };\n\n});","define('portia-web/initializers/error-handler', ['exports', 'ember', 'portia-web/utils/notification-manager'], function (exports, Ember, NotificationManager) {\n\n    'use strict';\n\n    exports.initialize = initialize;\n\n    function initialize(container, application) {\n        function notifyError(err) {\n            if (err.name === 'HTTPError') {\n                if (!err.data) {\n                    console.log(err.message);\n                }\n            } else {\n                console.log(err);\n            }\n\n            NotificationManager['default'].add({\n                title: err.title || 'Unexpected error',\n                message: err.name === 'HTTPError' && err.data && err.data.detail ? err.data.detail : 'An unexpected error has occurred. Please notify the developers. ' + 'Details have been logged to the console.',\n                type: err.status === 400 ? 'warning' : 'danger'\n            });\n        }\n\n        Ember['default'].onerror = notifyError;\n\n        application.ApplicationRoute = Ember['default'].Route.extend({\n            actions: {\n                error: notifyError\n            }\n        });\n    }\n\n    exports['default'] = {\n        name: 'error-handler',\n        initialize: initialize\n    };\n\n});","define('portia-web/initializers/export-application-global', ['exports', 'ember', 'portia-web/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (config['default'].exportApplicationGlobal !== false) {\n      var theGlobal;\n      if (typeof window !== 'undefined') {\n        theGlobal = window;\n      } else if (typeof global !== 'undefined') {\n        theGlobal = global;\n      } else if (typeof self !== 'undefined') {\n        theGlobal = self;\n      } else {\n        // no reasonable global, just bail\n        return;\n      }\n\n      var value = config['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember['default'].String.classify(config['default'].modulePrefix);\n      }\n\n      if (!theGlobal[globalName]) {\n        theGlobal[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete theGlobal[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('portia-web/initializers/idx-accordion-config', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, Em, IdxConfig) {\n\n    'use strict';\n\n    exports['default'] = {\n        name: 'ember-idx-accordion',\n        initialize: function initialize() {\n            var Config = Em['default'].IdxConfig = Em['default'].IdxConfig ? Em['default'].IdxConfig : IdxConfig['default'].create();\n\n            var defaultConfig = Config.getConfig('default');\n            if (!defaultConfig) {\n                Config.addConfig('default');\n                defaultConfig = Config.getConfig('default');\n            }\n\n            //Bootstrap\n            var bsConfig = Config.getConfig('bs');\n            if (!bsConfig) {\n                Config.addConfig('bs');\n                bsConfig = Config.getConfig('bs');\n            }\n            bsConfig['accordion'] = {\n                classes: ['panel-group'],\n                itemClasses: ['panel', 'panel-default'],\n                itemSelectedClasses: ['active'],\n                panelHeaderClasses: ['panel-heading'],\n                panelTitleClasses: ['panel-title'],\n                panelTogglerClasses: ['accordion-toggle'],\n                panelBodyContainerClasses: ['panel-collapse', 'collapse'],\n                panelBodyClasses: ['panel-body']\n            };\n        }\n    };\n\n});","define('portia-web/initializers/messages', ['exports', 'portia-web/utils/messages'], function (exports, Messages) {\n\n    'use strict';\n\n    exports.initialize = initialize;\n\n    function initialize(container, application) {\n        container.register('app:messages', Messages['default'], { instantiate: false });\n        application.inject('controller', 'messages', 'app:messages');\n        application.inject('component:inline-help', 'messages', 'app:messages');\n    }\n\n    exports['default'] = {\n        name: 'messages',\n        initialize: initialize\n    };\n\n});","define('portia-web/initializers/project-models', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports.initialize = initialize;\n\n    function initialize(container, application) {\n        var globals = Ember['default'].Object.create({ items: null, extractors: null, projects: {} });\n        container.register('projects:models', globals, { instantiate: false });\n        application.inject('controller', 'project_models', 'projects:models');\n        application.inject('route', 'project_models', 'projects:models');\n    }\n\n    exports['default'] = {\n        name: 'project-models',\n        initialize: initialize\n    };\n\n});","define('portia-web/initializers/register-api', ['exports', 'ember', 'ic-ajax', 'portia-web/config/environment', 'portia-web/utils/slyd-api', 'portia-web/utils/utils'], function (exports, Ember, ajax, config, SlydApi, utils) {\n\n    'use strict';\n\n    exports.initialize = initialize;\n\n    function initialize(container, application) {\n        application.deferReadiness();\n        var hash = {};\n        hash.type = 'GET';\n        hash.url = (config['default'].SLYD_URL || window.location.protocol + '//' + window.location.host) + '/server_capabilities';\n        ajax['default'](hash).then((function (settings) {\n            this.set('serverCapabilities', settings['capabilities']);\n            this.set('serverCustomization', settings['custom']);\n            container.register('api:capabilities', Ember['default'].Object.create().setProperties(application.get('serverCapabilities')), { instantiate: false });\n            container.register('app:custom', Ember['default'].Object.create().setProperties(application.get('serverCustomization')), { instantiate: false });\n            var api = new SlydApi['default']();\n            api.set('username', settings.username);\n            api.set('sessionid', utils['default'].shortGuid());\n            api.set('serverCapabilities', container.lookup('api:capabilities'));\n            container.register('api:slyd', api, { instantiate: false });\n            application.inject('route', 'slyd', 'api:slyd');\n            application.inject('adapter', 'slyd', 'api:slyd');\n            application.inject('controller', 'slyd', 'api:slyd');\n            application.inject('component', 'slyd', 'api:slyd');\n            application.inject('controller', 'customizations', 'app:custom');\n            application.inject('component', 'customizations', 'app:custom');\n            application.inject('controller', 'capabilities', 'api:capabilities');\n            application.inject('route', 'capabilities', 'api:capabilities');\n            this.advanceReadiness();\n        }).bind(application));\n    }\n\n    exports['default'] = {\n        name: 'register-api',\n        initialize: initialize\n    };\n\n});","define('portia-web/initializers/register-modal', ['exports', 'portia-web/utils/modal-manager'], function (exports, ModalManager) {\n\n    'use strict';\n\n    exports.initialize = initialize;\n\n    function initialize(container, application) {\n        var manager = new ModalManager['default']();\n        container.register('modal:manager', manager, { instantiate: false });\n        application.inject('component:bs-modal', 'ModalManager', 'modal:manager');\n        application.inject('component:bs-dropdown', 'ModalManager', 'modal:manager');\n        application.inject('controller', 'ModalManager', 'modal:manager');\n    }\n\n    exports['default'] = {\n        name: 'register-modal',\n        initialize: initialize\n    };\n\n});","define('portia-web/initializers/register-page-interaction', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    container.register('document:obj', Ember['default'].Object.create({ view: null,\n      store: null,\n      iframe: null }), { instantiate: false });\n    application.inject('controller', 'document', 'document:obj');\n    application.inject('component:web-document', 'document', 'document:obj');\n    application.inject('component:web-document-js', 'document', 'document:obj');\n    application.inject('component:tool-box', 'document', 'document:obj');\n    application.inject('component:annotation-widget', 'document', 'document:obj');\n    application.inject('model', 'document', 'document:obj');\n  }\n\n  exports['default'] = {\n    name: 'register-page-interaction',\n    initialize: initialize\n  };\n\n});","define('portia-web/initializers/register-websocket', ['exports', 'portia-web/utils/ferry-websocket', 'portia-web/utils/timer'], function (exports, FerryWebsocket, Timer) {\n\n    'use strict';\n\n    exports.initialize = initialize;\n\n    function initialize(container, application) {\n        var websocket = new FerryWebsocket['default']();\n\n        container.register('websocket:slyd', websocket, { instantiate: false });\n        application.inject('route', 'ws', 'websocket:slyd');\n        application.inject('adapter', 'ws', 'websocket:slyd');\n        application.inject('controller', 'ws', 'websocket:slyd');\n        application.inject('component', 'ws', 'websocket:slyd');\n\n        websocket.connect();\n        container.register('websocket:timer', new Timer['default'](websocket), { instantiate: false });\n    }\n\n    exports['default'] = {\n        name: 'register-websocket',\n        initialize: initialize\n    };\n\n});","define('portia-web/initializers/toolbox', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports.initialize = initialize;\n\n    function initialize(container, application) {\n        container.register('toolbox:state', Ember['default'].Object.create({\n            fixed: false,\n            pinned: !!(window.localStorage && localStorage.portia_toolbox_pinned)\n        }), { instantiate: false });\n        application.inject('route', 'toolbox', 'toolbox:state');\n        application.inject('component:tool-box', 'control', 'toolbox:state');\n        application.inject('component:tool-box', 'router', 'router:main');\n        application.inject('component:tool-box', 'applicationController', 'controller:application');\n    }\n\n    exports['default'] = {\n        name: 'toolbox',\n        initialize: initialize\n    };\n\n});","define('portia-web/mixins/conflict-mixin', ['exports', 'ember', 'portia-web/utils/utils'], function (exports, Ember, utils) {\n\n    'use strict';\n\n    var CHOICES = new Set(['my_val', 'base_val', 'other_val']);\n\n    exports['default'] = Ember['default'].Mixin.create({\n        _resetPath: function _resetPath(path) {\n            this.set('conflictedKeyPaths.' + path + '.accepted', new Set());\n            this.set('conflictedKeyPaths.' + path + '.rejected', new Set());\n            this._updateResolved(path);\n            this._updatePath(path);\n        },\n\n        _conflictOptionUpdated: function _conflictOptionUpdated(path, accepted, rejected) {\n            this.set('conflictedKeyPaths.' + path + '.accepted', accepted);\n            this.set('conflictedKeyPaths.' + path + '.rejected', rejected);\n            this._updateResolved(path);\n            this._updatePath(path);\n        },\n\n        _conflictOptionSelected: function _conflictOptionSelected(path, option) {\n            if (!option) {\n                return;\n            }\n            if (this.get('multi')) {\n                this.get('conflictedKeyPaths.' + path + '.accepted').add(option);\n                this.get('conflictedKeyPaths.' + path + '.rejected')['delete'](option);\n            } else {\n                this.set('conflictedKeyPaths.' + path + '.accepted', new Set([option]));\n                var rejected = [];\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = CHOICES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var opt = _step.value;\n\n                        if (opt !== option) {\n                            rejected.push(opt);\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator['return']) {\n                            _iterator['return']();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                this.set('conflictedKeyPaths.' + path + '.rejected', new Set(rejected));\n            }\n            this._updateResolved(path);\n            this._updatePath(path);\n        },\n\n        _conflictOptionRejected: function _conflictOptionRejected(path, option) {\n            if (!option) {\n                return;\n            }\n            this.get('conflictedKeyPaths.' + path + '.rejected').add(option);\n            this.get('conflictedKeyPaths.' + path + '.accepted')['delete'](option);\n            this._updateResolved(path);\n            this._updatePath(path);\n        },\n\n        _updatePath: function _updatePath(path) {\n            try {\n                this.sendAction('conflictOptionUpdated', path, this.get('conflictedKeyPaths.' + path + '.accepted'), this.get('conflictedKeyPaths.' + path + '.rejected'));\n            } catch (e) {\n                if (!(e instanceof TypeError)) {\n                    throw e;\n                }\n            }\n            this.notifyPropertyChange('conflictedKeyPaths');\n        },\n\n        _updateResolved: function _updateResolved(path) {\n            var accepted = this.get('conflictedKeyPaths.' + path + '.accepted'),\n                rejected = this.get('conflictedKeyPaths.' + path + '.rejected'),\n                resolved = accepted.size + rejected.size === 3;\n            this.set('conflictedKeyPaths.' + path + '.resolved', resolved);\n        },\n\n        resolvedValue: function resolvedValue(obj, path) {\n            obj = obj || this.get('json');\n            path = path || this.get('path');\n            var accepted = this.get('conflictedKeyPaths.' + path + '.accepted'),\n                result = [];\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = accepted[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var opt = _step2.value;\n\n                    var conflict = obj['__CONFLICT'],\n                        value = conflict[opt];\n                    if (value === null) {\n                        value = new result.constructor();\n                    }\n                    if (this._isArray(value)) {\n                        if (!this._isArray(result)) {\n                            result = [result];\n                        }\n                        Array.prototype.push.apply(result, value);\n                    } else {\n                        if (this._isArray(result)) {\n                            result.push(value);\n                        } else {\n                            result += value;\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n                        _iterator2['return']();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            if (this._isArray(result)) {\n                return Array.from(new Set(result));\n            }\n            return result;\n            // Get selected options and combine them if they are arrays. Concat if strings.\n        },\n\n        value: function value(obj, option) {\n            obj = obj || this.get('json');\n            if (this._isConflict(obj)) {\n                return obj.get('__CONFLICT.' + option);\n            } else {\n                return obj;\n            }\n        },\n\n        toType: function toType(obj) {\n            return ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n        },\n\n        _isObject: function _isObject(obj) {\n            obj = obj || this.get('json');\n            return utils['default'].toType(obj) === 'object';\n        },\n\n        _isArray: function _isArray(obj) {\n            obj = obj || this.get('json');\n            return Array.isArray(obj);\n        },\n\n        _isConflict: function _isConflict(obj) {\n            obj = obj || this.get('json');\n            return this.get('isObject') && '__CONFLICT' in obj;\n        }\n\n    });\n\n});","define('portia-web/mixins/controller-utils', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        serverCapability: function serverCapability(capability) {\n            return this.serverCapabilities.get(capability);\n        },\n\n        openAccordion: function openAccordion(accordionNumber) {\n            Ember['default'].$(\".accordion\").accordion(\"option\", \"active\", accordionNumber);\n        },\n\n        getUnusedName: function getUnusedName(baseName, usedNames) {\n            var i = 1;\n            var newName = baseName;\n            var name_cmp = function name_cmp(usedName) {\n                return usedName === newName;\n            };\n            while (usedNames.any(name_cmp)) {\n                newName = baseName + '_' + i++;\n            }\n            return newName;\n        }\n\n    });\n\n});","define('portia-web/mixins/draggable', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        attributeBindings: ['draggable'],\n        draggable: true,\n        content: null,\n\n        dragStart: function dragStart(event) {\n            this._super(event);\n            var dataTransfer = event.originalEvent.dataTransfer;\n            dataTransfer.setDragImage(this.get('element'), Ember['default'].$(this.get('element')).width() / 2, Ember['default'].$(this.get('element')).height());\n            dataTransfer.setData('data', this.get('content'));\n        }\n    });\n\n});","define('portia-web/mixins/droppable', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        classNameBindings: ['dragClass'],\n        dragClass: 'deactivated',\n        content: null,\n\n        drop: function drop(event) {\n            event.preventDefault();\n            this.set('dragClass', '');\n            var data = event.originalEvent.dataTransfer.getData('data');\n            this.sendAction('action', this.get('content'), data);\n            return false;\n        },\n\n        dragLeave: function dragLeave(event) {\n            event.preventDefault();\n            this.set('dragClass', '');\n        },\n\n        dragOver: function dragOver(event) {\n            event.preventDefault();\n            this.set('dragClass', 'drop-target-dragging');\n        }\n    });\n\n});","define('portia-web/mixins/guess-types', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var TAG_TYPES = {\n        text: new Set([\"b\", \"blockquote\", \"cite\", \"code\", \"dd\", \"del\", \"dfn\", \"div\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"i\", \"id\", \"ins\", \"kbd\", \"lang\", \"mark\", \"p\", \"rb\", \"s\", \"samp\", \"small\", \"span\", \"strong\", \"sub\", \"sup\", \"td\", \"th\", \"title\", \"u\"]),\n        date: new Set([\"time\"]),\n        media: new Set([\"audio\", \"embed\", \"img\", \"source\", \"video\"]),\n        url: new Set([\"a\", \"area\"]),\n        data: new Set([\"data\"]),\n        option: new Set([\"option\"]),\n        input: new Set([\"input\"]),\n        quote: new Set([\"q\"]),\n        meta: new Set([\"meta\"]),\n        map: new Set([\"map\"]),\n        article: new Set([\"article\"]),\n        abbr: new Set([\"abbr\"])\n    };\n\n    var TYPE_FIELD_ORDER = {\n        text: [\"text content\"],\n        date: [\"datetime\", \"text content\"],\n        media: [\"src\", \"srcset\", \"media\"],\n        url: [\"href\"],\n        data: [\"value\", \"text content\"],\n        option: [\"label\", \"value\", \"text content\"],\n        input: [\"value\", \"src\", \"name\", \"type\"],\n        quote: [\"cite\", \"text content\"],\n        meta: [\"content\"],\n        map: [\"name\"],\n        article: [\"text content\"],\n        abbr: [\"title\", \"text content\"]\n    };\n\n    var FIELD_TYPE = {\n        text: \"text\",\n        date: \"date\",\n        media: \"image\",\n        url: \"url\",\n        map: \"text\",\n        article: \"safe html\"\n    };\n\n    var VOCAB_FIELD_PROPERTY = {\n        image: new Set([\"photo\"]),\n        price: new Set([\"price\"]),\n        geopoint: new Set([\"geo\"]),\n        url: new Set([\"logo\", \"agent\", \"sound\", \"url\", \"attach\", \"license\"]),\n        date: new Set([\"bday\", \"rev\", \"dtstart\", \"dtend\", \"exdate\", \"rdate\", \"created\", \"last-modified\"])\n    };\n\n    var VOCAB_FIELD_CLASS = {\n        number: new Set([\"p-rating\", \"p-best\", \"p-worst\", \"p-longitude\", \"p-latitude\", \"p-yield\"]),\n        image: new Set([\"u-photo\"]),\n        geopoint: new Set([\"u-geo\", \"p-geo\"]),\n        url: new Set([\"u-url\", \"u-url\"]),\n        date: new Set([\"dt-bday\", \"dt-reviewed\", \"dt-start\", \"dt-end\", \"dt-rev\", \"dt-published\", \"dt-updated\"])\n    };\n\n    exports['default'] = Ember['default'].Mixin.create({\n        guessFieldName: function guessFieldName(element) {\n            if (element.attributes.property) {\n                return element.attributes.property.value;\n            }\n            if (element.attributes.itemprop) {\n                return element.attributes.itemprop.value;\n            }\n            if (element.attributes.name) {\n                return element.attributes.name.value;\n            }\n        },\n\n        guessFieldType: function guessFieldType(extractedData, element, guess) {\n            var type = this.guessFieldClassification(element);\n            if (type !== null) {\n                var classes = element.classList,\n                    attributes = element.attributes,\n                    property;\n                if (attributes.property) {\n                    property = attributes.property.value;\n                }\n                if (attributes.itemprop) {\n                    property = attributes.itemprop.value;\n                }\n                if (guess || !FIELD_TYPE[type] || type === 'text') {\n                    var guessed = this.guessType(extractedData, property, classes);\n                    if (guessed) {\n                        return guessed;\n                    }\n                }\n                return FIELD_TYPE[type];\n            }\n        },\n\n        guessFieldExtraction: function guessFieldExtraction(element, attributes) {\n            var type = this.guessFieldClassification(element);\n            if (type !== null) {\n                var fieldOrders = TYPE_FIELD_ORDER[type];\n                attributes = attributes || element.attributes;\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = fieldOrders[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var f = _step.value;\n\n                        if (f === 'text content') {\n                            if (attributes.contains('text content')) {\n                                return f;\n                            } else {\n                                return 'content';\n                            }\n                        }\n                        if (attributes.contains(f)) {\n                            return f;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n                            _iterator[\"return\"]();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n\n        guessFieldClassification: function guessFieldClassification(element) {\n            var tag = element.tagName.toLowerCase();\n            for (var key in TAG_TYPES) {\n                if (TAG_TYPES[key].has(tag)) {\n                    return key;\n                }\n            }\n            return null;\n        },\n\n        guessType: function guessType(data, property, classes) {\n            var key;\n            classes = Array.prototype.slice.call(classes, 0);\n            if (property) {\n                for (key in VOCAB_FIELD_PROPERTY) {\n                    if (VOCAB_FIELD_PROPERTY[key].has(property)) {\n                        return key;\n                    }\n                }\n            }\n            if (classes) {\n                var prefixes = new Set(['p', 'u', 'dt']);\n                classes = classes.filter(function (c) {\n                    return prefixes.has(c.split('-')[0]);\n                });\n                if (classes.length > 0) {\n                    for (key in VOCAB_FIELD_CLASS) {\n                        for (var i = 0; i < classes.length; i++) {\n                            property = classes[i];\n                            if (VOCAB_FIELD_CLASS[key].has(property)) {\n                                return key;\n                            }\n                        }\n                    }\n                }\n            }\n            if (/^(?:(?:http)|(?:\\/))/.test(data)) {\n                return 'url';\n            }\n            data = data.trim();\n            var geopoint = data.match(/[+-]?\\d+(?:\\.\\d+)?[,;]\\s?[+-]?\\d+(?:\\.\\d+)?/);\n            if (geopoint !== null) {\n                return 'geopoint';\n            }\n            var prices = data.match(/\\d+(?:(?:,\\d{3})+)?(?:.\\d+)?/);\n            if (prices !== null && prices.length && prices[0].length / data.length > 0.05) {\n                return 'price';\n            }\n            var numbers = data.match(/\\d+(?:\\.\\d+)?/);\n            if (numbers !== null && numbers.length && numbers[0].length / data.length > 0.05) {\n                return 'number';\n            }\n            return 'text';\n        }\n    });\n\n});","define('portia-web/mixins/modal-handler', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n\n        actions: {\n            modalConfirmed: function modalConfirmed() {\n                var name = this.get('_modalName');\n                this.set('_modalName', null);\n                if (typeof this.get('_modalOKCallback') === 'function') {\n                    this.get('_modalOKCallback')();\n                }\n                if (name) {\n                    return this.ModalManager.get('name').destroy();\n                }\n            },\n\n            modalCancelled: function modalCancelled() {\n                var name = this._modalName;\n                this._modalName = null;\n                if (typeof this.get('_modalCancelCallback') === 'function') {\n                    this.get('_modalCancelCallback')();\n                }\n                if (name) {\n                    return this.ModalManager.get('name').destroy();\n                }\n            }\n        },\n\n        showConfirm: function showConfirm(title, content, okCallback, cancelCallback, button_class, button_text) {\n            if (this.get('_modalName')) {\n                // There is already a modal visible\n                return;\n            }\n            if (button_class === undefined) {\n                button_class = 'primary';\n            }\n            if (button_text === undefined) {\n                button_text = 'OK';\n            }\n            this.set('_modalName', 'ConfirmModal');\n            var buttons = [Ember['default'].Object.create({ dismiss: 'modal', type: \"default\", label: \"Cancel\", clicked: 'modalCancelled', size: 'sm' }), Ember['default'].Object.create({ dismiss: 'modal', type: button_class, label: button_text, clicked: 'modalConfirmed', size: 'sm' })];\n            return this.showModal(title, content, null, null, buttons, okCallback, cancelCallback);\n        },\n\n        showComponentModal: function showComponentModal(title, component, componentData, okCallback, cancelCallback, button_class, button_text) {\n            this.set('_modalName', 'ComponentModal');\n            var buttons = [Ember['default'].Object.create({ dismiss: 'modal', type: \"default\", label: \"Cancel\", clicked: 'modalCancelled', size: 'sm' }), Ember['default'].Object.create({ dismiss: 'modal', type: button_class, label: button_text, clicked: 'modalConfirmed', size: 'sm' })];\n            this.showModal(title, null, component, componentData, buttons, okCallback, cancelCallback);\n        },\n\n        showModal: function showModal(title, content, component, componentData, buttons, okCallback, cancelCallback) {\n            this.set('_modalOKCallback', okCallback);\n            this.set('_modalCancelCallback', cancelCallback);\n            return this.ModalManager.open(this.get('_modalName'), title, buttons, content, component, componentData, this);\n        }\n    });\n\n});","define('portia-web/mixins/notification-handler', ['exports', 'ember', 'portia-web/utils/notification-manager'], function (exports, Ember, NotificationManager) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        showNotification: NotificationManager['default'].showNotification.bind(NotificationManager['default']),\n        showSuccessNotification: NotificationManager['default'].showSuccessNotification.bind(NotificationManager['default']),\n        showWarningNotification: NotificationManager['default'].showWarningNotification.bind(NotificationManager['default']),\n        showErrorNotification: NotificationManager['default'].showErrorNotification.bind(NotificationManager['default'])\n    });\n\n});","define('portia-web/mixins/popover', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        addTooltip: function addTooltip() {\n            if (this.get('title')) {\n                this.$().tooltip({\n                    placement: this.getWithDefault('popoverPlacement', 'bottom'),\n                    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div><div class=\"tooltip-inner\"></div>' + '</div></div>' + '</div>',\n                    html: this.getWithDefault('html', false)\n                });\n            }\n        },\n\n        didInsertElement: function didInsertElement() {\n            this.addTooltip();\n            this._super();\n        }\n    });\n\n});","define('portia-web/mixins/size-listener', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\n        full_box_height: 600,\n        mid_box_height: 500,\n        small_box_height: 400,\n        tiny_box_height: 300,\n        ex_tiny_box_height: 200,\n        breadCrumb: null,\n        breadCrumbs: null,\n\n        handleResize: function handleResize() {\n            Ember['default'].$('.adjust-height').height(window.innerHeight - 38);\n            this.set('full_box_height', Math.max(80, window.innerHeight - 200));\n            this.set('mid_box_height', Math.max(80, window.innerHeight - 300));\n            this.set('small_box_height', Math.max(80, window.innerHeight - 400));\n            this.set('tiny_box_height', Math.max(80, window.innerHeight - 500));\n            this.set('ex_tiny_box_height', Math.max(60, window.innerHeight - 600));\n        },\n\n        full_box_style: (function () {\n            return ('max-height: ' + this.full_box_height + 'px;').htmlSafe();\n        }).property('full_box_height'),\n\n        mid_box_style: (function () {\n            return ('max-height: ' + this.mid_box_height + 'px;').htmlSafe();\n        }).property('mid_box_height'),\n\n        small_box_style: (function () {\n            return ('max-height: ' + this.small_box_height + 'px;').htmlSafe();\n        }).property('small_box_height'),\n\n        tiny_box_style: (function () {\n            return ('max-height: ' + this.tiny_box_height + 'px;').htmlSafe();\n        }).property('tiny_box_height'),\n\n        ex_tiny_box_style: (function () {\n            return ('max-height: ' + this.ex_tiny_box_height + 'px;').htmlSafe();\n        }).property('ex_tiny_box_height'),\n\n        bindResizeEvent: (function () {\n            Ember['default'].run.next(this, this.handleResize);\n            if (!Ember['default'].testing) {\n                Ember['default'].$(window).on('resize', Ember['default'].run.bind(this, this.handleResize));\n            }\n        }).on('init'),\n\n        openAccordion: function openAccordion(accordionNumber) {\n            Ember['default'].$(\".accordion\").accordion(\"option\", \"active\", accordionNumber);\n        }\n    });\n\n});","define('portia-web/models/annotation', ['exports', 'ember', 'portia-web/models/simple-model', 'portia-web/models/ignore'], function (exports, Ember, SimpleModel, Ignore) {\n\n    'use strict';\n\n    exports['default'] = SimpleModel['default'].extend({\n\n        init: function init() {\n            this._super();\n            if (!this.get('iframe')) {\n                this.set('iframe', Ember['default'].$(this[0]));\n            }\n            var ignoredElements = this.get('iframe').findIgnoredElements(this.get('id')).toArray();\n            var ignores = ignoredElements.map(function (element) {\n                var attributeName = Ember['default'].$(element).attr('data-scrapy-ignore') ? 'data-scrapy-ignore' : 'data-scrapy-ignore-beneath';\n                var name = Ember['default'].$.parseJSON(Ember['default'].$(element).attr(attributeName))['name'];\n                return Ignore['default'].create({ element: element,\n                    name: name,\n                    ignoreBeneath: attributeName === 'data-scrapy-ignore-beneath' });\n            });\n            this.set('ignores', ignores);\n            if (this.get('required') === null) {\n                this.set('required', []);\n            }\n            if (this.get('annotations') === null) {\n                this.set('annotations', {});\n            }\n        },\n\n        idBinding: null,\n\n        serializedProperties: ['id', 'variant', 'annotations', 'required', 'generated', 'is_required', 'weight'],\n\n        name: (function () {\n            var annotations = this.get('annotations');\n            if (annotations && Object.keys(annotations).length) {\n                var name = '';\n                Object.keys(annotations).forEach(function (key) {\n                    name += (name.length ? ', ' : '') + key + '  >  ';\n                    name += annotations[key];\n                });\n                return name;\n            } else {\n                return 'No mappings';\n            }\n        }).property('annotations'),\n\n        variant: 0,\n\n        annotations: null,\n\n        required: null,\n\n        is_required: false,\n\n        weight: 1.0,\n\n        generated: false,\n\n        ignores: null,\n\n        addMapping: function addMapping(attribute, itemField) {\n            this.get('annotations')[attribute] = itemField;\n            this.notifyPropertyChange('annotations');\n        },\n\n        removeMapping: function removeMapping(attribute) {\n            this.removeRequired(this.get('annotations')[attribute]);\n            delete this.get('annotations')[attribute];\n            this.notifyPropertyChange('annotations');\n        },\n\n        removeMappings: function removeMappings() {\n            this.set('annotations', {});\n            this.set('required', []);\n            this.notifyPropertyChange('annotations');\n        },\n\n        addRequired: function addRequired(field) {\n            this.get('required').pushObject(field);\n        },\n\n        removeRequired: function removeRequired(field) {\n            this.get('required').removeObject(field);\n        },\n\n        addIgnore: function addIgnore(element) {\n            var ignore = Ignore['default'].create({ element: element });\n            this.get('ignores').pushObject(ignore);\n        },\n\n        removeIgnore: function removeIgnore(ignore) {\n            this.get('ignores').removeObject(ignore);\n        },\n\n        removeIgnores: function removeIgnores() {\n            this.get('ignores').setObjects([]);\n        },\n\n        partialText: (function () {\n            if (this.get('element') && this.get('generated')) {\n                return Ember['default'].$(this.get('element')).text();\n            } else {\n                return '';\n            }\n        }).property('element'),\n\n        selectedElement: null,\n\n        element: (function () {\n            if (this.get('selectedElement')) {\n                return this.get('selectedElement');\n            } else {\n                var annotatedElement = this.get('iframe').findAnnotatedElement(this.get('id'));\n                if (annotatedElement.length) {\n                    return annotatedElement.get(0);\n                } else {\n                    return null;\n                }\n            }\n        }).property('selectedElement'),\n\n        path: (function () {\n            if (this.get('element')) {\n                return Ember['default'].$(this.get('element')).getUniquePath();\n            } else {\n                return '';\n            }\n        }).property('element'),\n\n        ancestorPaths: (function () {\n            if (!this.get('element')) {\n                return [];\n            }\n            var path = this.get('path'),\n                splitted = path.split('>'),\n                result = [],\n                selector = '';\n            splitted.forEach((function (pathElement) {\n                var ancestorPath = {};\n                selector += (selector ? '>' : '') + pathElement;\n                ancestorPath['path'] = selector;\n                var element = this.get('iframe').find(selector).get(0);\n                ancestorPath['element'] = element;\n                ancestorPath['label'] = element.tagName.toLowerCase();\n                result.pushObject(ancestorPath);\n            }).bind(this));\n            return result;\n        }).property('path'),\n\n        childPaths: (function () {\n            if (!this.get('element')) {\n                return [];\n            }\n            var result = [];\n            if (this.get('element')) {\n                var path = this.get('path');\n                var children = this.get('element').children;\n                children = Array.prototype.slice.call(children);\n                children.forEach(function (child, i) {\n                    var childPath = {};\n                    childPath['label'] = child.tagName.toLowerCase();\n                    childPath['path'] = path + '>' + ':eq(' + i + ')';\n                    childPath['element'] = child;\n                    result.pushObject(childPath);\n                });\n            }\n            return result;\n        }).property('path'),\n\n        attributes: (function () {\n            if (this.get('element')) {\n                return Ember['default'].$(this.get('element')).getAttributeList();\n            } else {\n                return [];\n            }\n        }).property('element'),\n\n        unmappedAttributes: (function () {\n            return this.get('attributes').filter((function (attribute) {\n                return !this.get('annotations')[attribute.get('name')];\n            }).bind(this));\n        }).property('attributes.@each', 'annotations'),\n\n        _mappedAttributes: function _mappedAttributes(filter) {\n            var mapped = [];\n            if (this.get('annotations')) {\n                this.get('attributes').forEach((function (attribute) {\n                    var mappedTo = this.get('annotations')[attribute.get('name')];\n                    if (filter(mappedTo)) {\n                        attribute.set('mappedField', mappedTo);\n                        mapped.addObject(attribute);\n                    }\n                }).bind(this));\n            }\n            return mapped;\n        },\n\n        mappedAttributes: (function () {\n            return this._mappedAttributes(function (fieldName) {\n                return fieldName && fieldName.indexOf('_sticky') !== 0;\n            });\n        }).property('attributes.@each', 'annotations'),\n\n        stickyAttributes: (function () {\n            return this._mappedAttributes(function (fieldName) {\n                return fieldName && fieldName.indexOf('_sticky') === 0;\n            });\n        }).property('attributes.@each', 'annotations')\n    });\n\n});","define('portia-web/models/attribute', ['exports', 'portia-web/models/simple-model'], function (exports, SimpleModel) {\n\n    'use strict';\n\n    exports['default'] = SimpleModel['default'].extend({\n        value: null,\n        mappedField: null,\n        annotation: null\n    });\n\n});","define('portia-web/models/conflict', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Object.extend({});\n\n});","define('portia-web/models/extracted-field', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.extend({\n        name: null,\n        type: null,\n        value: null\n    });\n\n});","define('portia-web/models/extracted-item', ['exports', 'ember', 'portia-web/models/extracted-field', 'portia-web/models/extracted-variant'], function (exports, Ember, ExtractedField, ExtractedVariant) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.extend({\n        definition: null,\n        extracted: null,\n        matchedTemplate: null,\n\n        url: Ember['default'].computed.reads('extracted.url'),\n\n        fields: (function () {\n            var fields = [],\n                item = this.get('extracted');\n            Object.keys(item).forEach((function (key) {\n                var fieldDefinition = this.get('definition.fields').findBy('name', key);\n                if (fieldDefinition) {\n                    fields.pushObject(ExtractedField['default'].create({ name: key, type: fieldDefinition.get('type'), value: item[key] }));\n                }\n            }).bind(this));\n            return fields;\n        }).property('extracted', 'definition'),\n\n        variants: (function () {\n            var variants = [],\n                item = this.get('extracted');\n            if (!Ember['default'].isEmpty(item['variants'])) {\n                item.variants.forEach((function (variant) {\n                    var fields = [];\n                    Object.keys(variant).forEach((function (key) {\n                        fields.pushObject(ExtractedField['default'].create({ name: key, type: 'variant', value: variant[key] }));\n                    }).bind(this));\n                    variants.pushObject(ExtractedVariant['default'].create({ fields: fields }));\n                }).bind(this));\n            }\n            return variants;\n        }).property('extracted', 'definition')\n    });\n\n});","define('portia-web/models/extracted-variant', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.extend({\n        fields: null\n    });\n\n});","define('portia-web/models/extractor', ['exports', 'portia-web/models/simple-model'], function (exports, SimpleModel) {\n\n    'use strict';\n\n    exports['default'] = SimpleModel['default'].extend({\n\n        serializedProperties: (function () {\n            var serializedProperties = ['name'];\n            if (this.get('regular_expression')) {\n                serializedProperties.pushObject('regular_expression');\n            } else {\n                serializedProperties.pushObject('type_extractor');\n            }\n            return serializedProperties;\n        }).property('regular_expression', 'type_extractor'),\n\n        regular_expression: null,\n        type_extractor: null\n    });\n\n});","define('portia-web/models/ignore', ['exports', 'portia-web/models/simple-model'], function (exports, SimpleModel) {\n\n    'use strict';\n\n    exports['default'] = SimpleModel['default'].extend({\n        element: null,\n        ignoreBeneath: false,\n        highlighted: false\n    });\n\n});","define('portia-web/models/item-field', ['exports', 'portia-web/models/simple-model'], function (exports, SimpleModel) {\n\n    'use strict';\n\n    exports['default'] = SimpleModel['default'].extend({\n        serializedProperties: ['name', 'type', 'is_required', 'weight', 'required', 'vary'],\n        type: 'text',\n        is_required: false,\n        weight: 1.0,\n        required: false,\n        vary: false\n    });\n\n});","define('portia-web/models/item', ['exports', 'portia-web/models/simple-model', 'portia-web/models/item-field'], function (exports, SimpleModel, ItemField) {\n\n    'use strict';\n\n    exports['default'] = SimpleModel['default'].extend({\n        serializedRelations: ['fields'],\n        serializedProperties: ['name', 'display_name'],\n        fields: null,\n\n        validateName: function validateName(name) {\n            return (/^[A-Za-z0-9_-]+$/g.test(name)\n            );\n        },\n\n        isValid: function isValid() {\n            return this.validateName(this.get('name')) && this.get('fields').reduce((function (previousValue, field) {\n                return previousValue && this.validateName(field.get('name'));\n            }).bind(this), true);\n        },\n\n        addField: function addField(name, type) {\n            var newField = ItemField['default'].create({ name: name || 'new_field',\n                type: type || 'text',\n                required: false,\n                vary: false });\n            this.get('fields').pushObject(newField);\n        }\n    });\n\n});","define('portia-web/models/mapped-field-data', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.extend({\n        fieldName: null,\n        extractors: [],\n        required: false,\n        extracted: false,\n        disabled: true\n    });\n\n});","define('portia-web/models/simple-model', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.extend(Ember['default'].Copyable, {\n        idBinding: 'name',\n        name: null,\n        serializedProperties: null,\n        serializedRelations: null,\n\n        copy: function copy() {\n            return Ember['default'].run(this.constructor, 'create', this);\n        },\n\n        serialize: function serialize() {\n            var serialized = this.getProperties(this.get('serializedProperties'));\n            if (!Ember['default'].isEmpty(this.get('serializedRelations'))) {\n                this.get('serializedRelations').forEach((function (relation) {\n                    if (!Ember['default'].isEmpty(this.get(relation))) {\n                        serialized[relation] = this.get(relation).map(function (relatedObject) {\n                            return relatedObject.serialize();\n                        });\n                    } else {\n                        serialized[relation] = [];\n                    }\n                }).bind(this));\n            }\n            return serialized;\n        }\n    });\n\n});","define('portia-web/models/spider', ['exports', 'ember', 'portia-web/models/simple-model'], function (exports, Ember, SimpleModel) {\n\n    'use strict';\n\n    var ARRAY_PROPERTIES = [\"start_urls\", \"follow_patterns\", \"exclude_patterns\", \"js_enable_patterns\", \"js_disable_patterns\", \"allowed_domains\", \"templates\", \"template_names\", \"page_actions\"];\n\n    exports['default'] = SimpleModel['default'].extend({\n        serializedProperties: ['start_urls', 'start_urls', 'links_to_follow', 'follow_patterns', 'js_enabled', 'js_enable_patterns', 'js_disable_patterns', 'exclude_patterns', 'respect_nofollow', 'init_requests', 'template_names', 'page_actions', 'country_code', 'currency_code', 'english_url', 'arabic_url', 'english_url_args', 'arabic_url_args', 'cookies_enabled', 'english_cookie_name', 'english_cookie_value', 'arabic_cookie_name', 'arabic_cookie_value', 'use_currency_cookies', 'currency_cookie_name', 'currency_cookie_value', 'local_images'],\n        serializedRelations: ['templates'],\n        start_urls: null,\n        country_code: null,\n        currency_code: null,\n        links_to_follow: 'patterns',\n        follow_patterns: null,\n        exclude_patterns: null,\n        respect_nofollow: true,\n        templates: null,\n        template_names: null,\n        init_requests: null,\n        page_actions: null,\n        english_url: null,\n        english_url_args: null,\n        arabic_url: null,\n        arabic_url_args: null,\n        cookies_enabled: false,\n        english_cookie_name: null,\n        english_cookie_value: null,\n        arabic_cookie_name: null,\n        arabic_cookie_value: null,\n        use_currency_cookies: false,\n        currency_cookie_name: null,\n        currency_cookie_value: null,\n        local_images: false,\n\n        init: function init() {\n            var _this = this;\n\n            ARRAY_PROPERTIES.forEach(function (prop) {\n                if (!_this.get(prop)) {\n                    _this.set(prop, Ember['default'].A());\n                }\n            });\n\n            var markDirty = function markDirty() {\n                return _this.notifyPropertyChange('dirty');\n            };\n            this.serializedProperties.forEach(function (prop) {\n                _this.addObserver(prop + '.[]', markDirty);\n            });\n        },\n\n        serialize: function serialize() {\n            this.page_actions.forEach(function (pa) {\n                delete pa.target;\n                delete pa._edited;\n            });\n            return this._super();\n        },\n\n        performLogin: (function (key, performLogin) {\n            if (arguments.length > 1) {\n                if (performLogin) {\n                    this.get('init_requests').setObjects([{ type: 'login' }]);\n                } else {\n                    this.set('loginUrl', '');\n                    this.set('loginUser', '');\n                    this.set('loginPassword', '');\n                    this.get('init_requests').setObjects([]);\n                }\n            }\n            return !Ember['default'].isEmpty(this.get('init_requests'));\n        }).property('init_requests'),\n\n        loginUrl: (function (key, loginUrl) {\n            var reqs = this.get('init_requests');\n            if (arguments.length > 1) {\n                reqs[0]['loginurl'] = loginUrl;\n            }\n            return reqs.length ? reqs[0]['loginurl'] : null;\n        }).property('init_requests'),\n\n        loginUser: (function (key, loginUser) {\n            var reqs = this.get('init_requests');\n            if (arguments.length > 1) {\n                reqs[0]['username'] = loginUser;\n            }\n            return reqs.length ? reqs[0]['username'] : null;\n        }).property('init_requests'),\n\n        loginPassword: (function (key, loginPassword) {\n            var reqs = this.get('init_requests');\n            if (arguments.length > 1) {\n                reqs[0]['password'] = loginPassword;\n            }\n            return reqs.length ? reqs[0]['password'] : null;\n        }).property('init_requests')\n    });\n\n});","define('portia-web/models/template', ['exports', 'portia-web/models/simple-model'], function (exports, SimpleModel) {\n\n    'use strict';\n\n    exports['default'] = SimpleModel['default'].extend({\n        serializedProperties: ['page_id', 'default', 'scrapes', 'page_type', 'url', 'annotations', 'extractors', 'name', 'plugins', 'scrapely_data'],\n        page_id: '',\n        scrapes: 'default',\n        page_type: 'item',\n        url: '',\n        annotated_body: '',\n        original_body: '',\n        _new: false,\n        extractors: null,\n        scrapely_data: null\n    });\n\n});","define('portia-web/router', ['exports', 'ember', 'portia-web/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.resource(\"projects\", function () {\n      this.resource(\"project\", {\n        path: \":project_id\"\n      }, function () {\n        this.resource(\"spider\", {\n          path: \":spider_id\"\n        }, function () {\n          this.resource(\"template\", {\n            path: \":template_id\"\n          }, function () {\n            this.resource(\"template-items\", {\n              path: 'items'\n            });\n          });\n        });\n        this.resource(\"conflicts\");\n        this.resource(\"items\");\n      });\n    });\n    this.resource(\"experiments\");\n    this.route(\"base-route\");\n  });\n\n  exports['default'] = Router;\n\n});","define('portia-web/routes/base-route', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Route.extend({\n        activate: function activate() {\n\n            var controller = this.controller || this.controllerFor(this.getControllerName());\n            var fixed = controller.getWithDefault('fixedToolbox', this.getWithDefault('fixedToolbox', true));\n            this.set('toolbox.fixed', fixed);\n            if (controller.willEnter) {\n                controller.willEnter();\n            }\n            this._super();\n        },\n\n        deactivate: function deactivate() {\n            var controller = this.controller || this.controllerFor(this.getControllerName());\n            if (controller.willLeave) {\n                controller.willLeave();\n            }\n        },\n\n        getControllerName: function getControllerName() {\n            return this.getWithDefault('defaultControllerName', this.get('routeName'));\n        }\n    });\n\n});","define('portia-web/routes/conflicts', ['exports', 'portia-web/routes/base-route'], function (exports, BaseRoute) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n        model: function model() {\n            return this.get('slyd').conflictedFiles(this.get('slyd.project'));\n        },\n\n        renderTemplate: function renderTemplate() {\n            var controller = this.controllerFor('conflicts');\n            this.render('conflicts/toolbox', {\n                into: 'application',\n                outlet: 'main',\n                controller: controller\n            });\n\n            this.render('conflicts/topbar', {\n                into: 'application',\n                outlet: 'topbar',\n                controller: controller\n            });\n\n            this.render('conflicts/resolver', {\n                into: 'application',\n                outlet: 'conflictResolver',\n                controller: controller\n            });\n        }\n    });\n\n});","define('portia-web/routes/conflicts/index', ['exports', 'portia-web/routes/conflicts'], function (exports, ConflictsRoute) {\n\n\t'use strict';\n\n\texports['default'] = ConflictsRoute['default'];\n\n});","define('portia-web/routes/experiments', ['exports', 'portia-web/routes/base-route', 'portia-web/utils/experiments'], function (exports, BaseRoute, expetiments) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n        fixedToolbox: true,\n\n        model: function model() {\n            return [\n                // {\n                //     name: 'selectors',\n                //     label: 'XPath and CSS selectors',\n                //     helpText: 'Add custom XPath and CSS Selectors to a template',\n                // }\n            ].map(function (experiment) {\n                experiment.enabled = expetiments['default'].enabled(experiment.name);\n                experiment.newValue = experiment.enabled;\n                return experiment;\n            });\n        },\n\n        renderTemplate: function renderTemplate() {\n            var controller = this.controllerFor('experiments');\n            this.render('experiments', {\n                into: 'application',\n                outlet: 'main',\n                controller: controller\n            });\n\n            this.render('template/topbar', {\n                into: 'application',\n                outlet: 'topbar',\n                controller: controller\n            });\n        }\n    });\n\n});","define('portia-web/routes/index', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Route.extend({\n        activate: function activate() {\n            this.transitionTo('projects');\n        }\n    });\n\n});","define('portia-web/routes/items', ['exports', 'portia-web/routes/base-route'], function (exports, BaseRoute) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n        defaultControllerName: 'items',\n\n        model: function model() {\n            return this.get('slyd').loadItems();\n        },\n\n        renderTemplate: function renderTemplate() {\n            var controller = this.controllerFor(this.get('defaultControllerName'));\n            this.render('items/toolbox', {\n                into: 'application',\n                outlet: 'main',\n                controller: controller\n            });\n\n            this.render('template/topbar', {\n                into: 'application',\n                outlet: 'topbar',\n                controller: controller\n            });\n        }\n    });\n\n});","define('portia-web/routes/project', ['exports', 'portia-web/routes/base-route'], function (exports, BaseRoute) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n        beforeModel: function beforeModel(s) {\n            if (s.params.project.project_id) {\n                this.set('slyd.project', s.params.project.project_id);\n                this.set('ws.project', s.params.project.project_id);\n                return this.get('slyd').editProject(s.params.project.project_id, 'master');\n            }\n        },\n\n        model: function model() {\n            return this.get('slyd').getSpiderNames();\n        }\n    });\n\n});","define('portia-web/routes/project/index', ['exports', 'portia-web/routes/base-route'], function (exports, BaseRoute) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n        fixedToolbox: false,\n\n        model: function model() {\n            return this.get('slyd').getSpiderNames();\n        },\n\n        afterModel: function afterModel() {\n            if (this.get('capabilities.version_control')) {\n                var controller = this.controllerFor('project.index');\n                this.get('slyd').hasTag(this.get('slyd.project'), 'portia_2.0').then((function (hasTag) {\n                    this.set('slyd.hasPortia2', hasTag.status);\n                }).bind(this));\n                return this.get('slyd').changedFiles(this.get('slyd.project')).then(function (changes) {\n                    controller.set('changedFiles', changes);\n                });\n            }\n        },\n\n        renderTemplate: function renderTemplate() {\n            var controller = this.controllerFor('project.index');\n            this.render('project/toolbox', {\n                into: 'application',\n                outlet: 'main',\n                controller: controller\n            });\n\n            this.render('project/topbar', {\n                into: 'application',\n                outlet: 'topbar',\n                controller: controller\n            });\n        },\n\n        serialize: function serialize() {\n            var controller = this.controllerFor('project.index');\n            return { project_id: controller.get('name') };\n        }\n    });\n\n});","define('portia-web/routes/projects', ['exports', 'portia-web/routes/base-route'], function (exports, BaseRoute) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n        model: function model() {\n            return this.get('slyd').getProjectNames();\n        },\n\n        afterModel: function afterModel() {\n            this.modelFor('projects').forEach((function (project) {\n                if (project instanceof Object) {\n                    this.set('project_models.projects.' + project.id, project.name);\n                } else {\n                    this.set('project_models.projects.' + project, project);\n                }\n            }).bind(this));\n        },\n\n        renderTemplate: function renderTemplate() {\n            var controller = this.controllerFor('projects');\n            this.render('projects/toolbox', {\n                into: 'application',\n                outlet: 'main',\n                controller: controller\n            });\n\n            this.render('projects/topbar', {\n                into: 'application',\n                outlet: 'topbar',\n                controller: controller\n            });\n        }\n    });\n\n});","define('portia-web/routes/projects/index', ['exports', 'portia-web/routes/projects'], function (exports, ProjectRoute) {\n\n\t'use strict';\n\n\texports['default'] = ProjectRoute['default'];\n\n});","define('portia-web/routes/spider', ['exports', 'portia-web/routes/base-route'], function (exports, BaseRoute) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n        fixedToolbox: false,\n\n        model: function model(params) {\n            return this.get('slyd').loadSpider(params.spider_id);\n        },\n\n        afterModel: function afterModel() {\n            // Load the items.\n            var controller = this.controllerFor('spider');\n            return this.get('slyd').loadItems().then(function (items) {\n                controller.set('itemDefinitions', items);\n            });\n        },\n\n        renderTemplate: function renderTemplate() {\n            var controller = this.controllerFor('spider');\n            this.render('spider/toolbox', {\n                into: 'application',\n                outlet: 'main',\n                controller: controller\n            });\n\n            this.render('spider/topbar', {\n                into: 'application',\n                outlet: 'topbar',\n                controller: controller\n            });\n        }\n    });\n\n});","define('portia-web/routes/spider/index', ['exports', 'portia-web/routes/base-route'], function (exports, BaseRoute) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n        fixedToolbox: false,\n\n        model: function model() {\n            return this.modelFor('spider');\n        }\n    });\n\n});","define('portia-web/routes/template-items', ['exports', 'portia-web/routes/items'], function (exports, Items) {\n\n    'use strict';\n\n    exports['default'] = Items['default'].extend({\n        defaultControllerName: 'template-items'\n    });\n\n});","define('portia-web/routes/template', ['exports', 'ember', 'portia-web/routes/base-route'], function (exports, Ember, BaseRoute) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n\n        model: function model(params) {\n            var spider = this.modelFor('spider');\n            return this.get('slyd').loadTemplate(spider.get('name'), params.template_id);\n        },\n\n        afterModel: function afterModel() {\n            var controller = this.controllerFor('template');\n            var slyd = this.get('slyd');\n\n            // Load the items.\n            var itemsPromise = slyd.loadItems().then(function (items) {\n                controller.set('project_models.items', items);\n            });\n            // Load the extractors.\n            var extractorsPromise = slyd.loadExtractors().then(function (extractors) {\n                controller.set('project_models.extractors', extractors);\n            });\n            return Ember['default'].RSVP.all([itemsPromise, extractorsPromise]);\n        },\n\n        renderTemplate: function renderTemplate() {\n            var controller = this.controllerFor('template');\n            this.render('template/toolbox', {\n                into: 'application',\n                outlet: 'main',\n                controller: controller\n            });\n            this.render('template/topbar', {\n                into: 'application',\n                outlet: 'topbar',\n                controller: controller\n            });\n        }\n    });\n\n});","define('portia-web/routes/template/index', ['exports', 'portia-web/routes/base-route'], function (exports, BaseRoute) {\n\n    'use strict';\n\n    exports['default'] = BaseRoute['default'].extend({\n        fixedToolbox: false,\n\n        model: function model() {\n            return this.modelFor('template');\n        }\n    });\n\n});","define('portia-web/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"outlet\", [\"topbar\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"outlet\", [\"main\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, inline = hooks.inline, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);\n        var morph3 = dom.createMorphAt(fragment,5,5,contextualElement);\n        var morph4 = dom.createMorphAt(fragment,7,7,contextualElement);\n        var morph5 = dom.createMorphAt(fragment,8,8,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"top-bar\", [], {}, child0, null);\n        inline(env, morph1, context, \"outlet\", [\"conflictResolver\"], {});\n        inline(env, morph2, context, \"outlet\", [\"modal\"], {});\n        content(env, morph3, context, \"web-document-js\");\n        block(env, morph4, context, \"tool-box\", [], {}, child1, null);\n        content(env, morph5, context, \"bs-notifications\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/base-route', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/accordion-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"data-header\",\"true\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h4\");\n        dom.setAttribute(el2,\"style\",\"cursor: pointer;\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"a\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"section\");\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element1, [1]);\n        var element3 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(element2,1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element3, [1]),0,0);\n        element(env, element0, context, \"bind-attr\", [], {\"class\": get(env, context, \"panelHeaderClasses\")});\n        element(env, element1, context, \"bind-attr\", [], {\"class\": get(env, context, \"panelTitleClasses\")});\n        element(env, element2, context, \"bind-attr\", [], {\"class\": get(env, context, \"panelTogglerClasses\")});\n        content(env, morph0, context, \"view.title\");\n        element(env, element3, context, \"bind-attr\", [], {\"class\": get(env, context, \"panelBodyContainerClasses\")});\n        content(env, morph1, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/bread-crumbs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                content(env, morph0, context, \"crumb.label\");\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"i\");\n                dom.setAttribute(el1,\"class\",\"fa fa-icon fa-home\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"if\", [get(env, context, \"index\")], {}, child0, child1);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"link-to\", [get(env, context, \"crumb.path\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n              content(env, morph0, context, \"crumb.label\");\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"i\");\n              dom.setAttribute(el1,\"class\",\"fa fa-icon fa-home\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"if\", [get(env, context, \"index\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 2,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, subexpr = hooks.subexpr, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          var attrMorph0 = dom.createAttrMorph(element0, 'class');\n          set(env, context, \"crumb\", blockArguments[0]);\n          set(env, context, \"index\", blockArguments[1]);\n          attribute(env, attrMorph0, element0, \"class\", concat(env, [\"crumbs \", subexpr(env, context, \"if\", [get(env, context, \"crumb.isCurrent\"), \"current-crumb\", \"inactive-crumb\"], {})]));\n          block(env, morph0, context, \"if\", [get(env, context, \"crumb.linkable\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"class\",\"breadcrumb\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        block(env, morph0, context, \"each\", [get(env, context, \"breadCrumbs\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/bs-badge', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"content\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/bs-button', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [0]);\n          var attrMorph0 = dom.createAttrMorph(element0, 'class');\n          attribute(env, attrMorph0, element0, \"class\", get(env, context, \"activeIcon\"));\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"activeIcon\")], {}, child0, null);\n        content(env, morph1, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/bs-dropdown', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            inline(env, morph0, context, \"component\", [get(env, context, \"_action.component\")], {\"clicked\": \"close\", \"actionData\": get(env, context, \"_action\")});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"a\");\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element1 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(element1,0,0);\n              var attrMorph0 = dom.createAttrMorph(element1, 'title');\n              attribute(env, attrMorph0, element1, \"title\", concat(env, [get(env, context, \"_action.title\")]));\n              element(env, element1, context, \"action\", [\"openModal\", get(env, context, \"_action\")], {});\n              content(env, morph0, context, \"_action.text\");\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"a\");\n              dom.setAttribute(el1,\"target\",\"_blank\");\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(element0,0,0);\n              var attrMorph0 = dom.createAttrMorph(element0, 'href');\n              var attrMorph1 = dom.createAttrMorph(element0, 'title');\n              attribute(env, attrMorph0, element0, \"href\", concat(env, [get(env, context, \"_action.url\")]));\n              attribute(env, attrMorph1, element0, \"title\", concat(env, [get(env, context, \"_action.title\")]));\n              element(env, element0, context, \"action\", [\"close\"], {\"on\": \"mouseUp\"});\n              content(env, morph0, context, \"_action.text\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"if\", [get(env, context, \"_action.modal\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          set(env, context, \"_action\", blockArguments[0]);\n          block(env, morph0, context, \"if\", [get(env, context, \"_action.component\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"button\");\n        dom.setAttribute(el1,\"type\",\"button\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"i\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"class\",\"dropdown-menu pull-right\");\n        dom.setAttribute(el1,\"role\",\"menu\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"li\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, element = hooks.element, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var element3 = dom.childAt(element2, [1]);\n        var attrMorph0 = dom.createAttrMorph(element2, 'class');\n        var attrMorph1 = dom.createAttrMorph(element3, 'class');\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2, 1]),1,1);\n        attribute(env, attrMorph0, element2, \"class\", concat(env, [\"btn btn-default btn-xs dropdown-toggle \", get(env, context, \"toggle\")]));\n        element(env, element2, context, \"action\", [\"clicked\"], {});\n        attribute(env, attrMorph1, element3, \"class\", concat(env, [get(env, context, \"iconClasses\")]));\n        block(env, morph0, context, \"each\", [get(env, context, \"actions\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/bs-label', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"content\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/bs-message', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/bs-modal', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1]);\n          element(env, element1, context, \"bind-attr\", [], {\"class\": \"titleIconClasses\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"component\", [get(env, context, \"component\")], {\"data\": get(env, context, \"componentData\")});\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createUnsafeMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"body\");\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n              content(env, morph0, context, \"btn.label\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"bs-button\", [], {\"clicked\": get(env, context, \"btn.clicked\"), \"type\": get(env, context, \"btn.type\"), \"size\": get(env, context, \"btn.size\"), \"targetObject\": get(env, context, \"targetObject\")}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          element(env, element0, context, \"bind-attr\", [], {\"class\": \":modal-footer fullSizeButtons:modal-footer-full\"});\n          block(env, morph0, context, \"each\", [get(env, context, \"footerButtons\")], {\"keyword\": \"btn\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"modal-dialog\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"modal-content\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"modal-header\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"type\",\"button\");\n        dom.setAttribute(el4,\"data-dismiss\",\"modal\");\n        dom.setAttribute(el4,\"aria-hidden\",\"true\");\n        var el5 = dom.createTextNode(\"×\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"h4\");\n        dom.setAttribute(el4,\"class\",\"modal-title\");\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"modal-body\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0, 1]);\n        var element3 = dom.childAt(element2, [1]);\n        var element4 = dom.childAt(element3, [1]);\n        var element5 = dom.childAt(element3, [3]);\n        var morph0 = dom.createMorphAt(element5,1,1);\n        var morph1 = dom.createUnsafeMorphAt(element5,3,3);\n        var morph2 = dom.createMorphAt(dom.childAt(element2, [3]),1,1);\n        var morph3 = dom.createMorphAt(element2,5,5);\n        element(env, element4, context, \"bind-attr\", [], {\"class\": \":close allowClose::hide\"});\n        block(env, morph0, context, \"if\", [get(env, context, \"titleIconClasses\")], {}, child0, null);\n        content(env, morph1, context, \"title\");\n        block(env, morph2, context, \"if\", [get(env, context, \"component\")], {}, child1, child2);\n        block(env, morph3, context, \"if\", [get(env, context, \"footerButtons\")], {}, child3, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/bs-notification', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h4\");\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n          content(env, morph0, context, \"view.content.title\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"button\");\n        dom.setAttribute(el1,\"type\",\"button\");\n        dom.setAttribute(el1,\"class\",\"close\");\n        dom.setAttribute(el1,\"aria-label\",\"Close\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"aria-hidden\",\"true\");\n        var el3 = dom.createTextNode(\"×\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"p\");\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);\n        element(env, element0, context, \"action\", [\"close\"], {\"target\": \"view\"});\n        block(env, morph0, context, \"if\", [get(env, context, \"view.content.title\")], {}, child0, null);\n        content(env, morph1, context, \"view.content.message\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/closable-accordion', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/collapsible-text', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"class\",\"blue-label collapse-button\");\n            var el2 = dom.createTextNode(\" [+] \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"class\",\"blue-label collapse-button\");\n            var el2 = dom.createTextNode(\" [-] \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"if\", [get(env, context, \"collapsed\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"displayedText\");\n        block(env, morph1, context, \"if\", [get(env, context, \"collapsible\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/display-button-delete', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"yield\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"col-xs-10\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"col-xs-1 button-align-med\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);\n        block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"default\", \"class\": \"pattern\", \"type\": \"light\", \"size\": \"sm\", \"draggable\": true}, child0, null);\n        inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"delete\", \"clickedParam\": get(env, context, \"name\"), \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"size\": \"xs\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/display-button-edit-delete', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n             \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"fa fa-icon\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"text\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"bs-button\", [], {\"class\": \"pattern\", \"type\": \"light\", \"size\": \"sm\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"col-xs-10\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"col-xs-1 button-align-med\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);\n        block(env, morph0, context, \"inline-editable-text-field\", [], {\"text\": get(env, context, \"text\"), \"action\": \"saveText\", \"name\": get(env, context, \"name\"), \"hideIcon\": true}, child0, null);\n        inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"deleteText\", \"clickedParam\": get(env, context, \"name\"), \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"size\": \"xs\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/edit-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                Item: \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"item.display_name\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                                    \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"span\");\n              dom.setAttribute(el1,\"class\",\"editable-name\");\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n              content(env, morph0, context, \"field.name\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 2,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"row\");\n            dom.setAttribute(el1,\"style\",\"margin:0\");\n            var el2 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-xs-4 top-div\");\n            var el3 = dom.createTextNode(\"\\n                            \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"div\");\n            dom.setAttribute(el3,\"class\",\"field-name\");\n            var el4 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createComment(\"\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"                            \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-xs-4\");\n            var el3 = dom.createTextNode(\"\\n                            \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-xs-1\");\n            dom.setAttribute(el2,\"style\",\"text-align:center;\");\n            var el3 = dom.createTextNode(\"\\n                            \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-xs-1\");\n            dom.setAttribute(el2,\"style\",\"text-align:center;\");\n            var el3 = dom.createTextNode(\"\\n                            \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-xs-1\");\n            var el3 = dom.createTextNode(\"\\n                            \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                        \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);\n            var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n            var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);\n            var morph3 = dom.createMorphAt(dom.childAt(element0, [7]),1,1);\n            var morph4 = dom.createMorphAt(dom.childAt(element0, [9]),1,1);\n            set(env, context, \"field\", blockArguments[0]);\n            set(env, context, \"index\", blockArguments[1]);\n            block(env, morph0, context, \"inline-editable-text-field\", [], {\"validate\": \"validateFieldName\", \"text\": get(env, context, \"field.name\"), \"validation\": \"^[a-zA-Z0-9_-]+$\"}, child0, null);\n            inline(env, morph1, context, \"item-select\", [], {\"options\": get(env, context, \"extractionTypes\"), \"value\": get(env, context, \"field.type\")});\n            inline(env, morph2, context, \"check-box\", [], {\"checked\": get(env, context, \"field.required\")});\n            inline(env, morph3, context, \"check-box\", [], {\"checked\": get(env, context, \"field.vary\")});\n            inline(env, morph4, context, \"bs-button\", [], {\"size\": \"xs\", \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"clicked\": \"deleteField\", \"clickedParam\": get(env, context, \"field\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"row small-label\");\n          var el2 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-4\");\n          var el3 = dom.createTextNode(\"Field\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-3\");\n          var el3 = dom.createTextNode(\"Type\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-5\");\n          var el3 = dom.createTextNode(\"Required Vary\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"row\");\n          dom.setAttribute(el1,\"style\",\"color: #CCC;margin:0\");\n          var el2 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-4\");\n          var el3 = dom.createTextNode(\"url\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-4\");\n          var el3 = dom.createTextNode(\"url\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-1\");\n          var el3 = dom.createElement(\"input\");\n          dom.setAttribute(el3,\"type\",\"checkbox\");\n          dom.setAttribute(el3,\"checked\",\"true\");\n          dom.setAttribute(el3,\"disabled\",\"true\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-1\");\n          var el3 = dom.createElement(\"input\");\n          dom.setAttribute(el3,\"type\",\"checkbox\");\n          dom.setAttribute(el3,\"checked\",\"true\");\n          dom.setAttribute(el3,\"disabled\",\"true\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-1\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(dom.childAt(fragment, [3, 5, 0]),[],true); }\n          if (this.cachedFragment) { dom.repairClonedNode(dom.childAt(fragment, [3, 7, 0]),[],true); }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [3, 9]),0,0);\n          var morph1 = dom.createMorphAt(fragment,5,5,contextualElement);\n          dom.insertBoundary(fragment, null);\n          inline(env, morph0, context, \"bs-button\", [], {\"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"disabled\": true, \"size\": \"xs\"});\n          block(env, morph1, context, \"each\", [get(env, context, \"item.fields\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h5\");\n          var el2 = dom.createTextNode(\"No fields defined yet.\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"                Field\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"editable-item-container\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"style\",\"margin:2px 0px 0px 10px\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"style\",\"float:right\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"margin-top:20px\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"style\",\"text-align:center;margin-top:10px\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [0]);\n        var element2 = dom.childAt(element1, [1]);\n        var element3 = dom.childAt(element1, [3]);\n        var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element2, [3]),1,1);\n        var morph2 = dom.createMorphAt(element3,1,1);\n        var morph3 = dom.createMorphAt(dom.childAt(element3, [3]),1,1);\n        block(env, morph0, context, \"inline-editable-text-field\", [], {\"validate\": \"validateItemName\", \"text\": get(env, context, \"item.display_name\"), \"validation\": \"^[a-zA-Z0-9_-]+$\"}, child0, null);\n        inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"delete\", \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"size\": \"xs\"});\n        block(env, morph2, context, \"if\", [get(env, context, \"item.fields\")], {}, child1, child2);\n        block(env, morph3, context, \"bs-button\", [], {\"clicked\": \"addField\", \"icon\": \"fa fa-icon fa-plus\", \"type\": \"primary\", \"size\": \"sm\"}, child3, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/em-accordion-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"panel-heading\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"panel-title\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"accordion-toggle\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"panel-collapse collapse\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"panel-body\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h4\");\n        dom.setAttribute(el2,\"style\",\"cursor: pointer;\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"a\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [10]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element1, [1]);\n        var element3 = dom.childAt(fragment, [12]);\n        var element4 = dom.childAt(element3, [1]);\n        var morph0 = dom.createMorphAt(element2,1,1);\n        var morph1 = dom.createMorphAt(element4,0,0);\n        element(env, element0, context, \"bind-attr\", [], {\"class\": get(env, context, \"panelHeaderClasses\")});\n        element(env, element1, context, \"bind-attr\", [], {\"class\": get(env, context, \"panelTitleClasses\")});\n        element(env, element2, context, \"bind-attr\", [], {\"class\": get(env, context, \"panelTogglerClasses\")});\n        content(env, morph0, context, \"view.title\");\n        element(env, element3, context, \"bind-attr\", [], {\"class\": get(env, context, \"panelBodyContainerClasses\")});\n        element(env, element4, context, \"bind-attr\", [], {\"class\": get(env, context, \"panelBodyClasses\")});\n        content(env, morph1, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/extracted-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"style\",\"color:white;word-wrap:break-word;\");\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n            inline(env, morph0, context, \"collapsible-text\", [], {\"fullText\": get(env, context, \"value\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"style\",\"margin-bottom:2px\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"span\");\n          dom.setAttribute(el2,\"class\",\"small-label blue-label\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\":\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element3 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element3, [1]),0,0);\n          var morph1 = dom.createMorphAt(element3,3,3);\n          content(env, morph0, context, \"textField.name\");\n          block(env, morph1, context, \"each\", [get(env, context, \"textField.value\")], {\"keyword\": \"value\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"style\",\"color:white;word-wrap:break-word;\");\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin:10px;text-align:center\");\n            var el2 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"img\");\n            dom.setAttribute(el2,\"width\",\"200px\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element1 = dom.childAt(fragment, [3, 1]);\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n            var attrMorph0 = dom.createAttrMorph(element1, 'src');\n            content(env, morph0, context, \"value\");\n            attribute(env, attrMorph0, element1, \"src\", concat(env, [get(env, context, \"value\")]));\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"style\",\"margin-bottom:2px\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"span\");\n          dom.setAttribute(el2,\"class\",\"small-label blue-label\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\":\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element2 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),0,0);\n          var morph1 = dom.createMorphAt(element2,3,3);\n          content(env, morph0, context, \"imageField.name\");\n          block(env, morph1, context, \"each\", [get(env, context, \"imageField.value\")], {\"keyword\": \"value\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"span\");\n                dom.setAttribute(el1,\"style\",\"color:white;word-wrap:break-word;\");\n                var el2 = dom.createTextNode(\"\\n                            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                        \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n                inline(env, morph0, context, \"collapsible-text\", [], {\"fullText\": get(env, context, \"value\")});\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-bottom:2px\");\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"small-label green-label\");\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\":\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"                \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,0);\n              var morph1 = dom.createMorphAt(element0,3,3);\n              content(env, morph0, context, \"field.name\");\n              block(env, morph1, context, \"each\", [get(env, context, \"field.value\")], {\"keyword\": \"value\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-bottom:3px\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n            block(env, morph0, context, \"each\", [get(env, context, \"variant.fields\")], {\"keyword\": \"field\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h3\");\n          dom.setAttribute(el1,\"class\",\"important-label\");\n          dom.setAttribute(el1,\"style\",\"margin:3px 0px 2px 0px\");\n          var el2 = dom.createTextNode(\"Variants\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);\n          dom.insertBoundary(fragment, null);\n          block(env, morph0, context, \"each\", [get(env, context, \"variants\")], {\"keyword\": \"variant\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"text-align:left;margin-bottom:5px;\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"margin-bottom:2px\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"small-label yellow-label\");\n        var el4 = dom.createTextNode(\"URL:\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"link\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"small-label yellow-label\");\n        var el4 = dom.createTextNode(\"Matched template:\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"link\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline, content = hooks.content, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element4 = dom.childAt(fragment, [0]);\n        var element5 = dom.childAt(element4, [1, 3]);\n        var element6 = dom.childAt(element4, [3, 3]);\n        var morph0 = dom.createMorphAt(element5,1,1);\n        var morph1 = dom.createMorphAt(element6,1,1);\n        var morph2 = dom.createMorphAt(fragment,2,2,contextualElement);\n        var morph3 = dom.createMorphAt(fragment,3,3,contextualElement);\n        var morph4 = dom.createMorphAt(fragment,4,4,contextualElement);\n        dom.insertBoundary(fragment, null);\n        element(env, element5, context, \"action\", [\"loadUrl\", get(env, context, \"url\")], {});\n        inline(env, morph0, context, \"trim\", [get(env, context, \"url\"), 45], {});\n        element(env, element6, context, \"action\", [\"editTemplate\", get(env, context, \"matchedTemplate\")], {});\n        content(env, morph1, context, \"matchedTemplate\");\n        block(env, morph2, context, \"each\", [get(env, context, \"textFields\")], {\"keyword\": \"textField\"}, child0, null);\n        block(env, morph3, context, \"each\", [get(env, context, \"imageFields\")], {\"keyword\": \"imageField\"}, child1, null);\n        block(env, morph4, context, \"if\", [get(env, context, \"variants\")], {}, child2, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/extractor-dropzone', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/inline-editable-text-field', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"text-field\", [], {\"value\": get(env, context, \"text\"), \"width\": \"100%\", \"placeholder\": get(env, context, \"placeholder\"), \"saveOnExit\": true, \"action\": \"update\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"fa fa-icon\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.setAttribute(el1,\"class\",\"editable-name\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          var morph1 = dom.createMorphAt(element0,3,3);\n          content(env, morph0, context, \"yield\");\n          block(env, morph1, context, \"unless\", [get(env, context, \"hideIcon\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"editing\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/item-select', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"option\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, subexpr = hooks.subexpr, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          var attrMorph0 = dom.createAttrMorph(element0, 'value');\n          var attrMorph1 = dom.createAttrMorph(element0, 'selected');\n          attribute(env, attrMorph0, element0, \"value\", concat(env, [get(env, context, \"option.value\")]));\n          attribute(env, attrMorph1, element0, \"selected\", concat(env, [subexpr(env, context, \"if\", [get(env, context, \"option.selected\"), \"selected\", \"\"], {})]));\n          content(env, morph0, context, \"option.label\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"optionsList\")], {\"keyword\": \"option\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/j-breadcrumb', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"a\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        content(env, morph0, context, \"label\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/j-breadcrumbs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 2,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline, concat = hooks.concat, attribute = hooks.attribute;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [3]);\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          var attrMorph0 = dom.createAttrMorph(element0, 'class');\n          set(env, context, \"bc\", blockArguments[0]);\n          set(env, context, \"index\", blockArguments[1]);\n          inline(env, morph0, context, \"j-breadcrumb\", [], {\"hovered\": \"hovered\", \"clicked\": \"clicked\", \"info\": get(env, context, \"bc\"), \"index\": get(env, context, \"index\")});\n          attribute(env, attrMorph0, element0, \"class\", concat(env, [\"fa fa-icon fa-\", get(env, context, \"bc.separator\")]));\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"breadcrumbs\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/json-file-compare', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                inline(env, morph0, context, \"json-file-compare\", [], {\"json\": get(env, context, \"entry.json\"), \"path\": get(env, context, \"entry.path\"), \"conflictedKeyPaths\": get(env, context, \"conflictedKeyPaths\"), \"conflictOptionSelected\": \"conflictOptionSelected\", \"conflictOptionRejected\": \"conflictOptionRejected\", \"conflictOptionUpdated\": \"conflictOptionUpdated\", \"multi\": true});\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"each\", [get(env, context, \"entries\")], {\"keyword\": \"entry\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"span\");\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\",\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n              content(env, morph0, context, \"entry.value\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 2,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            set(env, context, \"entry\", blockArguments[0]);\n            set(env, context, \"index\", blockArguments[1]);\n            block(env, morph0, context, \"if\", [get(env, context, \"entry.conflict\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    [\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"]\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          block(env, morph0, context, \"each\", [get(env, context, \"entries\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"span\");\n                dom.setAttribute(el1,\"style\",\"color:#2d882d;font-weight:bold\");\n                var el2 = dom.createTextNode(\"RESOLVED\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"style\",\"margin:5px 0px 0px 40px;background:#AEA;\");\n                dom.setAttribute(el1,\"class\",\"conflict-option\");\n                var el2 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"span\");\n                dom.setAttribute(el2,\"style\",\"font-weight:bold;color:#2d882d;margin:5px\");\n                var el3 = dom.createTextNode(\" [CHANGE SELECTION] \");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\",\\n            \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element5 = dom.childAt(fragment, [3]);\n                var morph0 = dom.createMorphAt(element5,3,3);\n                element(env, element5, context, \"action\", [\"conflictOptionSelected\", get(env, context, \"path\"), get(env, context, \"null\")], {});\n                content(env, morph0, context, \"resolvedRepr\");\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            var child0 = (function() {\n              var child0 = (function() {\n                return {\n                  isHTMLBars: true,\n                  revision: \"Ember@1.11.4\",\n                  blockParams: 0,\n                  cachedFragment: null,\n                  hasRendered: false,\n                  build: function build(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode(\"                            \");\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createElement(\"span\");\n                    dom.setAttribute(el1,\"class\",\"fa fa-icon fa-check green-label\");\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode(\"\\n\");\n                    dom.appendChild(el0, el1);\n                    return el0;\n                  },\n                  render: function render(context, env, contextualElement) {\n                    var dom = env.dom;\n                    var hooks = env.hooks, get = hooks.get, element = hooks.element;\n                    dom.detectNamespace(contextualElement);\n                    var fragment;\n                    if (env.useFragmentCache && dom.canClone) {\n                      if (this.cachedFragment === null) {\n                        fragment = this.build(dom);\n                        if (this.hasRendered) {\n                          this.cachedFragment = fragment;\n                        } else {\n                          this.hasRendered = true;\n                        }\n                      }\n                      if (this.cachedFragment) {\n                        fragment = dom.cloneNode(this.cachedFragment, true);\n                      }\n                    } else {\n                      fragment = this.build(dom);\n                    }\n                    var element2 = dom.childAt(fragment, [1]);\n                    element(env, element2, context, \"action\", [\"conflictOptionSelected\", get(env, context, \"path\"), get(env, context, \"value.key\")], {});\n                    return fragment;\n                  }\n                };\n              }());\n              var child1 = (function() {\n                var child0 = (function() {\n                  return {\n                    isHTMLBars: true,\n                    revision: \"Ember@1.11.4\",\n                    blockParams: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    build: function build(dom) {\n                      var el0 = dom.createDocumentFragment();\n                      var el1 = dom.createTextNode(\"                                    \");\n                      dom.appendChild(el0, el1);\n                      var el1 = dom.createElement(\"span\");\n                      dom.setAttribute(el1,\"class\",\"fa fa-icon fa-times red-label\");\n                      dom.appendChild(el0, el1);\n                      var el1 = dom.createTextNode(\"\\n\");\n                      dom.appendChild(el0, el1);\n                      return el0;\n                    },\n                    render: function render(context, env, contextualElement) {\n                      var dom = env.dom;\n                      var hooks = env.hooks, get = hooks.get, element = hooks.element;\n                      dom.detectNamespace(contextualElement);\n                      var fragment;\n                      if (env.useFragmentCache && dom.canClone) {\n                        if (this.cachedFragment === null) {\n                          fragment = this.build(dom);\n                          if (this.hasRendered) {\n                            this.cachedFragment = fragment;\n                          } else {\n                            this.hasRendered = true;\n                          }\n                        }\n                        if (this.cachedFragment) {\n                          fragment = dom.cloneNode(this.cachedFragment, true);\n                        }\n                      } else {\n                        fragment = this.build(dom);\n                      }\n                      var element1 = dom.childAt(fragment, [1]);\n                      element(env, element1, context, \"action\", [\"conflictOptionRejected\", get(env, context, \"path\"), get(env, context, \"value.key\")], {});\n                      return fragment;\n                    }\n                  };\n                }());\n                return {\n                  isHTMLBars: true,\n                  revision: \"Ember@1.11.4\",\n                  blockParams: 0,\n                  cachedFragment: null,\n                  hasRendered: false,\n                  build: function build(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment(\"\");\n                    dom.appendChild(el0, el1);\n                    return el0;\n                  },\n                  render: function render(context, env, contextualElement) {\n                    var dom = env.dom;\n                    var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                    dom.detectNamespace(contextualElement);\n                    var fragment;\n                    if (env.useFragmentCache && dom.canClone) {\n                      if (this.cachedFragment === null) {\n                        fragment = this.build(dom);\n                        if (this.hasRendered) {\n                          this.cachedFragment = fragment;\n                        } else {\n                          this.hasRendered = true;\n                        }\n                      }\n                      if (this.cachedFragment) {\n                        fragment = dom.cloneNode(this.cachedFragment, true);\n                      }\n                    } else {\n                      fragment = this.build(dom);\n                    }\n                    var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n                    dom.insertBoundary(fragment, null);\n                    dom.insertBoundary(fragment, 0);\n                    block(env, morph0, context, \"unless\", [get(env, context, \"value.rejected\")], {}, child0, null);\n                    return fragment;\n                  }\n                };\n              }());\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                    \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  var el2 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"span\");\n                  dom.setAttribute(el2,\"style\",\"font-weight:bold\");\n                  var el3 = dom.createTextNode(\"\\n                            \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\":\\n\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"                        \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"span\");\n                  dom.setAttribute(el2,\"style\",\"word-break:break-word\");\n                  var el3 = dom.createTextNode(\"\\n                            \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createComment(\"\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                        \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, subexpr = hooks.subexpr, content = hooks.content, block = hooks.block;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var element3 = dom.childAt(fragment, [1]);\n                  var element4 = dom.childAt(element3, [1]);\n                  var attrMorph0 = dom.createAttrMorph(element3, 'class');\n                  var morph0 = dom.createMorphAt(element4,1,1);\n                  var morph1 = dom.createMorphAt(element4,3,3);\n                  var morph2 = dom.createMorphAt(element4,4,4);\n                  var attrMorph1 = dom.createAttrMorph(element4, 'class');\n                  var morph3 = dom.createMorphAt(dom.childAt(element3, [3]),1,1);\n                  attribute(env, attrMorph0, element3, \"class\", concat(env, [\"conflict-option \", get(env, context, \"value.state\")]));\n                  attribute(env, attrMorph1, element4, \"class\", concat(env, [subexpr(env, context, \"if\", [get(env, context, \"value.accepted\"), \"green-label\", \"\"], {})]));\n                  content(env, morph0, context, \"value.label\");\n                  block(env, morph1, context, \"unless\", [get(env, context, \"value.accepted\")], {}, child0, null);\n                  block(env, morph2, context, \"if\", [get(env, context, \"multi\")], {}, child1, null);\n                  content(env, morph3, context, \"value.value\");\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"span\");\n                dom.setAttribute(el1,\"style\",\"color:#ff3939;font-weight:bold\");\n                var el2 = dom.createTextNode(\"CONFLICT\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"style\",\"margin-left:40px;\");\n                var el2 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"            \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);\n                block(env, morph0, context, \"each\", [get(env, context, \"conflictValues\")], {\"keyword\": \"value\"}, child0, null);\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"if\", [get(env, context, \"resolved\")], {}, child0, child1);\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"style\",\"margin:5px 5px 0px 20px;\");\n                var el2 = dom.createTextNode(\"\\n                    \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"span\");\n                dom.setAttribute(el2,\"style\",\"font-weight:bold\");\n                var el3 = dom.createComment(\"\");\n                dom.appendChild(el2, el3);\n                var el3 = dom.createTextNode(\":\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element0 = dom.childAt(fragment, [1]);\n                var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,0);\n                var morph1 = dom.createMorphAt(element0,2,2);\n                content(env, morph0, context, \"entry.key\");\n                inline(env, morph1, context, \"json-file-compare\", [], {\"json\": get(env, context, \"entry.json\"), \"path\": get(env, context, \"entry.path\"), \"conflictedKeyPaths\": get(env, context, \"conflictedKeyPaths\"), \"conflictOptionRejected\": \"conflictOptionRejected\", \"conflictOptionUpdated\": \"conflictOptionUpdated\"});\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n              block(env, morph0, context, \"each\", [get(env, context, \"entries\")], {\"keyword\": \"entry\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"if\", [get(env, context, \"isConflict\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"value\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"if\", [get(env, context, \"isObject\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"isArray\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/label-with-tooltip', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/page-actions-editor', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                Continue\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"form-group form-group-sm\");\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"label\");\n            dom.setAttribute(el2,\"for\",\"actionType\");\n            dom.setAttribute(el2,\"class\",\"col-sm-4 control-label\");\n            var el3 = dom.createTextNode(\"Action type\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-sm-7\");\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"btn-center\");\n            var el3 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"        \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element4 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(dom.childAt(element4, [3]),1,1);\n            var morph1 = dom.createMorphAt(dom.childAt(element4, [5]),1,1);\n            inline(env, morph0, context, \"item-select\", [], {\"options\": get(env, context, \"actionTypes\"), \"id\": \"actionType\", \"value\": get(env, context, \"editing.type\")});\n            block(env, morph1, context, \"bs-button\", [], {\"clicked\": \"addContinue\", \"icon\": \"fa fa-icon fa-plus\", \"type\": \"primary\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"form-group form-group-sm\");\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"label\");\n              dom.setAttribute(el2,\"for\",\"actionType\");\n              dom.setAttribute(el2,\"class\",\"col-sm-4 control-label\");\n              var el3 = dom.createTextNode(\"Timeout (ms)\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-sm-7\");\n              var el3 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);\n              inline(env, morph0, context, \"input\", [], {\"value\": get(env, context, \"editing.timeout\"), \"pattern\": \"^[0-9]+$\", \"class\": \"form-control\"});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"form-group form-group-sm\");\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"label\");\n              dom.setAttribute(el2,\"for\",\"actionType\");\n              dom.setAttribute(el2,\"class\",\"col-sm-4 control-label\");\n              var el3 = dom.createTextNode(\"Selector\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-sm-7\");\n              var el3 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);\n              inline(env, morph0, context, \"input\", [], {\"value\": get(env, context, \"editing.selector\"), \"class\": \"form-control\"});\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"form-group form-group-sm\");\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"label\");\n              dom.setAttribute(el2,\"for\",\"actionType\");\n              dom.setAttribute(el2,\"class\",\"col-sm-4 control-label\");\n              var el3 = dom.createTextNode(\"Value\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-sm-7\");\n              var el3 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);\n              inline(env, morph0, context, \"input\", [], {\"value\": get(env, context, \"editing.value\"), \"class\": \"form-control\"});\n              return fragment;\n            }\n          };\n        }());\n        var child3 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"form-group form-group-sm\");\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"label\");\n                dom.setAttribute(el2,\"for\",\"actionType\");\n                dom.setAttribute(el2,\"class\",\"col-sm-4 control-label\");\n                var el3 = dom.createTextNode(\"Scroll %\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"div\");\n                dom.setAttribute(el2,\"class\",\"col-sm-7\");\n                var el3 = dom.createTextNode(\"\\n                \");\n                dom.appendChild(el2, el3);\n                var el3 = dom.createComment(\"\");\n                dom.appendChild(el2, el3);\n                var el3 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n        \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n    \");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);\n                inline(env, morph0, context, \"input\", [], {\"value\": get(env, context, \"editing.percent\"), \"pattern\": \"^[0-9]+$\", \"class\": \"form-control\"});\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"if\", [get(env, context, \"isEditingScroll\")], {}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        var child4 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            Back\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createElement(\"form\");\n            dom.setAttribute(el1,\"class\",\"form-horizontal\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"form-group form-group-sm\");\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"label\");\n            dom.setAttribute(el2,\"for\",\"actionType\");\n            dom.setAttribute(el2,\"class\",\"control-label\");\n            var el3 = dom.createTextNode(\"Run only in pages matching\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"form-group form-group-sm\");\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"label\");\n            dom.setAttribute(el2,\"for\",\"actionType\");\n            dom.setAttribute(el2,\"class\",\"control-label\");\n            var el3 = dom.createTextNode(\"Don't run in pages matching\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"btn-center\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element3 = dom.childAt(fragment, [0]);\n            var morph0 = dom.createMorphAt(element3,1,1);\n            var morph1 = dom.createMorphAt(element3,2,2);\n            var morph2 = dom.createMorphAt(dom.childAt(fragment, [2]),3,3);\n            var morph3 = dom.createMorphAt(dom.childAt(fragment, [4]),3,3);\n            var morph4 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);\n            block(env, morph0, context, \"if\", [get(env, context, \"isEditingWait\")], {}, child0, child1);\n            block(env, morph1, context, \"if\", [get(env, context, \"isEditingSet\")], {}, child2, child3);\n            inline(env, morph2, context, \"input\", [], {\"value\": get(env, context, \"editing.accept\"), \"class\": \"form-control\"});\n            inline(env, morph3, context, \"input\", [], {\"value\": get(env, context, \"editing.reject\"), \"class\": \"form-control\"});\n            block(env, morph4, context, \"bs-button\", [], {\"clicked\": \"back\", \"icon\": \"fa fa-icon fa-check\", \"type\": \"primary\"}, child4, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"if\", [get(env, context, \"addingNew\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createElement(\"code\");\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element1 = dom.childAt(fragment, [0]);\n                var morph0 = dom.createMorphAt(element1,0,0);\n                var attrMorph0 = dom.createAttrMorph(element1, 'title');\n                attribute(env, attrMorph0, element1, \"title\", concat(env, [get(env, context, \"action.selector\")]));\n                content(env, morph0, context, \"action.selector\");\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\" to \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"code\");\n                var el2 = dom.createTextNode(\"\\\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\\"\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element0 = dom.childAt(fragment, [1]);\n                var morph0 = dom.createMorphAt(element0,1,1);\n                var attrMorph0 = dom.createAttrMorph(element0, 'title');\n                attribute(env, attrMorph0, element0, \"title\", concat(env, [get(env, context, \"action.value\")]));\n                content(env, morph0, context, \"action.value\");\n                return fragment;\n              }\n            };\n          }());\n          var child2 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\" for \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"ms\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                content(env, morph0, context, \"action.timeout\");\n                return fragment;\n              }\n            };\n          }());\n          var child3 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\" to \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"code\");\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"%\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n                content(env, morph0, context, \"action.percent\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 2,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"page-action\");\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement, blockArguments) {\n              var dom = env.dom;\n              var hooks = env.hooks, set = hooks.set, content = hooks.content, get = hooks.get, block = hooks.block, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element2 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(element2,0,0);\n              var morph1 = dom.createMorphAt(element2,2,2);\n              var morph2 = dom.createMorphAt(element2,4,4);\n              var morph3 = dom.createMorphAt(element2,6,6);\n              var morph4 = dom.createMorphAt(element2,8,8);\n              var morph5 = dom.createMorphAt(element2,10,10);\n              var morph6 = dom.createMorphAt(element2,12,12);\n              var morph7 = dom.createMorphAt(element2,14,14);\n              set(env, context, \"action\", blockArguments[0]);\n              set(env, context, \"index\", blockArguments[1]);\n              content(env, morph0, context, \"reorder-handler\");\n              content(env, morph1, context, \"action.type\");\n              block(env, morph2, context, \"if\", [get(env, context, \"action.selector\")], {}, child0, null);\n              block(env, morph3, context, \"if\", [get(env, context, \"action.value\")], {}, child1, null);\n              block(env, morph4, context, \"if\", [get(env, context, \"action.timeout\")], {}, child2, null);\n              block(env, morph5, context, \"if\", [get(env, context, \"action.percent\")], {}, child3, null);\n              inline(env, morph6, context, \"bs-button\", [], {\"clicked\": \"deletePageAction\", \"clickedParam\": get(env, context, \"index\"), \"size\": \"xs\", \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\"});\n              inline(env, morph7, context, \"bs-button\", [], {\"clicked\": \"editPageAction\", \"clickedParam\": get(env, context, \"action\"), \"size\": \"xs\", \"icon\": \"fa fa-icon fa-cog\", \"type\": \"default\"});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h5\");\n              var el2 = dom.createTextNode(\"No actions have been recorded yet.\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"each\", [get(env, context, \"pageActions\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            Add action\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"btn-center\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"reorderable-list\", [], {\"reorder\": \"reorderPageAction\", \"class\": \"page-actions\"}, child0, null);\n          block(env, morph1, context, \"bs-button\", [], {\"clicked\": \"addNew\", \"icon\": \"fa fa-icon fa-plus\", \"type\": \"primary\"}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"editing\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/pin-toolbox-button', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"i\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [0]);\n          element(env, element0, context, \"bind-attr\", [], {\"class\": \"icon\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"icon\")], {}, child0, null);\n        content(env, morph1, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/text-area-with-button', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        Add urls\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"margin-top:5px;text-align:center\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);\n        inline(env, morph0, context, \"text-area\", [], {\"width\": \"93%\", \"splitlines\": true, \"clear\": get(env, context, \"clear\"), \"placeholder\": get(env, context, \"placeholder\"), \"action\": \"sendText\", \"update\": \"updateText\", \"resize\": \"vertical\", \"max_height\": \"300px\", \"value\": get(env, context, \"value\"), \"submitOnEnter\": false});\n        block(env, morph1, context, \"bs-button\", [], {\"clicked\": \"sendText\", \"icon\": \"fa fa-icon fa-plus\", \"disabled\": get(env, context, \"disabled\"), \"type\": \"primary\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/text-field-dropdown-button', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        New extractor\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"float:left;width:53%;\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"small-label\");\n        dom.setAttribute(el2,\"style\",\"margin:5px 0px 5px 0px\");\n        var el3 = dom.createTextNode(\"- or choose a type -\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"typeBox\");\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"float:left;width:40%;margin-top: 23px\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element0,1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [5]),0,0);\n        var morph2 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);\n        inline(env, morph0, context, \"text-field\", [], {\"width\": \"160px\", \"placeholder\": get(env, context, \"placeholder\"), \"action\": \"save\", \"update\": \"updateText\"});\n        inline(env, morph1, context, \"item-select\", [], {\"value\": get(env, context, \"default\"), \"options\": get(env, context, \"options\"), \"width\": \"160px\", \"changed\": \"updateOption\"});\n        block(env, morph2, context, \"bs-button\", [], {\"clicked\": \"save\", \"icon\": \"fa fa-icon fa-plus\", \"type\": \"primary\", \"size\": \"sm\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/text-field-with-button', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"col-xs-10\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"col-xs-2 button-align-sm\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);\n        inline(env, morph0, context, \"text-field\", [], {\"clear\": get(env, context, \"clear\"), \"width\": \"110%\", \"placeholder\": get(env, context, \"placeholder\"), \"action\": \"sendText\", \"update\": \"updateText\"});\n        inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"sendText\", \"icon\": \"fa fa-icon fa-plus\", \"disabled\": get(env, context, \"disabled\"), \"type\": \"primary\", \"size\": \"xs\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/tool-box', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"toolbox\");\n        dom.setAttribute(el1,\"class\",\"adjust-height\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"position:absolute;height:100%;z-index:10\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"container\");\n        dom.setAttribute(el3,\"style\",\"height:100%;width:400px;\");\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"bar\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"style\",\"position:absolute;left:8px;top:45%\");\n        var el6 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"arrow-left\");\n        var el7 = dom.createTextNode(\"\\n                    \");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"style\",\"float:left;margin:0px 5px 0px -35px\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"style\",\"padding-top:10px;margin-left:40px;padding-right:2px\");\n        var el5 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 1, 1]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);\n        inline(env, morph0, context, \"pin-toolbox-button\", [], {\"toolbox\": get(env, context, \"this.control\"), \"type\": \"clear\", \"icon\": \"fa fa-icon fa-thumb-tack unpinned\"});\n        content(env, morph1, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/top-bar', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"topbar\");\n        dom.setAttribute(el1,\"class\",\"navbar navbar-default\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"nav-container\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"pull-right label-align\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);\n        var morph1 = dom.createMorphAt(element0,3,3);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);\n        content(env, morph0, context, \"bread-crumbs\");\n        content(env, morph1, context, \"yield\");\n        inline(env, morph2, context, \"bs-label\", [], {\"type\": \"danger\", \"content\": \"Beta\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/web-document', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"scraped-doc\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"iframe\");\n        dom.setAttribute(el2,\"id\",\"scraped-doc-iframe\");\n        dom.setAttribute(el2,\"src\",\"/static/start.html\");\n        dom.setAttribute(el2,\"class\",\"adjust-height\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"canvas\");\n        dom.setAttribute(el2,\"id\",\"infocanvas\");\n        dom.setAttribute(el2,\"class\",\"doc-canvas adjust-height\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"id\",\"loader-container\");\n        dom.setAttribute(el2,\"class\",\"adjust-height\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"position:absolute;z-index:20;width:100%;pointer-events:none\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"id\",\"hovered-element-info\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/wizard-box', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"yield\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-xs-8\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-xs-2\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n        inline(env, morph0, context, \"text-field\", [], {\"width\": \"105%\", \"placeholder\": get(env, context, \"placeholder\"), \"action\": \"add\", \"update\": \"update\", \"clear\": true, \"value\": get(env, context, \"defaultValue\")});\n        block(env, morph1, context, \"bs-button\", [], {\"type\": \"info\", \"size\": \"sm\", \"clicked\": \"add\", \"icon\": \"fa fa-icon fa-plus\", \"disabled\": get(env, context, \"noText\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/components/zero-clipboard', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"yield\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,0,0);\n          var attrMorph0 = dom.createAttrMorph(element0, 'class');\n          attribute(env, attrMorph0, element0, \"class\", concat(env, [get(env, context, \"innerClass\")]));\n          content(env, morph0, context, \"label\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"hasBlock\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/conflicts', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/conflicts/resolver', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"position:relative;margin-right:400px;\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"width:100%;position:absolute;top:30px;z-index:1;font:12px 'Courier';overflow-y:auto\");\n        dom.setAttribute(el2,\"class\",\"adjust-height conflicted-file\");\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"style\",\"padding:10px\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]),1,1);\n        inline(env, morph0, context, \"json-file-compare\", [], {\"json\": get(env, context, \"controller.currentFileContents\"), \"conflictedKeyPaths\": get(env, context, \"controller.conflictedKeyPaths\"), \"conflictOptionSelected\": \"conflictOptionSelected\", \"conflictOptionRejected\": \"conflictOptionRejected\", \"conflictOptionUpdated\": \"conflictOptionUpdated\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/conflicts/toolbox', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"name\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"style\",\"margin:4px 0px 4px 0px\");\n          dom.setAttribute(el1,\"class\",\"pattern\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"displayConflictedFile\", \"clickedParam\": get(env, context, \"name\"), \"type\": \"light\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"margin:10px 0px 0px 10px\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h4\");\n        var el3 = dom.createTextNode(\"Conflicted files\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 3]),1,1);\n        block(env, morph0, context, \"each\", [get(env, context, \"conflictedFileNames\")], {\"keyword\": \"name\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/conflicts/topbar', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\tSave File\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"float:left;margin-top:2px\");\n        dom.setAttribute(el1,\"class\",\"nav-container\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"style\",\"margin-right:10px\");\n        var el3 = dom.createTextNode(\"Resolving \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"b\");\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);\n        var morph1 = dom.createMorphAt(element0,3,3);\n        content(env, morph0, context, \"controller.currentFileName\");\n        block(env, morph1, context, \"bs-button\", [], {\"clicked\": \"saveFile\", \"clickedParam\": get(env, context, \"controller.currentFileName\"), \"icon\": \"fa fa-icon fa-upload\", \"type\": \"primary\", \"disabled\": get(env, context, \"controller.saveDisabled\"), \"size\": \"sm\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/empty/toolbox', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"text-align:center;margin:10px 0px 10px 0px;\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h3\");\n        dom.setAttribute(el2,\"style\",\"color:#555; font-size: 1.2em\");\n        var el3 = dom.createTextNode(\"Portia Developer Preview\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/empty/topbar', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/experiments', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"label\");\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [1]);\n          var morph0 = dom.createMorphAt(element1,1,1);\n          var morph1 = dom.createMorphAt(element1,3,3);\n          var morph2 = dom.createMorphAt(element0,3,3);\n          inline(env, morph0, context, \"input\", [], {\"type\": \"checkbox\", \"checked\": get(env, context, \"experiment.newValue\")});\n          content(env, morph1, context, \"experiment.label\");\n          inline(env, morph2, context, \"inline-help\", [], {\"title\": get(env, context, \"experiment.helpText\")});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h4\");\n          var el2 = dom.createTextNode(\"No active experiments.\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Save and reload page\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"Cancel\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"margin: 20px 10px 20px 10px\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h2\");\n        var el3 = dom.createTextNode(\"Experiments\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"alert alert-warning\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"strong\");\n        var el4 = dom.createTextNode(\"Warning:\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        Experiments are features that we are considering adding to Portia. They might be unpolished, not thoughtfully tested or break in unexpected ways. If you find a bug, please let us know by using the button in the bottom right corner.\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"p\");\n        var el3 = dom.createTextNode(\" \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"p\");\n        var el3 = dom.createTextNode(\" \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element2,7,7);\n        var morph1 = dom.createMorphAt(element2,11,11);\n        var morph2 = dom.createMorphAt(element2,13,13);\n        block(env, morph0, context, \"each\", [get(env, context, \"model\")], {\"keyword\": \"experiment\"}, child0, child1);\n        block(env, morph1, context, \"bs-button\", [], {\"clicked\": \"save\", \"type\": \"primary\", \"disabled\": get(env, context, \"notChanged\")}, child2, null);\n        block(env, morph2, context, \"bs-button\", [], {\"clicked\": \"cancel\", \"type\": \"default\"}, child3, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/items/item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"yes\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"no\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"yes\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        var child3 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"no\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"tr\");\n            var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"td\");\n            var el3 = dom.createElement(\"h5\");\n            dom.setAttribute(el3,\"style\",\"color:#666\");\n            var el4 = dom.createComment(\"\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"td\");\n            var el3 = dom.createElement(\"h5\");\n            var el4 = dom.createComment(\"\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"td\");\n            var el3 = dom.createElement(\"h5\");\n            var el4 = dom.createComment(\"\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"td\");\n            var el3 = dom.createElement(\"h5\");\n            var el4 = dom.createComment(\"\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"td\");\n            dom.setAttribute(el2,\"style\",\"padding-bottom:4px;\");\n            var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 0]),0,0);\n            var morph1 = dom.createMorphAt(dom.childAt(element0, [3, 0]),0,0);\n            var morph2 = dom.createMorphAt(dom.childAt(element0, [5, 0]),0,0);\n            var morph3 = dom.createMorphAt(dom.childAt(element0, [7, 0]),0,0);\n            var morph4 = dom.createMorphAt(dom.childAt(element0, [9]),1,1);\n            content(env, morph0, context, \"field.name\");\n            content(env, morph1, context, \"field.type\");\n            block(env, morph2, context, \"if\", [get(env, context, \"field.required\")], {}, child0, child1);\n            block(env, morph3, context, \"if\", [get(env, context, \"field.vary\")], {}, child2, child3);\n            inline(env, morph4, context, \"bs-button\", [], {\"icon\": \"fa fa-icon fa-check-circle\", \"clicked\": \"fieldSelected\", \"clickedParam\": get(env, context, \"name\"), \"type\": \"primary\", \"size\": \"xs\"});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"table\");\n          dom.setAttribute(el1,\"style\",\"margin:0 auto;\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"tr\");\n          dom.setAttribute(el2,\"class\",\"small-label\");\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"td\");\n          var el4 = dom.createTextNode(\"Field\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"td\");\n          var el4 = dom.createTextNode(\"Type\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"td\");\n          var el4 = dom.createTextNode(\"Required\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"td\");\n          var el4 = dom.createTextNode(\"Vary\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);\n          block(env, morph0, context, \"each\", [get(env, context, \"fields\")], {\"keyword\": \"field\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h5\");\n          var el2 = dom.createTextNode(\"The item has no fields.\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h5\");\n        dom.setAttribute(el2,\"style\",\"text-align:center;\");\n        var el3 = dom.createTextNode(\"Choose an item field\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"text-align:center; margin-top:10px\");\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h4\");\n        var el4 = dom.createTextNode(\"Item \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [0, 3]);\n        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),1,1);\n        var morph1 = dom.createMorphAt(element1,3,3);\n        content(env, morph0, context, \"name\");\n        block(env, morph1, context, \"if\", [get(env, context, \"fields\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/items/items', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/items/toolbox', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"edit-item\", [], {\"item\": get(env, context, \"item\"), \"items\": get(env, context, \"model\"), \"extractionTypes\": get(env, context, \"extractionTypes\"), \"addField\": \"addField\", \"deleteField\": \"deleteField\", \"delete\": \"deleteItem\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t \t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h4\");\n          var el2 = dom.createTextNode(\"No items have been defined yet.\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\tItem\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\tSave changes\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\tDiscard Changes\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"margin:10px 0px 0px 10px\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h4\");\n        var el3 = dom.createTextNode(\"Items\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"scrolling-container\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"button-spacer\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 3]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element0, [3]);\n        var morph0 = dom.createMorphAt(element1,1,1);\n        var morph1 = dom.createMorphAt(element2,1,1);\n        var morph2 = dom.createMorphAt(element2,2,2);\n        var morph3 = dom.createMorphAt(element2,3,3);\n        element(env, element1, context, \"bind-attr\", [], {\"style\": \"full_box_style\"});\n        block(env, morph0, context, \"each\", [get(env, context, \"model\")], {\"keyword\": \"item\"}, child0, child1);\n        block(env, morph1, context, \"bs-button\", [], {\"clicked\": \"addItem\", \"icon\": \"fa fa-icon fa-plus\", \"type\": \"primary\", \"size\": \"sm\"}, child2, null);\n        block(env, morph2, context, \"bs-button\", [], {\"clicked\": \"saveChanges\", \"size\": \"sm\", \"icon\": \"fa fa-icon fa-save\", \"type\": \"primary\"}, child3, null);\n        block(env, morph3, context, \"bs-button\", [], {\"clicked\": \"undoChanges\", \"size\": \"sm\", \"icon\": \"fa fa-icon fa-reply\", \"type\": \"danger\"}, child4, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/loading', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"position:fixed; width:100%; left:0%; height:100%; background:linear-gradient(to bottom, rgba(0,0,0,0.15), rgba(0,0,0,0.05));\");\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h3\");\n        dom.setAttribute(el2,\"style\",\"text-align:left; margin:50px 0px 0px 20px; color:#FFF; width:200px; font-size: 1.2em\");\n        var el3 = dom.createTextNode(\"Loading. Please wait...\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/project', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/project/toolbox', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\tProject: \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"slyd.project\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"inline-editable-text-field\", [], {\"text\": get(env, context, \"slyd.project\"), \"validation\": \"^[a-zA-Z0-9_-]+$\", \"name\": get(env, context, \"slyd.project\"), \"action\": \"rename\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h4\");\n          var el2 = dom.createTextNode(\"Project: \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          content(env, morph0, context, \"project_name\");\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"bs-dropdown\", [], {\"actions\": get(env, context, \"additionalActions\")});\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\t\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"spider\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"row\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-9 clickable-url\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"col-xs-3 button-align\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),1,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),1,1);\n          block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"editSpider\", \"clickedParam\": get(env, context, \"spider\"), \"type\": \"light\"}, child0, null);\n          inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"deleteSpider\", \"size\": \"sm\", \"clickedParam\": get(env, context, \"spider\"), \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\"});\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"h4\");\n            var el2 = dom.createTextNode(\"No Spiders matching \\\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\\" found in this project.\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n            content(env, morph0, context, \"controller.filterSpider\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"h4\");\n            var el2 = dom.createTextNode(\"No spiders for this project.\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"if\", [get(env, context, \"controller.filterSpider\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child5 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\tPublish changes\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\tDiscard Changes\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"\t\t\t\t\t\tDeploy\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"text-align:center;font-size:1.1em;margin-top:10px\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\t\t\t\t\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n              block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"deployProject\", \"size\": \"sm\", \"icon\": \"fa fa-icon fa-upload\", \"type\": \"primary\", \"disabled\": get(env, context, \"controller.isDeploying\"), \"processing\": get(env, context, \"controller.isDeploying\")}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"if\", [get(env, context, \"capabilities.deploy_projects\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"button-spacer\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          var morph1 = dom.createMorphAt(element0,2,2);\n          var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);\n          dom.insertBoundary(fragment, null);\n          block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"publishProject\", \"size\": \"sm\", \"icon\": \"fa fa-icon fa-upload\", \"type\": \"primary\", \"disabled\": get(env, context, \"controller.noChanges\"), \"processing\": get(env, context, \"controller.isPublishing\")}, child0, null);\n          block(env, morph1, context, \"bs-button\", [], {\"clicked\": \"discardChanges\", \"size\": \"sm\", \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"disabled\": get(env, context, \"controller.noChanges\")}, child1, null);\n          block(env, morph2, context, \"unless\", [get(env, context, \"controller.hasChanges\")], {}, child2, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"section\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"text-align:center;font-size:1.1em;margin-bottom:5px\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h4\");\n        var el3 = dom.createTextNode(\"Spiders\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"pull-right\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"input-group col-xs-11\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"input-group-addon\");\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"fa fa-search\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"scrolling-container\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var element3 = dom.childAt(element2, [7]);\n        var element4 = dom.childAt(element3, [3]);\n        var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element2, [5]),1,1);\n        var morph2 = dom.createMorphAt(dom.childAt(element3, [1]),1,1);\n        var morph3 = dom.createMorphAt(element4,1,1);\n        var morph4 = dom.createMorphAt(element2,9,9);\n        block(env, morph0, context, \"if\", [get(env, context, \"capabilities.rename_projects\")], {}, child0, child1);\n        block(env, morph1, context, \"if\", [get(env, context, \"additionalActions\")], {}, child2, null);\n        inline(env, morph2, context, \"input\", [], {\"value\": get(env, context, \"filterSpider\"), \"class\": \"form-control\", \"placeholder\": \"Filter Spiders\"});\n        element(env, element4, context, \"bind-attr\", [], {\"style\": \"full_box_style\"});\n        block(env, morph3, context, \"each\", [get(env, context, \"filteredSpiders\")], {\"keyword\": \"spider\"}, child3, child4);\n        block(env, morph4, context, \"if\", [get(env, context, \"capabilities.version_control\")], {}, child5, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/project/topbar', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\tNew Spider\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"nav-container\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        block(env, morph0, context, \"wizard-box\", [], {\"action\": \"addSpider\", \"placeholder\": \"Enter page URL\", \"defaultValue\": get(env, context, \"siteWizard\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/projects', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/projects/toolbox', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\t\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n              content(env, morph0, context, \"project.name\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"col-xs-9 clickable-url\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"col-xs-3 button-align\");\n            var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);\n            block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"openProject\", \"clickedParam\": get(env, context, \"project.id\"), \"type\": \"light\"}, child0, null);\n            inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"deleteProject\", \"clickedParam\": get(env, context, \"project.id\"), \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"size\": \"sm\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\t\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n              content(env, morph0, context, \"project.name\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"col-xs-11 clickable-url full-size\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\t\t\t\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n            block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"openProject\", \"clickedParam\": get(env, context, \"project.id\"), \"type\": \"light\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"row\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          block(env, morph0, context, \"if\", [get(env, context, \"capabilities.delete_projects\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h5\");\n          var el2 = dom.createTextNode(\"No projects have been created yet.\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"margin:10px 0px 0px 10px\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"margin-top:10px\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h4\");\n        var el3 = dom.createTextNode(\"Open project\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"scrolling-container\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 5]);\n        var morph0 = dom.createMorphAt(element0,1,1);\n        element(env, element0, context, \"bind-attr\", [], {\"style\": \"full_box_style\"});\n        block(env, morph0, context, \"each\", [get(env, context, \"displayProjects\")], {\"keyword\": \"project\"}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/projects/topbar', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\tStart\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"wizard-box\", [], {\"action\": \"createProject\", \"placeholder\": \"Enter site URL\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"float:left;margin-top:2px\");\n        dom.setAttribute(el1,\"class\",\"nav-container\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        block(env, morph0, context, \"if\", [get(env, context, \"capabilities.create_projects\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/spider', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/spider/toolbox', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            Spider: \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"model.name\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"inline-editable-text-field\", [], {\"text\": get(env, context, \"model.name\"), \"validation\": \"^[a-zA-Z0-9_\\\\.-]+$\", \"name\": get(env, context, \"model.name\"), \"action\": \"rename\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h4\");\n          var el2 = dom.createTextNode(\"Spider: \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          content(env, morph0, context, \"model.name\");\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                    \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n              content(env, morph0, context, \"editAllStartUrlsText\");\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                content(env, morph0, context, \"url\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"row\");\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-xs-9 clickable-url\");\n              var el3 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"                    \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-xs-3 button-align\");\n              var el3 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element16 = dom.childAt(fragment, [1]);\n              var element17 = dom.childAt(element16, [3]);\n              var morph0 = dom.createMorphAt(dom.childAt(element16, [1]),1,1);\n              var morph1 = dom.createMorphAt(element17,1,1);\n              var morph2 = dom.createMorphAt(element17,3,3);\n              block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"loadUrl\", \"clickedParam\": get(env, context, \"url\"), \"type\": \"light\", \"title\": get(env, context, \"url\"), \"popoverPlacement\": \"left\"}, child0, null);\n              inline(env, morph1, context, \"copy-clipboard\", [], {\"text\": get(env, context, \"url\")});\n              inline(env, morph2, context, \"bs-button\", [], {\"clicked\": \"deleteStartUrl\", \"clickedParam\": get(env, context, \"url\"), \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"size\": \"xs\"});\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h5\");\n              var el2 = dom.createTextNode(\"No start pages for this spider.\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        var child3 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"style\",\"margin-top:10px\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"style\",\"margin-top:5px\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"style\",\"margin-top:5px\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element15 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(element15,3,3);\n              var morph1 = dom.createMorphAt(element15,7,7);\n              var morph2 = dom.createMorphAt(element15,11,11);\n              element(env, element15, context, \"bind-attr\", [], {\"style\": \"ex_tiny_box_style\"});\n              inline(env, morph0, context, \"text-field\", [], {\"value\": get(env, context, \"loginUrl\"), \"name\": \"loginUrl\", \"width\": \"94%\", \"placeholder\": \"Login URL\", \"action\": \"updateLoginInfo\", \"update\": \"addInitRequest\"});\n              inline(env, morph1, context, \"text-field\", [], {\"value\": get(env, context, \"loginUser\"), \"name\": \"loginUser\", \"width\": \"94%\", \"placeholder\": \"Login user\", \"action\": \"updateLoginInfo\", \"update\": \"addInitRequest\"});\n              inline(env, morph2, context, \"text-field\", [], {\"value\": get(env, context, \"loginPassword\"), \"name\": \"loginPassword\", \"width\": \"94%\", \"placeholder\": \"Login password\", \"action\": \"updateLoginInfo\", \"update\": \"addInitRequest\"});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"row\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-xs-8\");\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"h4\");\n            var el4 = dom.createTextNode(\"Start Pages\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-xs-4 start-url-badge button-spacer\");\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"class\",\"important-label\");\n            var el3 = dom.createTextNode(\"Select country code\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"class\",\"important-label\");\n            var el3 = dom.createTextNode(\"Perform login\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element18 = dom.childAt(fragment, [1, 3]);\n            var element19 = dom.childAt(fragment, [3]);\n            var element20 = dom.childAt(fragment, [9]);\n            var morph0 = dom.createMorphAt(element18,1,1);\n            var morph1 = dom.createMorphAt(element18,3,3);\n            var morph2 = dom.createMorphAt(element19,1,1);\n            var morph3 = dom.createMorphAt(fragment,5,5,contextualElement);\n            var morph4 = dom.createMorphAt(dom.childAt(fragment, [7]),3,3);\n            var morph5 = dom.createMorphAt(element20,3,3);\n            var morph6 = dom.createMorphAt(element20,5,5);\n            var morph7 = dom.createMorphAt(fragment,11,11,contextualElement);\n            inline(env, morph0, context, \"bs-badge\", [], {\"class\": \"pull-right btn-primary\", \"content\": get(env, context, \"startUrlCount\")});\n            block(env, morph1, context, \"bs-button\", [], {\"type\": get(env, context, \"editAllStartUrlsType\"), \"clicked\": get(env, context, \"editAllStartUrlsAction\"), \"size\": \"xs\", \"disabled\": get(env, context, \"hasStartUrls\"), \"class\": \"pull-right\"}, child0, null);\n            element(env, element19, context, \"bind-attr\", [], {\"style\": \"tiny_box_style\"});\n            block(env, morph2, context, \"each\", [get(env, context, \"model.start_urls\")], {\"keyword\": \"url\"}, child1, child2);\n            inline(env, morph3, context, \"text-area-with-button\", [], {\"placeholder\": \"Enter one or multiple start page urls here\", \"action\": get(env, context, \"startUrlsAction\"), \"reset\": true, \"value\": get(env, context, \"startUrls\")});\n            inline(env, morph4, context, \"item-select\", [], {\"options\": get(env, context, \"countryCodes\"), \"value\": get(env, context, \"countryCode\"), \"changed\": \"addCountryCode\", \"width\": \"82px\", \"name\": get(env, context, \"index\"), \"addSelected\": true});\n            inline(env, morph5, context, \"check-box\", [], {\"checked\": get(env, context, \"model.performLogin\"), \"name\": \"performLoginCheck\"});\n            inline(env, morph6, context, \"inline-help\", [], {\"message\": \"perform_login\"});\n            block(env, morph7, context, \"if\", [get(env, context, \"model.performLogin\")], {}, child3, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                    Detect Cookies\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"h4\");\n              var el3 = dom.createTextNode(\"English cookie configuration \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"h4\");\n              var el3 = dom.createTextNode(\"Arabic cookie configuration \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n              dom.setAttribute(el1,\"class\",\"btn-center\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n              dom.setAttribute(el1,\"class\",\"dvTable\");\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element11 = dom.childAt(fragment, [1]);\n              var element12 = dom.childAt(fragment, [3]);\n              var morph0 = dom.createMorphAt(element11,3,3);\n              var morph1 = dom.createMorphAt(element11,5,5);\n              var morph2 = dom.createMorphAt(element12,3,3);\n              var morph3 = dom.createMorphAt(element12,5,5);\n              var morph4 = dom.createMorphAt(dom.childAt(fragment, [5]),1,1);\n              inline(env, morph0, context, \"text-field\", [], {\"placeholder\": \"Enter cookie name\", \"action\": get(env, context, \"enCookieNameAction\"), \"update\": get(env, context, \"enCookieNameAction\"), \"reset\": true, \"value\": get(env, context, \"enCookieName\"), \"width\": \"40%\"});\n              inline(env, morph1, context, \"text-field\", [], {\"placeholder\": \"Enter cookie value\", \"action\": get(env, context, \"enCookieValueAction\"), \"update\": get(env, context, \"enCookieValueAction\"), \"reset\": true, \"value\": get(env, context, \"enCookieValue\"), \"width\": \"40%\"});\n              inline(env, morph2, context, \"text-field\", [], {\"placeholder\": \"Enter cookie name\", \"action\": get(env, context, \"arCookieNameAction\"), \"update\": get(env, context, \"arCookieNameAction\"), \"reset\": true, \"value\": get(env, context, \"arCookieName\"), \"width\": \"40%\"});\n              inline(env, morph3, context, \"text-field\", [], {\"placeholder\": \"Enter cookie value\", \"action\": get(env, context, \"arCookieValueAction\"), \"update\": get(env, context, \"arCookieValueAction\"), \"reset\": true, \"value\": get(env, context, \"arCookieValue\"), \"width\": \"40%\"});\n              block(env, morph4, context, \"bs-button\", [], {\"clicked\": \"detectCookies\", \"clickedParam\": get(env, context, \"this\"), \"type\": \"primary\", \"title\": \"Detect Cookies\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"h4\");\n            var el3 = dom.createTextNode(\"English URL configuration \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"h4\");\n            var el3 = dom.createTextNode(\"Arabic URL configuration \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"class\",\"important-label\");\n            var el3 = dom.createTextNode(\"Use Cookies\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element13 = dom.childAt(fragment, [1]);\n            var element14 = dom.childAt(fragment, [3]);\n            var morph0 = dom.createMorphAt(element13,3,3);\n            var morph1 = dom.createMorphAt(element13,5,5);\n            var morph2 = dom.createMorphAt(element14,3,3);\n            var morph3 = dom.createMorphAt(element14,5,5);\n            var morph4 = dom.createMorphAt(dom.childAt(fragment, [5]),3,3);\n            var morph5 = dom.createMorphAt(fragment,7,7,contextualElement);\n            inline(env, morph0, context, \"text-field\", [], {\"placeholder\": \"Enter merchant English url\", \"action\": get(env, context, \"englishUrlAction\"), \"update\": get(env, context, \"englishUrlAction\"), \"reset\": true, \"value\": get(env, context, \"englishUrl\"), \"width\": \"94%\"});\n            inline(env, morph1, context, \"text-field\", [], {\"placeholder\": \"Enter url args\", \"action\": get(env, context, \"englishUrlArgsAction\"), \"update\": get(env, context, \"englishUrlArgsAction\"), \"reset\": true, \"value\": get(env, context, \"englishUrlArgs\"), \"width\": \"94%\"});\n            inline(env, morph2, context, \"text-field\", [], {\"placeholder\": \"Enter merchant Arabic url\", \"action\": get(env, context, \"arabicUrlAction\"), \"update\": get(env, context, \"arabicUrlAction\"), \"reset\": true, \"value\": get(env, context, \"arabicUrl\"), \"width\": \"94%\"});\n            inline(env, morph3, context, \"text-field\", [], {\"placeholder\": \"Enter url args\", \"action\": get(env, context, \"arabicUrlArgsAction\"), \"update\": get(env, context, \"arabicUrlArgsAction\"), \"reset\": true, \"value\": get(env, context, \"arabicUrlArgs\"), \"width\": \"94%\"});\n            inline(env, morph4, context, \"check-box\", [], {\"checked\": get(env, context, \"model.cookies_enabled\"), \"action\": get(env, context, \"toggleCookiesAction\")});\n            block(env, morph5, context, \"if\", [get(env, context, \"model.cookies_enabled\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                    Detect Cookies\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"h4\");\n              var el3 = dom.createTextNode(\"Currency cookie configuration \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n              dom.setAttribute(el1,\"class\",\"btn-center\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n              dom.setAttribute(el1,\"class\",\"dvTable\");\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element10 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(element10,3,3);\n              var morph1 = dom.createMorphAt(element10,5,5);\n              var morph2 = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);\n              inline(env, morph0, context, \"text-field\", [], {\"placeholder\": \"Enter cookie name\", \"action\": get(env, context, \"currencyCookieNameAction\"), \"update\": get(env, context, \"currencyCookieNameAction\"), \"reset\": true, \"value\": get(env, context, \"currencyCookieName\"), \"width\": \"40%\"});\n              inline(env, morph1, context, \"text-field\", [], {\"placeholder\": \"Enter cookie value\", \"action\": get(env, context, \"currencyCookieValueAction\"), \"update\": get(env, context, \"currencyCookieValueAction\"), \"reset\": true, \"value\": get(env, context, \"currencyCookieValue\"), \"width\": \"40%\"});\n              block(env, morph2, context, \"bs-button\", [], {\"clicked\": \"detectCookies\", \"clickedParam\": get(env, context, \"this\"), \"type\": \"primary\", \"title\": \"Detect Cookies\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:5px\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"class\",\"important-label\");\n            var el3 = dom.createTextNode(\"Select currency code \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:20px\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"class\",\"important-label\");\n            var el3 = dom.createTextNode(\"Use Cookies\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);\n            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),3,3);\n            var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);\n            inline(env, morph0, context, \"item-select\", [], {\"options\": get(env, context, \"currencyCodes\"), \"value\": get(env, context, \"currencyCode\"), \"changed\": \"addCurrencyCode\", \"width\": \"82px\", \"name\": get(env, context, \"index\"), \"addSelected\": true});\n            inline(env, morph1, context, \"check-box\", [], {\"checked\": get(env, context, \"model.use_currency_cookies\"), \"action\": get(env, context, \"toggleCurrencyCookiesAction\")});\n            block(env, morph2, context, \"if\", [get(env, context, \"model.use_currency_cookies\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child3 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:10px;margin-bottom:10px\");\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"important-label\");\n              var el3 = dom.createTextNode(\"Respect nofollow\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n              inline(env, morph0, context, \"check-box\", [], {\"checked\": get(env, context, \"model.respect_nofollow\"), \"name\": \"respectNoFollow\"});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 2,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement, blockArguments) {\n                var dom = env.dom;\n                var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                set(env, context, \"pattern\", blockArguments[0]);\n                set(env, context, \"index\", blockArguments[1]);\n                inline(env, morph0, context, \"display-button-edit-delete\", [], {\"save\": \"editFollowPattern\", \"delete\": \"deleteFollowPattern\", \"text\": get(env, context, \"pattern\"), \"name\": get(env, context, \"index\")});\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"col-xs-12\");\n                var el2 = dom.createTextNode(\"\\n                            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"h5\");\n                var el3 = dom.createTextNode(\"No follow patterns defined yet.\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                        \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          var child2 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 2,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement, blockArguments) {\n                var dom = env.dom;\n                var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                set(env, context, \"pattern\", blockArguments[0]);\n                set(env, context, \"index\", blockArguments[1]);\n                inline(env, morph0, context, \"display-button-edit-delete\", [], {\"save\": \"editExcludePattern\", \"delete\": \"deleteExcludePattern\", \"text\": get(env, context, \"pattern\"), \"name\": get(env, context, \"index\")});\n                return fragment;\n              }\n            };\n          }());\n          var child3 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"col-xs-12\");\n                var el2 = dom.createTextNode(\"\\n                            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"h5\");\n                var el3 = dom.createTextNode(\"No exclude patterns defined yet.\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                        \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h4\");\n              var el2 = dom.createTextNode(\"Follow links that match these patterns\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"                \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h4\");\n              var el2 = dom.createTextNode(\"Exclude links that match these patterns\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"                \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, inline = hooks.inline, element = hooks.element, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element5 = dom.childAt(fragment, [5]);\n              var element6 = dom.childAt(fragment, [17]);\n              var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);\n              var morph1 = dom.createMorphAt(element5,1,1);\n              var morph2 = dom.createMorphAt(fragment,9,9,contextualElement);\n              var morph3 = dom.createMorphAt(fragment,15,15,contextualElement);\n              var morph4 = dom.createMorphAt(element6,1,1);\n              var morph5 = dom.createMorphAt(fragment,21,21,contextualElement);\n              inline(env, morph0, context, \"inline-help\", [], {\"message\": \"follow_links\"});\n              element(env, element5, context, \"bind-attr\", [], {\"style\": \"ex_tiny_box_style\"});\n              block(env, morph1, context, \"each\", [get(env, context, \"model.follow_patterns\")], {}, child0, child1);\n              inline(env, morph2, context, \"regex-text-field-with-button\", [], {\"action\": \"addFollowPattern\", \"placeholder\": \"New follow pattern\", \"reset\": true});\n              inline(env, morph3, context, \"inline-help\", [], {\"message\": \"exclude_links\"});\n              element(env, element6, context, \"bind-attr\", [], {\"style\": \"ex_tiny_box_style\"});\n              block(env, morph4, context, \"each\", [get(env, context, \"model.exclude_patterns\")], {}, child2, child3);\n              inline(env, morph5, context, \"regex-text-field-with-button\", [], {\"action\": \"addExcludePattern\", \"placeholder\": \"New exclude pattern\", \"reset\": true});\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 2,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement, blockArguments) {\n                var dom = env.dom;\n                var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                set(env, context, \"pattern\", blockArguments[0]);\n                set(env, context, \"index\", blockArguments[1]);\n                inline(env, morph0, context, \"display-button-edit-delete\", [], {\"save\": \"editJSEnablePattern\", \"delete\": \"deleteJSEnablePattern\", \"text\": get(env, context, \"pattern\"), \"name\": get(env, context, \"index\")});\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"col-xs-12\");\n                var el2 = dom.createTextNode(\"\\n                            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"h5\");\n                var el3 = dom.createTextNode(\"No JS enabled patterns defined yet.\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                        \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          var child2 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 2,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement, blockArguments) {\n                var dom = env.dom;\n                var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                set(env, context, \"pattern\", blockArguments[0]);\n                set(env, context, \"index\", blockArguments[1]);\n                inline(env, morph0, context, \"display-button-edit-delete\", [], {\"save\": \"editJSDisablePattern\", \"delete\": \"deleteJSDisablePattern\", \"text\": get(env, context, \"pattern\"), \"name\": get(env, context, \"index\")});\n                return fragment;\n              }\n            };\n          }());\n          var child3 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"col-xs-12\");\n                var el2 = dom.createTextNode(\"\\n                            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"h5\");\n                var el3 = dom.createTextNode(\"No JS disabled patterns defined yet.\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n                        \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h4\");\n              var el2 = dom.createTextNode(\"Enable JS for links that match these patterns\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"                \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h4\");\n              var el2 = dom.createTextNode(\"Disable JS for links that match these patterns\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"                \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, inline = hooks.inline, element = hooks.element, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element3 = dom.childAt(fragment, [5]);\n              var element4 = dom.childAt(fragment, [17]);\n              var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);\n              var morph1 = dom.createMorphAt(element3,1,1);\n              var morph2 = dom.createMorphAt(fragment,9,9,contextualElement);\n              var morph3 = dom.createMorphAt(fragment,15,15,contextualElement);\n              var morph4 = dom.createMorphAt(element4,1,1);\n              var morph5 = dom.createMorphAt(fragment,21,21,contextualElement);\n              inline(env, morph0, context, \"inline-help\", [], {\"message\": \"enable_js_for_links\"});\n              element(env, element3, context, \"bind-attr\", [], {\"style\": \"ex_tiny_box_style\"});\n              block(env, morph1, context, \"each\", [get(env, context, \"model.js_enable_patterns\")], {}, child0, child1);\n              inline(env, morph2, context, \"regex-text-field-with-button\", [], {\"action\": \"addJSEnablePattern\", \"placeholder\": \"New JS enabled pattern\", \"reset\": true});\n              inline(env, morph3, context, \"inline-help\", [], {\"message\": \"disable_js_for_links\"});\n              element(env, element4, context, \"bind-attr\", [], {\"style\": \"ex_tiny_box_style\"});\n              block(env, morph4, context, \"each\", [get(env, context, \"model.js_disable_patterns\")], {}, child2, child3);\n              inline(env, morph5, context, \"regex-text-field-with-button\", [], {\"action\": \"addJSDisablePattern\", \"placeholder\": \"New JS disabled pattern\", \"reset\": true});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"style\",\"margin-top:10px\");\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"span\");\n            dom.setAttribute(el3,\"class\",\"important-label\");\n            var el4 = dom.createTextNode(\"Overlay blocked links\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"ul\");\n            dom.setAttribute(el2,\"class\",\"list-group small-group\");\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"li\");\n            dom.setAttribute(el3,\"class\",\"list-group-item\");\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"h4\");\n            var el5 = dom.createTextNode(\"Key:\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"li\");\n            dom.setAttribute(el3,\"class\",\"list-group-item\");\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"span\");\n            dom.setAttribute(el4,\"class\",\"fa fa-square will-follow\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                    Followed\\n                \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"li\");\n            dom.setAttribute(el3,\"class\",\"list-group-item\");\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"span\");\n            dom.setAttribute(el4,\"class\",\"fa fa-square maybe-follow\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                    Followed when Javascript is enabled\\n                \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"li\");\n            dom.setAttribute(el3,\"class\",\"list-group-item\");\n            var el4 = dom.createTextNode(\"\\n                    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"span\");\n            dom.setAttribute(el4,\"class\",\"fa fa-square will-not-follow\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n                    Not Followed\\n                \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"style\",\"margin-top:10px;margin-bottom:10px\");\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"span\");\n            dom.setAttribute(el3,\"class\",\"important-label\");\n            var el4 = dom.createTextNode(\"Local images\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"style\",\"margin-top:10px;margin-bottom:10px\");\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"span\");\n            dom.setAttribute(el3,\"class\",\"important-label\");\n            var el4 = dom.createTextNode(\"Enable JS\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n                \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element7 = dom.childAt(fragment, [1]);\n            var element8 = dom.childAt(element7, [3]);\n            var element9 = dom.childAt(element7, [13]);\n            var morph0 = dom.createMorphAt(element7,1,1);\n            var morph1 = dom.createMorphAt(element8,1,1);\n            var morph2 = dom.createMorphAt(element8,5,5);\n            var morph3 = dom.createMorphAt(element7,5,5);\n            var morph4 = dom.createMorphAt(element7,9,9);\n            var morph5 = dom.createMorphAt(dom.childAt(element7, [11]),1,1);\n            var morph6 = dom.createMorphAt(element9,1,1);\n            var morph7 = dom.createMorphAt(element9,5,5);\n            var morph8 = dom.createMorphAt(element7,15,15);\n            element(env, element7, context, \"bind-attr\", [], {\"style\": \"mid_box_style\"});\n            inline(env, morph0, context, \"item-select\", [], {\"options\": get(env, context, \"followPatternOptions\"), \"value\": get(env, context, \"controller.links_to_follow\")});\n            inline(env, morph1, context, \"check-box\", [], {\"checked\": get(env, context, \"showLinks\"), \"name\": \"showLinks\"});\n            inline(env, morph2, context, \"inline-help\", [], {\"message\": \"overlay_blocked_links\"});\n            block(env, morph3, context, \"if\", [get(env, context, \"displayNofollow\")], {}, child0, null);\n            block(env, morph4, context, \"if\", [get(env, context, \"displayEditPatterns\")], {}, child1, null);\n            inline(env, morph5, context, \"check-box\", [], {\"checked\": get(env, context, \"model.local_images\"), \"name\": \"localImages\"});\n            inline(env, morph6, context, \"check-box\", [], {\"checked\": get(env, context, \"model.js_enabled\"), \"name\": \"enableJS\"});\n            inline(env, morph7, context, \"inline-help\", [], {\"message\": \"enable_js\"});\n            block(env, morph8, context, \"if\", [get(env, context, \"model.js_enabled\")], {}, child2, null);\n            return fragment;\n          }\n        };\n      }());\n      var child4 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                content(env, morph0, context, \"templ\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"row\");\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-xs-9 clickable-url\");\n              var el3 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"                    \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-xs-3 button-align-sm\");\n              var el3 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                        \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1]);\n              var element1 = dom.childAt(element0, [3]);\n              var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);\n              var morph1 = dom.createMorphAt(element1,1,1);\n              var morph2 = dom.createMorphAt(element1,3,3);\n              block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"editTemplate\", \"clickedParam\": get(env, context, \"templ\"), \"title\": get(env, context, \"url\"), \"type\": \"light\"}, child0, null);\n              inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"viewTemplate\", \"clickedParam\": get(env, context, \"templ\"), \"icon\": \" fa fa-icon fa-external-link\", \"type\": \"primary\", \"size\": \"xs\"});\n              inline(env, morph2, context, \"bs-button\", [], {\"clicked\": \"deleteTemplate\", \"clickedParam\": get(env, context, \"templ\"), \"icon\": \"fa fa-icon fa-trash\", \"type\": \"danger\", \"size\": \"xs\"});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h5\");\n              var el2 = dom.createTextNode(\"No templates exist for this spider yet.\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element2 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element2,1,1);\n            element(env, element2, context, \"bind-attr\", [], {\"style\": \"mid_box_style\"});\n            block(env, morph0, context, \"each\", [get(env, context, \"model.template_names\")], {\"keyword\": \"templ\"}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      var child5 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"Stop\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"toggleRecording\", \"icon\": \"fa fa-icon fa-stop\", \"class\": \"record-button\", \"title\": \"Stop recording page actions\"}, child0, null);\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"Record\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"toggleRecording\", \"icon\": \"fa fa-icon fa-circle\", \"class\": \"record-button\", \"title\": \"Start recording page actions\"}, child0, null);\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n              var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"if\", [get(env, context, \"documentView.recording\")], {}, child0, child1);\n              inline(env, morph1, context, \"inline-help\", [], {\"message\": \"page_actions\"});\n              inline(env, morph2, context, \"page-actions-editor\", [], {\"pageActions\": get(env, context, \"model.page_actions\")});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"accordion-item\", [], {\"title\": \"Page Actions\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block, get = hooks.get;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);\n          var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);\n          var morph3 = dom.createMorphAt(fragment,5,5,contextualElement);\n          var morph4 = dom.createMorphAt(fragment,7,7,contextualElement);\n          var morph5 = dom.createMorphAt(fragment,9,9,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"accordion-item\", [], {\"title\": \"Initialization\"}, child0, null);\n          block(env, morph1, context, \"accordion-item\", [], {\"title\": \"Language\"}, child1, null);\n          block(env, morph2, context, \"accordion-item\", [], {\"title\": \"Currency\"}, child2, null);\n          block(env, morph3, context, \"accordion-item\", [], {\"title\": \"Crawling\"}, child3, null);\n          block(env, morph4, context, \"accordion-item\", [], {\"title\": \"Samples\"}, child4, null);\n          block(env, morph5, context, \"if\", [get(env, context, \"pageActionsEnabled\")], {}, child5, null);\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"controller.testButtonLabel\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"text-align:center;font-size:1.1em;margin:10px 0px 10px 0px\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\\n<div class=\\\"btn-center\\\">\\n{{#bs-button clicked=\\\"testSpider\\\" clickedParam=this icon=\\\"fa fa-icon fa-check\\\" type=\\\"primary\\\" title=\\\"Tests the spider on every start URL.\\\"}}\\n\t\t\t{{controller.testButtonLabel}}\\n\t\t{{/bs-button}}</div>\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"btn-center\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n        var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);\n        var morph2 = dom.createMorphAt(dom.childAt(fragment, [7]),1,1);\n        block(env, morph0, context, \"if\", [get(env, context, \"capabilities.rename_spiders\")], {}, child0, child1);\n        block(env, morph1, context, \"closable-accordion\", [], {\"configName\": \"bs\", \"selected-idx\": 0}, child2, null);\n        block(env, morph2, context, \"bs-button\", [], {\"clicked\": \"trainScrapely\", \"clickedParam\": get(env, context, \"this\"), \"icon\": \"fa fa-icon fa-check\", \"type\": \"primary\", \"title\": \"Train scrapely using all templates.\"}, child3, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/spider/topbar', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\tLoading page...\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"label-with-tooltip\", [], {\"title\": \"Loading page...\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"controller.urlLabel\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"inline-editable-text-field\", [], {\"text\": get(env, context, \"documentView.currentUrl\"), \"placeholder\": \"http://\", \"action\": \"navigate\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\tAnnotate this page\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"bs-button\", [], {\"type\": \"danger\", \"clicked\": \"addTemplate\", \"size\": \"sm\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"itemsButtonLabel\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"toggleShowItems\", \"type\": \"black\", \"size\": \"sm\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"bs-label\", [], {\"content\": \"No items extracted\", \"type\": \"info\"});\n          return fragment;\n        }\n      };\n    }());\n    var child5 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"bs-label\", [], {\"content\": \"Saving Spider\", \"type\": \"warning\"});\n          return fragment;\n        }\n      };\n    }());\n    var child6 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"hr\");\n              dom.setAttribute(el1,\"style\",\"margin:0px;background-color:rgba(70,70,70,1)\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"padding:10px 0px 10px 0px; border-bottom: 1px groove rgba(255,255,255,0.2);\");\n              var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);\n              inline(env, morph0, context, \"extracted-item\", [], {\"extractedItem\": get(env, context, \"item\"), \"loadUrl\": \"loadUrl\", \"editTemplate\": \"editTemplate\"});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"extracted-items-container\");\n            var el2 = dom.createTextNode(\"\\n\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"style\",\"float:right\");\n            var el3 = dom.createTextNode(\"\\n\t\t\t\t\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n\t\t\t\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"h3\");\n            dom.setAttribute(el2,\"style\",\"text-align:center\");\n            dom.setAttribute(el2,\"class\",\"important-label\");\n            var el3 = dom.createTextNode(\"Displaying \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\" extracted items\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"style\",\"max-height:500px; padding:8px;\");\n            dom.setAttribute(el2,\"class\",\"scrolling-container\");\n            var el3 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, inline = hooks.inline, content = hooks.content, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);\n            var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n            var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);\n            inline(env, morph0, context, \"bs-button\", [], {\"clicked\": \"toggleShowItems\", \"size\": \"sm\", \"type\": \"light\", \"icon\": \"fa fa-icon fa-close\"});\n            content(env, morph1, context, \"controller.extractedItems.length\");\n            block(env, morph2, context, \"each\", [get(env, context, \"controller.extractedItems\")], {\"keyword\": \"item\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"if\", [get(env, context, \"haveItems\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"nav-container button-align\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"float:left\");\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"style\",\"float:left\");\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"url\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"nav-container button-align white-text\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [0]);\n        var element2 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),1,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),1,1);\n        var morph2 = dom.createMorphAt(dom.childAt(element1, [5]),1,1);\n        var morph3 = dom.createMorphAt(element2,1,1);\n        var morph4 = dom.createMorphAt(element2,3,3);\n        var morph5 = dom.createMorphAt(element2,5,5);\n        var morph6 = dom.createMorphAt(element2,7,7);\n        var morph7 = dom.createMorphAt(fragment,4,4,contextualElement);\n        dom.insertBoundary(fragment, null);\n        inline(env, morph0, context, \"bs-button\", [], {\"clicked\": \"browseBack\", \"icon\": \"fa fa-icon fa-arrow-left\", \"size\": \"sm\", \"disabled\": get(env, context, \"browseBackDisabled\")});\n        inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"reload\", \"icon\": \"fa fa-icon fa-refresh\", \"size\": \"sm\", \"disabled\": get(env, context, \"reloadDisabled\")});\n        block(env, morph2, context, \"if\", [get(env, context, \"isFetching\")], {}, child0, child1);\n        block(env, morph3, context, \"unless\", [get(env, context, \"addTemplateDisabled\")], {}, child2, null);\n        block(env, morph4, context, \"if\", [get(env, context, \"haveItems\")], {}, child3, null);\n        block(env, morph5, context, \"if\", [get(env, context, \"showNoItemsExtracted\")], {}, child4, null);\n        block(env, morph6, context, \"if\", [get(env, context, \"saving\")], {}, child5, null);\n        block(env, morph7, context, \"if\", [get(env, context, \"showItems\")], {}, child6, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/template-items', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/template', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/template/toolbox', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\tSample: \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"model.name\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"inline-editable-text-field\", [], {\"text\": get(env, context, \"content.name\"), \"validation\": \"^[a-zA-Z0-9_-]+$\", \"name\": \"model.name\", \"action\": \"rename\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"h4\");\n          var el2 = dom.createTextNode(\"Sample: \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          content(env, morph0, context, \"model.name\");\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                inline(env, morph0, context, \"component\", [get(env, context, \"activeExtractionTool.component\")], {\"data\": get(env, context, \"anno\"), \"alldata\": get(env, context, \"activeExtractionTool.data.extracts\"), \"item\": get(env, context, \"scrapedItem\"), \"createField\": \"createField\", \"close\": \"hideFloatingAnnotationWidget\", \"edit\": \"editAnnotation\", \"document\": get(env, context, \"document\"), \"pluginState\": get(env, context, \"activeExtractionTool.pluginState\"), \"sprites\": get(env, context, \"activeExtractionTool.sprites\"), \"extractionFieldTypes\": get(env, context, \"extractionTypes\"), \"updatePluginData\": \"updatePluginField\", \"dissmissAllSuggestions\": \"dissmissAllSuggestions\"});\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"Accept all suggestions\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  return fragment;\n                }\n              };\n            }());\n            var child1 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"Dismiss all suggestions\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);\n                block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"acceptAllSuggestions\", \"type\": \"success\", \"size\": \"sm\"}, child0, null);\n                block(env, morph1, context, \"bs-button\", [], {\"clicked\": \"dissmissAllSuggestions\", \"type\": \"warning\", \"size\": \"sm\"}, child1, null);\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"scrolling-container\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\t\t\t\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element7 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(element7,1,1);\n              var morph1 = dom.createMorphAt(element7,2,2);\n              element(env, element7, context, \"bind-attr\", [], {\"style\": \"mid_box_style\"});\n              block(env, morph0, context, \"each\", [get(env, context, \"activeExtractionTool.data.extracts\")], {\"keyword\": \"anno\"}, child0, null);\n              block(env, morph1, context, \"if\", [get(env, context, \"severalSuggestions\")], {}, child1, null);\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h5\");\n              var el2 = dom.createTextNode(\"No annotations have been created yet.\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"if\", [get(env, context, \"activeExtractionTool.data.extracts\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\tEdit Items\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"label\");\n            dom.setAttribute(el1,\"class\",\"small-label\");\n            var el2 = dom.createTextNode(\"Extracted item type:\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);\n            var morph1 = dom.createMorphAt(fragment,5,5,contextualElement);\n            var morph2 = dom.createMorphAt(dom.childAt(fragment, [7]),1,1);\n            inline(env, morph0, context, \"item-select\", [], {\"options\": get(env, context, \"items\"), \"labelProperty\": \"display_name\", \"value\": get(env, context, \"controller.scrapedItem.id\"), \"changed\": \"updateScraped\"});\n            inline(env, morph1, context, \"inline-help\", [], {\"message\": \"select_item\"});\n            block(env, morph2, context, \"bs-button\", [], {\"clicked\": \"editItems\", \"type\": \"primary\", \"size\": \"sm\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"\t\t\t\t\t\t\t\");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  return fragment;\n                }\n              };\n            }());\n            var child1 = (function() {\n              var child0 = (function() {\n                return {\n                  isHTMLBars: true,\n                  revision: \"Ember@1.11.4\",\n                  blockParams: 0,\n                  cachedFragment: null,\n                  hasRendered: false,\n                  build: function build(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode(\"\t\t\t\t\t\t\t\t\t\");\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createElement(\"span\");\n                    var el2 = dom.createComment(\"\");\n                    dom.appendChild(el1, el2);\n                    var el2 = dom.createTextNode(\" \");\n                    dom.appendChild(el1, el2);\n                    var el2 = dom.createComment(\"\");\n                    dom.appendChild(el1, el2);\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode(\"\\n\");\n                    dom.appendChild(el0, el1);\n                    return el0;\n                  },\n                  render: function render(context, env, contextualElement) {\n                    var dom = env.dom;\n                    var hooks = env.hooks, content = hooks.content;\n                    dom.detectNamespace(contextualElement);\n                    var fragment;\n                    if (env.useFragmentCache && dom.canClone) {\n                      if (this.cachedFragment === null) {\n                        fragment = this.build(dom);\n                        if (this.hasRendered) {\n                          this.cachedFragment = fragment;\n                        } else {\n                          this.hasRendered = true;\n                        }\n                      }\n                      if (this.cachedFragment) {\n                        fragment = dom.cloneNode(this.cachedFragment, true);\n                      }\n                    } else {\n                      fragment = this.build(dom);\n                    }\n                    var element4 = dom.childAt(fragment, [1]);\n                    var morph0 = dom.createMorphAt(element4,0,0);\n                    var morph1 = dom.createMorphAt(element4,2,2);\n                    content(env, morph0, context, \"ext.type\");\n                    content(env, morph1, context, \"ext.label\");\n                    return fragment;\n                  }\n                };\n              }());\n              return {\n                isHTMLBars: true,\n                revision: \"Ember@1.11.4\",\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"\t\t\t\t\t\t\t\");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  dom.setAttribute(el1,\"style\",\"margin:4px 0px 4px 0px\");\n                  var el2 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createComment(\"\");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\t\t\t\t\t\t\t\");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n                  block(env, morph0, context, \"draggable-button\", [], {\"content\": get(env, context, \"ext.extractor.id\"), \"clicked\": \"removeAppliedExtractor\", \"clickedParam\": get(env, context, \"ext\"), \"class\": \"draggable\"}, child0, null);\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                dom.setAttribute(el1,\"class\",\"target-container btn btn-light droppable\");\n                var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"span\");\n                dom.setAttribute(el2,\"class\",\"target\");\n                var el3 = dom.createElement(\"b\");\n                dom.setAttribute(el3,\"style\",\"margin-right:10px\");\n                var el4 = dom.createComment(\"\");\n                dom.appendChild(el3, el4);\n                dom.appendChild(el2, el3);\n                var el3 = dom.createTextNode(\"[+Drop here]\");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\t\t\t\t\t\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element5 = dom.childAt(fragment, [1]);\n                var morph0 = dom.createMorphAt(dom.childAt(element5, [1, 0]),0,0);\n                var morph1 = dom.createMorphAt(element5,3,3);\n                var morph2 = dom.createMorphAt(element5,4,4);\n                content(env, morph0, context, \"field.fieldName\");\n                block(env, morph1, context, \"if\", [get(env, context, \"field.extractors\")], {}, child0, null);\n                block(env, morph2, context, \"each\", [get(env, context, \"field.extractors\")], {\"keyword\": \"ext\"}, child1, null);\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"extractor-dropzone\", [], {\"content\": get(env, context, \"field.fieldName\"), \"action\": \"applyExtractor\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h5\");\n              var el2 = dom.createTextNode(\"No field mappings have been defined yet.\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.4\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"\t\t\t\t\t\t\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"span\");\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\" \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element2 = dom.childAt(fragment, [1]);\n                var morph0 = dom.createMorphAt(element2,0,0);\n                var morph1 = dom.createMorphAt(element2,2,2);\n                content(env, morph0, context, \"ext.type\");\n                content(env, morph1, context, \"ext.label\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"style\",\"margin:4px 0px 4px 0px\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\t\t\t\t\t\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element3 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(element3,1,1);\n              var morph1 = dom.createMorphAt(element3,3,3);\n              block(env, morph0, context, \"draggable-button\", [], {\"content\": get(env, context, \"ext.extractor.id\"), \"class\": \"draggable\"}, child0, null);\n              inline(env, morph1, context, \"bs-button\", [], {\"clicked\": \"deleteExtractor\", \"type\": \"danger\", \"size\": \"xs\", \"clickedParam\": get(env, context, \"ext\"), \"icon\": \"fa fa-icon fa-trash\"});\n              return fragment;\n            }\n          };\n        }());\n        var child3 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"h5\");\n              var el2 = dom.createTextNode(\"No extractors have been created yet.\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"style\",\"margin-top:10px\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"h4\");\n            var el2 = dom.createTextNode(\"Drag extractors to the fields above\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container ui-corner-all\");\n            dom.setAttribute(el1,\"style\",\"max-height:100px;\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element6 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element6,1,1);\n            var morph1 = dom.createMorphAt(fragment,7,7,contextualElement);\n            var morph2 = dom.createMorphAt(dom.childAt(fragment, [9]),1,1);\n            var morph3 = dom.createMorphAt(fragment,11,11,contextualElement);\n            element(env, element6, context, \"bind-attr\", [], {\"style\": \"ex_tiny_box_style\"});\n            block(env, morph0, context, \"each\", [get(env, context, \"mappedFieldsData\")], {\"keyword\": \"field\"}, child0, child1);\n            inline(env, morph1, context, \"inline-help\", [], {\"message\": \"extractors\"});\n            block(env, morph2, context, \"each\", [get(env, context, \"displayExtractors\")], {\"keyword\": \"ext\"}, child2, child3);\n            inline(env, morph3, context, \"text-field-dropdown-button\", [], {\"options\": get(env, context, \"extractionTypes\"), \"default\": get(env, context, \"newTypeExtractor\"), \"placeholder\": \"Enter a RegEx\", \"action\": \"createExtractor\", \"class\": \"create-extractor-container\"});\n            return fragment;\n          }\n        };\n      }());\n      var child3 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.4\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\t\t\t\t\t\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"row\");\n              var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-xs-5 top-div\");\n              var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createElement(\"div\");\n              dom.setAttribute(el3,\"class\",\"field-name\");\n              var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\t\");\n              dom.appendChild(el3, el4);\n              var el4 = dom.createElement(\"span\");\n              dom.setAttribute(el4,\"class\",\"important-label\");\n              var el5 = dom.createComment(\"\");\n              dom.appendChild(el4, el5);\n              dom.appendChild(el3, el4);\n              var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n              dom.appendChild(el3, el4);\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-xs-3\");\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-xs-3\");\n              var el3 = dom.createComment(\"\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1, 1]),0,0);\n              var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,0);\n              var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),0,0);\n              content(env, morph0, context, \"field.fieldName\");\n              inline(env, morph1, context, \"check-box\", [], {\"checked\": get(env, context, \"field.required\"), \"value\": get(env, context, \"field.fieldName\"), \"disabled\": get(env, context, \"field.disabled\"), \"action\": \"setRequired\"});\n              inline(env, morph2, context, \"check-box\", [], {\"checked\": get(env, context, \"field.extracted\"), \"value\": \"extracted\", \"disabled\": true, \"action\": \"setRequired\"});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"style\",\"float:right\");\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"h4\");\n            dom.setAttribute(el1,\"style\",\"width:92%\");\n            var el2 = dom.createTextNode(\"Check the fields you want to make required for this template:\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"scrolling-container\");\n            var el2 = dom.createTextNode(\"\\n\t\t\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"style\",\"margin:15px auto;width: 100%;\");\n            var el3 = dom.createTextNode(\"\\n\t\t\t\t\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"div\");\n            dom.setAttribute(el3,\"class\",\"row important-label\");\n            var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"div\");\n            dom.setAttribute(el4,\"class\",\"col-xs-5\");\n            var el5 = dom.createTextNode(\"Name\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"div\");\n            dom.setAttribute(el4,\"class\",\"col-xs-3\");\n            var el5 = dom.createTextNode(\"Required\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"div\");\n            dom.setAttribute(el4,\"class\",\"col-xs-3\");\n            var el5 = dom.createTextNode(\"Extracted\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createComment(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\t\t\t\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, inline = hooks.inline, element = hooks.element, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element1 = dom.childAt(fragment, [5]);\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n            var morph1 = dom.createMorphAt(dom.childAt(element1, [1]),3,3);\n            inline(env, morph0, context, \"inline-help\", [], {\"message\": \"template_required\"});\n            element(env, element1, context, \"bind-attr\", [], {\"style\": \"mid_box_style\"});\n            block(env, morph1, context, \"each\", [get(env, context, \"mappedFieldsData\")], {\"keyword\": \"field\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n          var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);\n          var morph3 = dom.createMorphAt(fragment,6,6,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"accordion-item\", [], {\"title\": \"Annotations\"}, child0, null);\n          block(env, morph1, context, \"accordion-item\", [], {\"title\": \"Extracted item\"}, child1, null);\n          block(env, morph2, context, \"accordion-item\", [], {\"title\": \"Extractors\"}, child2, null);\n          block(env, morph3, context, \"accordion-item\", [], {\"title\": \"Extracted fields\"}, child3, null);\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"component\", [get(env, context, \"activeExtractionTool.component\")], {\"data\": get(env, context, \"floatingAnnotation\"), \"mappedElement\": get(env, context, \"floatingElement\"), \"alldata\": get(env, context, \"activeExtractionTool.data.extracts\"), \"item\": get(env, context, \"scrapedItem\"), \"createField\": \"createField\", \"close\": \"hideFloatingAnnotationWidget\", \"edit\": \"editAnnotation\", \"document\": get(env, context, \"document\"), \"pluginState\": get(env, context, \"activeExtractionTool.pluginState\"), \"sprites\": get(env, context, \"activeExtractionTool.sprites\"), \"extractionFieldTypes\": get(env, context, \"extractionTypes\"), \"inDoc\": true, \"pos\": get(env, context, \"showFloatingAnnotationWidgetAt\"), \"updatePluginData\": \"updatePluginField\", \"dissmissAllSuggestions\": \"dissmissAllSuggestions\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"text-align:center;font-size:1.1em;margin:10px 0px 10px 0px\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);\n        dom.insertBoundary(fragment, null);\n        block(env, morph0, context, \"if\", [get(env, context, \"capabilities.rename_templates\")], {}, child0, child1);\n        block(env, morph1, context, \"closable-accordion\", [], {\"configName\": \"bs\", \"selected-idx\": 0}, child2, null);\n        block(env, morph2, context, \"if\", [get(env, context, \"showFloatingAnnotationWidgetAt\")], {}, child3, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/templates/template/topbar', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"model.url\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\tSave Sample\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"bs-button\", [], {\"type\": \"primary\", \"size\": \"sm\", \"clicked\": \"continueBrowsing\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\tDiscard Changes\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"bs-button\", [], {\"type\": \"danger\", \"size\": \"sm\", \"clicked\": \"discardChanges\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.4\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\t\tCSS\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.4\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"bs-button\", [], {\"clicked\": \"toggleCSS\", \"icon\": \"fa fa-icon fa-file-code-o\", \"classNameBindings\": \"documentView.cssEnabled::btn-danger\", \"size\": \"sm\", \"title\": \"Toggle CSS\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.4\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"nav-container\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"url\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"nav-container\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [2, 1]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]),1,1);\n        var morph1 = dom.createMorphAt(element0,1,1);\n        var morph2 = dom.createMorphAt(element0,2,2);\n        var morph3 = dom.createMorphAt(element0,3,3);\n        block(env, morph0, context, \"label-with-tooltip\", [], {\"title\": get(env, context, \"model.url\")}, child0, null);\n        block(env, morph1, context, \"if\", [get(env, context, \"showContinueBrowsing\")], {}, child1, null);\n        block(env, morph2, context, \"if\", [get(env, context, \"showDiscardButton\")], {}, child2, null);\n        block(env, morph3, context, \"if\", [get(env, context, \"showToggleCSS\")], {}, child3, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('portia-web/tests/acceptance/edit-items-test', ['portia-web/tests/helpers/acceptance-test', 'ember', 'portia-web/tests/helpers/fixtures', 'portia-web/tests/helpers/websocket-mock', 'portia-web/tests/helpers/wait'], function (acceptanceTest, Ember, fixtures, ws, wait) {\n\n  'use strict';\n\n  module('Acceptance | Edit Items', {});\n\n  var save = 'button:contains(\"Save changes\")';\n  var add_item = 'button:contains(\"Item\") .fa-plus';\n  var inline_field = '.form-control.input-sm';\n\n  acceptanceTest['default']('Edit Items', function (app, assert) {\n\n    var reset = function reset() {\n      return visit('/projects/11/items');\n    };\n\n    function getItemNames() {\n      return Object.values(ws['default'].lastMessage.items).map(function (item) {\n        return item.display_name;\n      }).sort();\n    }\n\n    return reset().then(function () {\n      return wait.waitForElement(save);\n    }).then(function () {\n      return click(save);\n    }).then(function () {\n      var saveMeta = ws['default'].lastMessage._meta;\n      equal([saveMeta.project, saveMeta.type].join('/'), '11/items');\n      deepEqual(Object.keys(ws['default'].lastMessage.items), ['default']);\n      return reset();\n    }).then(function () {\n      return click(add_item);\n    }).then(function () {\n      return click('.editable-name:contains(\"Item: New\"):eq(0)');\n    }).then(function () {\n      return fillIn(inline_field, 'foobar');\n    }).then(function () {\n      return triggerEvent(inline_field, 'blur');\n    }).then(function () {\n      return click(save);\n    }).then(function () {\n      deepEqual(getItemNames(), ['default_item', 'foobar']);\n    }).then(reset).then(function () {\n      return click('.editable-item-container:contains(\"Item: foobar\") .fa-trash:eq(0)');\n    }).then(function () {\n      return click('.editable-name:contains(\"optional\")');\n    }).then(function () {\n      return fillIn(inline_field, 'url');\n    }).then(function () {\n      return triggerEvent(inline_field, 'blur');\n    }).then(function () {\n      ok($(inline_field).length, \"Can't name a field 'url'\");\n      ok(app.lastNotification.message, 'Shows a message explaining');\n      app.lastNotification = null;\n    }).then(function () {\n      return fillIn(inline_field, '_foobar');\n    }).then(function () {\n      return triggerEvent(inline_field, 'blur');\n    }).then(function () {\n      ok($(inline_field).length, \"Can't start a field with underscore\");\n      ok(app.lastNotification.message, 'Shows a message explaining');\n      app.lastNotification = null;\n    }).then(function () {\n      return fillIn(inline_field, 'price');\n    }).then(function () {\n      return triggerEvent(inline_field, 'blur');\n    }).then(function () {\n      ok($(inline_field).length, \"Can't name two fields the same\");\n      ok(app.lastNotification.message, 'Shows a message explaining');\n      app.lastNotification = null;\n    }).then(function () {\n      return fillIn(inline_field, 'foobar');\n    }).then(function () {\n      return triggerEvent(inline_field, 'blur');\n    }).then(function () {\n      ok($(inline_field).length === 0, \"Works when valid name\");\n      ok(!app.lastNotification, \"Doesn't show notification when valid name\");\n      return click(save);\n    }).then(reset).then(function () {\n      return click('.editable-name:contains(\"foobar\")');\n    }).then(function () {\n      return fillIn(inline_field, 'optional');\n    }).then(function () {\n      return triggerEvent(inline_field, 'blur');\n    }).then(function () {\n      return click(save);\n    });\n  });\n\n});","define('portia-web/tests/acceptance/edit-items-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - acceptance');\n  test('acceptance/edit-items-test.js should pass jshint', function() { \n    ok(true, 'acceptance/edit-items-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/acceptance/open-project-test', ['portia-web/tests/helpers/acceptance-test', 'ember'], function (acceptanceTest, Ember) {\n\n  'use strict';\n\n\n  module('Acceptance | Open Projects', {});\n\n  acceptanceTest['default']('Open a project', function (app, assert) {\n    return visit('/').then(function () {\n      equal(currentURL(), '/projects');\n      var projectLinks = find('.clickable-url button');\n      equal(projectLinks.length, 2, 'There are two projects');\n      return click(projectLinks[0]);\n    }).then(function () {\n      equal(currentURL(), '/projects/11');\n    });\n  });\n\n});","define('portia-web/tests/acceptance/open-project-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - acceptance');\n  test('acceptance/open-project-test.js should pass jshint', function() { \n    ok(true, 'acceptance/open-project-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/acceptance/spider-test', ['portia-web/tests/helpers/acceptance-test', 'ember', 'portia-web/tests/helpers/fixtures', 'portia-web/tests/helpers/websocket-mock'], function (acceptanceTest, Ember, fixtures, ws) {\n\n  'use strict';\n\n\n  module('Acceptance | Spider', {});\n\n  acceptanceTest['default']('List spiders', function (app, assert) {\n    function getSpiders() {\n      return find('.clickable-url button').map(function (i, elm) {\n        return $(elm).text().trim();\n      }).toArray().sort();\n    }\n\n    return visit('/projects/11').then(function () {\n      equal(currentURL(), '/projects/11');\n\n      var spiderLinks = find('.clickable-url button');\n      equal(spiderLinks.length, 2, 'There are two spiders');\n      deepEqual(getSpiders(), ['spider1', 'spider2']);\n      return fillIn('#toolbox .ember-text-field', 'pider1');\n    }).then(function () {\n      deepEqual(getSpiders(), ['spider1']);\n      return fillIn('#toolbox .ember-text-field', 'ider2');\n    }).then(function () {\n      deepEqual(getSpiders(), ['spider2']);\n      return fillIn('#toolbox .ember-text-field', 'spider');\n    }).then(function () {\n      deepEqual(getSpiders(), ['spider1', 'spider2']);\n      return fillIn('#toolbox .ember-text-field', 'testtesttest');\n    }).then(function () {\n      deepEqual(getSpiders(), []);\n      return fillIn('#toolbox .ember-text-field', '');\n    }).then(function () {\n      return click(find('button.btn-danger .fa-trash'));\n    }).then(function () {\n      equal(find('.modal-body').length, 1);\n      ok(/Are you sure/.test(find('.modal-body').text()));\n      return click(find('.modal-footer .btn-default'));\n    }).then(function () {\n      deepEqual(getSpiders(), ['spider1', 'spider2']);\n    });\n  });\n\n  acceptanceTest['default']('Initialization Panel', function (app, assert) {\n\n    function $initPanel() {\n      return find('.panel:eq(0)');\n    }\n\n    function getStartUrls() {\n      return $initPanel().find('.clickable-url button').map(function (i, elm) {\n        return $(elm).text().trim();\n      }).toArray();\n    }\n\n    return visit('/projects/11').then(function () {\n      return visit('/projects/11/spider1');\n    }).then(function () {\n      equal(currentURL(), '/projects/11/spider1');\n      equal(find('.nav-container .current-crumb').text().trim(), 'spider1');\n      deepEqual(getStartUrls(), ['http://portiatest.com/'], 'Fixture loaded OK');\n      ok($initPanel().find('button .fa-plus').parent()[0].hasAttribute('disabled'), 'Add urls button should be disabled if textarea is empty');\n      return fillIn($initPanel().find('textarea'), '\\nhttp://url1.com\\n\\nurl2.com\\n\\n');\n    }).then(function () {\n      ok(!$initPanel().find('button .fa-plus').parent()[0].hasAttribute('disabled'), 'Add urls button should be enabled if user has types urls');\n      return click($initPanel().find('button .fa-plus'));\n    }).then(function () {\n      equal(getStartUrls().join(':'), 'http://portiatest.com/:http://url1.com/:http://url2.com/', 'asd');\n      deepEqual(getStartUrls(), ['http://portiatest.com/', 'http://url1.com/', 'http://url2.com/'], 'asd');\n      var meta = ws['default'].lastMessage._meta;\n      equal([meta.project, meta.type, meta.spider].join('/'), \"11/spider/spider1\");\n      deepEqual(ws['default'].lastMessage.spider.start_urls, ['http://portiatest.com/', 'http://url1.com/', 'http://url2.com/']);\n      return click($initPanel().find('.btn-danger .fa-trash').eq(1));\n    }).then(function () {\n      deepEqual(getStartUrls(), ['http://portiatest.com/', 'http://url2.com/']);\n      deepEqual(ws['default'].lastMessage.spider.start_urls, ['http://portiatest.com/', 'http://url2.com/']);\n      return click($initPanel().find('.btn-danger .fa-trash').eq(0));\n    }).then(function () {\n      deepEqual(getStartUrls(), ['http://url2.com/']);\n      deepEqual(ws['default'].lastMessage.spider.start_urls, ['http://url2.com/']);\n      return click($initPanel().find('button:contains(\"Edit All\")'));\n    }).then(function () {\n      equal($initPanel().find('textarea').val().trim(), 'http://url2.com/');\n      return fillIn($initPanel().find('textarea'), '\\nhttp://portiatest.com/\\n\\n');\n    }).then(function () {\n      return click($initPanel().find('button .fa-plus'));\n    }).then(function () {\n      deepEqual(getStartUrls(), ['http://portiatest.com/'], 'Edit all works');\n      return click($initPanel().find('button:contains(\"Edit All\")'));\n    }).then(function () {\n      equal($initPanel().find('textarea').val().trim(), 'http://portiatest.com/', 'Text area is pre populated when editing all');\n      return fillIn($initPanel().find('textarea'), 'http://asdasdasdad.com');\n    }).then(function () {\n      return click($initPanel().find('button:contains(\"cancel\")'));\n    }).then(function () {\n      deepEqual(getStartUrls(), ['http://portiatest.com/'], \"Cancelling doesn't change the urls\");\n    });\n  });\n\n});","define('portia-web/tests/acceptance/spider-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - acceptance');\n  test('acceptance/spider-test.js should pass jshint', function() { \n    ok(true, 'acceptance/spider-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/acceptance/web-document-test', ['portia-web/tests/helpers/acceptance-test', 'ember', 'portia-web/tests/helpers/fixtures', 'portia-web/tests/helpers/websocket-mock', 'portia-web/tests/helpers/wait'], function (acceptanceTest, Ember, fixtures, ws, wait) {\n\n    'use strict';\n\n    function waitForLoad() {\n        return wait.waitFor(function () {\n            return !/Loading page/.test($('.url').text());\n        });\n    }\n\n    function baseSplashRenderTest(name, url, fn) {\n        acceptanceTest['default'](\"Splash Web Document \" + name, function (app) {\n            var _this = this,\n                _arguments = arguments;\n\n            return visit('/').then(function () {\n                return visit('/projects/11');\n            }).then(function () {\n                return visit('/projects/11/spider1');\n            }).then(function () {\n                return equal(currentURL(), '/projects/11/spider1');\n            }).then(function () {\n                return wait.waitForElement('#scraped-doc-iframe');\n            }).then(function () {\n                equal(2, $('#scraped-doc-iframe').length + 1, 'Has iframe');\n            }).then(function () {\n                return wait.waitFor(function () {\n                    var docView = app.registry.registrations['document:obj'].view;\n                    return docView.get('mode') === 'browse';\n                });\n            }).then(function () {\n                var docView = app.registry.registrations['document:obj'].view;\n                docView.loadUrl(url);\n            }).then(function () {\n                return waitForLoad();\n            }).then(function () {\n                return wait.timeout(1000);\n            }).then(function () {\n                return fn.call(_this, _arguments);\n            });\n        });\n    }\n\n    /**\n     * get attributes as dictionary\n     */\n    function getAttributes(el) {\n        var res = {};\n        for (var i = 0, len = el.attributes.length; i < len; i++) {\n            res[el.attributes[i].name] = el.attributes[i].value;\n        }\n        return res;\n    }\n\n    function domEqual(dom1, dom2, path) {\n        path = path || ':root';\n        if (!dom1 || !dom2) {\n            return equal(dom1, dom2, path + ' Both null');\n        }\n        equal(dom1.nodeType, dom2.nodeType, path + ' nodeType');\n\n        if (dom1.nodeType === window.Node.TEXT_NODE) {\n            equal(dom1.nodeValue, dom2.nodeValue, path + ' nodeValue');\n        } else if (dom1.nodeType === window.Node.ELEMENT_NODE) {\n            equal(dom1.tagName, dom2.tagName, path + ' tagName');\n            equal(dom1.children.length, dom2.children.length, path + ' child count');\n            equal(dom1.attributes.length, dom2.attributes.length, path + ' attr count');\n            deepEqual(getAttributes(dom1), getAttributes(dom2), path + ' attributes');\n            for (var i = 0, len = dom1.children.length; i < len; i++) {\n                domEqual(dom1.children[i], dom2.children[i], path + '>' + dom1.children[i].tagName);\n            }\n        } else if (dom1.nodeType === window.Node.DOCUMENT_NODE) {\n            domEqual(dom1.documentElement, dom2.documentElement, path);\n        }\n    }\n\n    function domTest(file) {\n        var url = location.origin + '/testresources/' + file;\n        baseSplashRenderTest(\"DOMeq \" + file, url, function () {\n\n            var directDefer = Ember['default'].RSVP.defer();\n            var $direct = $('<iframe/>').on('load', function () {\n                setTimeout(directDefer.resolve, 30);\n            }).attr('src', url).appendTo(document.body);\n\n            return directDefer.promise.then(function () {\n                var splash = $('#scraped-doc-iframe').contents();\n                var direct = $direct.contents();\n\n                // Attribute blacklist\n                ['data-tagid', 'href', 'src'].forEach(function (attr) {\n                    splash.find('[' + attr + ']').removeAttr(attr);\n                    direct.find('[' + attr + ']').removeAttr(attr);\n                });\n\n                // Tag blacklist\n                ['script', 'noscript'].forEach(function (tag) {\n                    direct.find(tag).remove();\n                    splash.find(tag).remove();\n                });\n\n                equal(splash.length, 1);\n                equal(direct.length, 1);\n                domEqual(splash[0], direct[0]);\n\n                var bgcolortest = splash.find('.testbgcolor');\n                if (bgcolortest.length) {\n                    equal(bgcolortest.css('background-color'), direct.find('.testbgcolor').css('background-color'));\n                }\n                $direct.remove();\n            });\n        });\n    }\n\n    module('Acceptance | Web document', {});\n\n    domTest('style-tag.html');\n    domTest('dom-change-nodevalue.html');\n    domTest('dom-add-node.html');\n    domTest('dom-remove-node.html');\n    domTest('unicode-characters.html');\n    domTest('overwrite-natives-json.html');\n    domTest('overwrite-natives-json-strigify.html');\n    domTest('overwrite-natives-tojson.html');\n    // domTest('overwrite-natives-array.html'); // Broken, mutation summary and company use overwritten array prototypes\n    domTest('import-data-url.html');\n    domTest('external-css.html');\n    domTest('external-import-css.html');\n    domTest('inline-style.html');\n\n});","define('portia-web/tests/acceptance/web-document-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - acceptance');\n  test('acceptance/web-document-test.js should pass jshint', function() { \n    ok(true, 'acceptance/web-document-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/accordion-item.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/accordion-item.js should pass jshint', function() { \n    ok(true, 'components/accordion-item.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/annotations-plugin/component.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components/annotations-plugin');\n  test('components/annotations-plugin/component.js should pass jshint', function() { \n    ok(true, 'components/annotations-plugin/component.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/bs-badge.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/bs-badge.js should pass jshint', function() { \n    ok(true, 'components/bs-badge.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/bs-button.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/bs-button.js should pass jshint', function() { \n    ok(true, 'components/bs-button.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/bs-dropdown.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/bs-dropdown.js should pass jshint', function() { \n    ok(true, 'components/bs-dropdown.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/bs-label.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/bs-label.js should pass jshint', function() { \n    ok(true, 'components/bs-label.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/bs-message.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/bs-message.js should pass jshint', function() { \n    ok(true, 'components/bs-message.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/bs-modal.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/bs-modal.js should pass jshint', function() { \n    ok(true, 'components/bs-modal.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/bs-notifications.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/bs-notifications.js should pass jshint', function() { \n    ok(true, 'components/bs-notifications.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/check-box.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/check-box.js should pass jshint', function() { \n    ok(true, 'components/check-box.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/closable-accordion.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/closable-accordion.js should pass jshint', function() { \n    ok(true, 'components/closable-accordion.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/collapsible-text.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/collapsible-text.js should pass jshint', function() { \n    ok(true, 'components/collapsible-text.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/copy-clipboard.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/copy-clipboard.js should pass jshint', function() { \n    ok(true, 'components/copy-clipboard.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/copy-spider/component.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components/copy-spider');\n  test('components/copy-spider/component.js should pass jshint', function() { \n    ok(true, 'components/copy-spider/component.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/display-button-edit-delete.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/display-button-edit-delete.js should pass jshint', function() { \n    ok(true, 'components/display-button-edit-delete.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/draggable-button.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/draggable-button.js should pass jshint', function() { \n    ok(true, 'components/draggable-button.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/dummy-component.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/dummy-component.js should pass jshint', function() { \n    ok(true, 'components/dummy-component.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/edit-item.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/edit-item.js should pass jshint', function() { \n    ok(true, 'components/edit-item.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/edit-items/component.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components/edit-items');\n  test('components/edit-items/component.js should pass jshint', function() { \n    ok(true, 'components/edit-items/component.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/extracted-item.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/extracted-item.js should pass jshint', function() { \n    ok(true, 'components/extracted-item.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/extractor-dropzone.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/extractor-dropzone.js should pass jshint', function() { \n    ok(true, 'components/extractor-dropzone.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/file-download/component.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components/file-download');\n  test('components/file-download/component.js should pass jshint', function() { \n    ok(true, 'components/file-download/component.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/inline-editable-text-field.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/inline-editable-text-field.js should pass jshint', function() { \n    ok(true, 'components/inline-editable-text-field.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/inline-help.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/inline-help.js should pass jshint', function() { \n    ok(true, 'components/inline-help.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/item-select.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/item-select.js should pass jshint', function() { \n    ok(true, 'components/item-select.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/j-breadcrumb.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/j-breadcrumb.js should pass jshint', function() { \n    ok(true, 'components/j-breadcrumb.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/j-breadcrumbs.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/j-breadcrumbs.js should pass jshint', function() { \n    ok(true, 'components/j-breadcrumbs.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/json-file-compare.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/json-file-compare.js should pass jshint', function() { \n    ok(true, 'components/json-file-compare.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/label-with-tooltip.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/label-with-tooltip.js should pass jshint', function() { \n    ok(true, 'components/label-with-tooltip.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/page-actions-editor.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/page-actions-editor.js should pass jshint', function() { \n    ok(true, 'components/page-actions-editor.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/pin-toolbox-button.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/pin-toolbox-button.js should pass jshint', function() { \n    ok(true, 'components/pin-toolbox-button.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/regex-text-field-with-button/component.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components/regex-text-field-with-button');\n  test('components/regex-text-field-with-button/component.js should pass jshint', function() { \n    ok(true, 'components/regex-text-field-with-button/component.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/reorder-handler.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/reorder-handler.js should pass jshint', function() { \n    ok(true, 'components/reorder-handler.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/reorderable-list.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/reorderable-list.js should pass jshint', function() { \n    ok(true, 'components/reorderable-list.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/text-area-with-button.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/text-area-with-button.js should pass jshint', function() { \n    ok(true, 'components/text-area-with-button.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/text-area.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/text-area.js should pass jshint', function() { \n    ok(true, 'components/text-area.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/text-field-dropdown-button.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/text-field-dropdown-button.js should pass jshint', function() { \n    ok(true, 'components/text-field-dropdown-button.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/text-field-with-button.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/text-field-with-button.js should pass jshint', function() { \n    ok(true, 'components/text-field-with-button.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/text-field.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/text-field.js should pass jshint', function() { \n    ok(true, 'components/text-field.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/tool-box.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/tool-box.js should pass jshint', function() { \n    ok(true, 'components/tool-box.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/top-bar.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/top-bar.js should pass jshint', function() { \n    ok(true, 'components/top-bar.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/web-document-js/component.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components/web-document-js');\n  test('components/web-document-js/component.js should pass jshint', function() { \n    ok(true, 'components/web-document-js/component.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/web-document.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/web-document.js should pass jshint', function() { \n    ok(true, 'components/web-document.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/components/wizard-box.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/wizard-box.js should pass jshint', function() { \n    ok(true, 'components/wizard-box.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/application.js should pass jshint', function() { \n    ok(true, 'controllers/application.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/base-controller.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/base-controller.js should pass jshint', function() { \n    ok(true, 'controllers/base-controller.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/conflicts.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/conflicts.js should pass jshint', function() { \n    ok(true, 'controllers/conflicts.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/conflicts/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/conflicts');\n  test('controllers/conflicts/index.js should pass jshint', function() { \n    ok(true, 'controllers/conflicts/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/experiments.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/experiments.js should pass jshint', function() { \n    ok(true, 'controllers/experiments.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/items.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/items.js should pass jshint', function() { \n    ok(true, 'controllers/items.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/project.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/project.js should pass jshint', function() { \n    ok(true, 'controllers/project.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/project/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/project');\n  test('controllers/project/index.js should pass jshint', function() { \n    ok(true, 'controllers/project/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/projects.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/projects.js should pass jshint', function() { \n    ok(true, 'controllers/projects.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/projects/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/projects');\n  test('controllers/projects/index.js should pass jshint', function() { \n    ok(true, 'controllers/projects/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/spider.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/spider.js should pass jshint', function() { \n    ok(true, 'controllers/spider.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/spider/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/spider');\n  test('controllers/spider/index.js should pass jshint', function() { \n    ok(true, 'controllers/spider/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/template-items.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/template-items.js should pass jshint', function() { \n    ok(true, 'controllers/template-items.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/template.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/template.js should pass jshint', function() { \n    ok(true, 'controllers/template.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/controllers/template/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/template');\n  test('controllers/template/index.js should pass jshint', function() { \n    ok(true, 'controllers/template/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/dummy/app/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'portia-web/tests/dummy/app/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('portia-web/tests/dummy/app/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - dummy/app');\n  test('dummy/app/app.js should pass jshint', function() { \n    ok(true, 'dummy/app/app.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/dummy/app/router', ['exports', 'ember', 'portia-web/tests/dummy/app/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {});\n\n  exports['default'] = Router;\n\n});","define('portia-web/tests/dummy/app/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - dummy/app');\n  test('dummy/app/router.js should pass jshint', function() { \n    ok(true, 'dummy/app/router.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/dummy/config/environment', function () {\n\n  'use strict';\n\n  /* jshint node: true */\n\n  module.exports = function (environment) {\n    var ENV = {\n      modulePrefix: 'dummy',\n      environment: environment,\n      baseURL: '/',\n      locationType: 'auto',\n      EmberENV: {\n        FEATURES: {\n          // Here you can enable experimental features on an ember canary build\n          // e.g. 'with-controller': true\n        }\n      },\n\n      APP: {\n        // Here you can pass flags/options to your application instance\n        // when it is created\n      }\n    };\n\n    if (environment === 'development') {\n      // ENV.APP.LOG_RESOLVER = true;\n      // ENV.APP.LOG_ACTIVE_GENERATION = true;\n      // ENV.APP.LOG_TRANSITIONS = true;\n      // ENV.APP.LOG_TRANSITIONS_INTERNAL = true;\n      // ENV.APP.LOG_VIEW_LOOKUPS = true;\n    }\n\n    if (environment === 'test') {\n      // Testem prefers this...\n      ENV.baseURL = '/';\n      ENV.locationType = 'none';\n\n      // keep test console output quieter\n      ENV.APP.LOG_ACTIVE_GENERATION = false;\n      ENV.APP.LOG_VIEW_LOOKUPS = false;\n\n      ENV.APP.rootElement = '#ember-testing';\n    }\n\n    if (environment === 'production') {}\n\n    return ENV;\n  };\n\n});","define('portia-web/tests/dummy/config/environment.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - dummy/config');\n  test('dummy/config/environment.js should pass jshint', function() { \n    ok(true, 'dummy/config/environment.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/helpers/acceptance-test', ['exports', 'ember', 'portia-web/tests/helpers/start-app', 'portia-web/components/web-document-js/component', 'portia-web/utils/ferry-websocket', 'portia-web/utils/canvas', 'portia-web/tests/helpers/fixtures', 'portia-web/utils/notification-manager', 'portia-web/tests/helpers/websocket-mock', 'portia-web/tests/helpers/wait'], function (exports, Ember, startApp, WebDocument, FerryWebsocket, utils__canvas, fixtures, NotificationManager, ws, wait) {\n\n    'use strict';\n\n\n\n    exports['default'] = portiaTest;\n    var oldSend = FerryWebsocket['default'].create().send;\n    FerryWebsocket['default'].reopen({\n        url: 'ws://localhost:8787/ws',\n        send: function send(msg) {\n            if (msg._command && !/(resize|heartbeat|pause|resume)/.test(msg._command)) {\n                ws['default'].lastMessage = msg;\n            }\n            return oldSend.apply(this, arguments);\n        }\n    });\n\n    Ember['default'].assert = function (m, a) {\n        if (!a) {\n            try {\n                throw new Error();\n            } catch (e) {\n                m += e.stack;\n            }\n            throw new Error(m);\n        }\n    };\n    function portiaTest(name, fn) {\n        test(name, function (assert) {\n            fixtures.lastRequest.clear();\n            var root = $('<div/>').appendTo(document.body);\n            var canvas = $('<canvas/>').attr('id', 'testCanvas_' + Date.now()).appendTo(document.body);\n\n            NotificationManager['default'].reopen({\n                add: function add(obj) {\n                    if (app) app.lastNotification = obj;\n                }\n            });\n\n            var app = startApp['default']({\n                rootElement: root[0],\n                LOG_TRANSITIONS: true, // basic logging of successful transitions\n                LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps\n            });\n            var that = this;\n            Ember['default'].run(function () {\n                app.setupForTesting();\n                app.injectTestHelpers();\n                Ember['default'].Test.adapter.asyncStart();\n\n                visit('/').then(function () {\n                    return wait.waitFor(function () {\n                        var doc = app.registry.resolve('document:obj');\n                        return doc && doc.view && doc.view.ws.get('opened');\n                    }, 'ws open');\n                }).then(function () {\n                    return fn.call(that, app, assert);\n                }).then(function () {\n                    var doc = app.registry.resolve('document:obj');\n                    if (doc && doc.view && doc.view.ws) {\n                        doc.view.ws.set('deferreds', {});\n                        doc.view.ws.close();\n                    }\n                    app.destroy();\n                    root.remove();\n                    canvas.remove();\n                    Ember['default'].Test.adapter.asyncEnd();\n                });\n            });\n        });\n    }\n\n});","define('portia-web/tests/helpers/acceptance-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/acceptance-test.js should pass jshint', function() { \n    ok(true, 'helpers/acceptance-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/helpers/fixtures', ['exports', 'portia-web/config/environment', 'ember'], function (exports, config, Ember) {\n\n    'use strict';\n\n    var fixtures = {};\n\n    var lastRequest = {\n        method: null,\n        url: null,\n        data: null,\n        captured: [],\n\n        clear: function clear() {\n            this.url = null;\n            this.method = null;\n            this.data = null;\n            this.captured = [];\n        },\n        add: function add(url, method, data) {\n            this.url = url;\n            this.method = method;\n            this.data = data;\n            this.captured.push({ url: url, method: method, data: data });\n        }\n    };\n\n    var oldAjax = Ember['default'].$.ajax;\n    Ember['default'].$.ajax = function (args) {\n        var url = args.url.replace(/^https?:\\/\\/[^\\/]+/, '');\n        var data = args.data && JSON.parse(args.data);\n        lastRequest.add(url, args.type, data);\n\n        return oldAjax(args);\n    };\n\n    exports.fixtures = fixtures;\n    exports.lastRequest = lastRequest;\n\n});","define('portia-web/tests/helpers/fixtures.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/fixtures.js should pass jshint', function() { \n    ok(true, 'helpers/fixtures.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/helpers/resolver', ['exports', 'ember/resolver', 'portia-web/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('portia-web/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/helpers/start-app', ['exports', 'ember', 'portia-web/app', 'portia-web/router', 'portia-web/config/environment', 'portia-web/tests/helpers/fixtures'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('portia-web/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/helpers/trim.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/trim.js should pass jshint', function() { \n    ok(true, 'helpers/trim.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/helpers/wait', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports.waitFor = waitFor;\n    exports.timeout = timeout;\n    exports.waitForElement = waitForElement;\n\n    function waitFor(fn, name, max) {\n        max = max || 8000;\n        name = name || 'unnamed';\n        return new Ember['default'].RSVP.Promise(function (accept, reject) {\n            var start = Date.now();\n            function pool() {\n                if (fn()) {\n                    accept();\n                } else {\n                    if (Date.now() - max > start) {\n                        reject('timeout waiting for ' + name);\n                    } else {\n                        setTimeout(pool, 30);\n                    }\n                }\n            }\n            pool();\n        });\n    }\n\n    function timeout(howmuch) {\n        return new Ember['default'].RSVP.Promise(function (resolve) {\n            setTimeout(resolve, howmuch || 200);\n        });\n    }\n\n    function waitForElement(e) {\n        return waitFor(function () {\n            return $(e).length;\n        }, 'Element ' + e);\n    }\n\n});","define('portia-web/tests/helpers/wait.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/wait.js should pass jshint', function() { \n    ok(true, 'helpers/wait.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/helpers/websocket-mock', ['exports'], function (exports) {\n\n    'use strict';\n\n\n    // API for tests to interface with the websocket\n\n    var ws = {\n        lastMessage: null\n    };\n    exports['default'] = ws;\n\n});","define('portia-web/tests/helpers/websocket-mock.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/websocket-mock.js should pass jshint', function() { \n    ok(true, 'helpers/websocket-mock.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/add-prototypes.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/add-prototypes.js should pass jshint', function() { \n    ok(true, 'initializers/add-prototypes.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/controller-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/controller-helper.js should pass jshint', function() { \n    ok(true, 'initializers/controller-helper.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/error-handler.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/error-handler.js should pass jshint', function() { \n    ok(true, 'initializers/error-handler.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/messages.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/messages.js should pass jshint', function() { \n    ok(true, 'initializers/messages.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/project-models.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/project-models.js should pass jshint', function() { \n    ok(true, 'initializers/project-models.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/register-api.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/register-api.js should pass jshint', function() { \n    ok(true, 'initializers/register-api.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/register-modal.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/register-modal.js should pass jshint', function() { \n    ok(true, 'initializers/register-modal.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/register-page-interaction.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/register-page-interaction.js should pass jshint', function() { \n    ok(true, 'initializers/register-page-interaction.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/register-websocket.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/register-websocket.js should pass jshint', function() { \n    ok(true, 'initializers/register-websocket.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/initializers/toolbox.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/toolbox.js should pass jshint', function() { \n    ok(true, 'initializers/toolbox.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/mixins/conflict-mixin.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/conflict-mixin.js should pass jshint', function() { \n    ok(true, 'mixins/conflict-mixin.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/mixins/controller-utils.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/controller-utils.js should pass jshint', function() { \n    ok(true, 'mixins/controller-utils.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/mixins/draggable.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/draggable.js should pass jshint', function() { \n    ok(true, 'mixins/draggable.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/mixins/droppable.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/droppable.js should pass jshint', function() { \n    ok(true, 'mixins/droppable.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/mixins/guess-types.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/guess-types.js should pass jshint', function() { \n    ok(true, 'mixins/guess-types.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/mixins/modal-handler.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/modal-handler.js should pass jshint', function() { \n    ok(true, 'mixins/modal-handler.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/mixins/notification-handler.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/notification-handler.js should pass jshint', function() { \n    ok(true, 'mixins/notification-handler.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/mixins/popover.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/popover.js should pass jshint', function() { \n    ok(true, 'mixins/popover.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/mixins/size-listener.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/size-listener.js should pass jshint', function() { \n    ok(true, 'mixins/size-listener.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/annotation.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/annotation.js should pass jshint', function() { \n    ok(true, 'models/annotation.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/attribute.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/attribute.js should pass jshint', function() { \n    ok(true, 'models/attribute.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/conflict.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/conflict.js should pass jshint', function() { \n    ok(true, 'models/conflict.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/extracted-field.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/extracted-field.js should pass jshint', function() { \n    ok(true, 'models/extracted-field.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/extracted-item.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/extracted-item.js should pass jshint', function() { \n    ok(true, 'models/extracted-item.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/extracted-variant.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/extracted-variant.js should pass jshint', function() { \n    ok(true, 'models/extracted-variant.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/extractor.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/extractor.js should pass jshint', function() { \n    ok(true, 'models/extractor.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/ignore.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/ignore.js should pass jshint', function() { \n    ok(true, 'models/ignore.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/item-field.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/item-field.js should pass jshint', function() { \n    ok(true, 'models/item-field.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/item.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/item.js should pass jshint', function() { \n    ok(true, 'models/item.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/mapped-field-data.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/mapped-field-data.js should pass jshint', function() { \n    ok(true, 'models/mapped-field-data.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/simple-model.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/simple-model.js should pass jshint', function() { \n    ok(true, 'models/simple-model.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/spider.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/spider.js should pass jshint', function() { \n    ok(true, 'models/spider.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/models/template.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/template.js should pass jshint', function() { \n    ok(true, 'models/template.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/base-route.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/base-route.js should pass jshint', function() { \n    ok(true, 'routes/base-route.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/conflicts.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/conflicts.js should pass jshint', function() { \n    ok(true, 'routes/conflicts.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/conflicts/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/conflicts');\n  test('routes/conflicts/index.js should pass jshint', function() { \n    ok(true, 'routes/conflicts/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/experiments.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/experiments.js should pass jshint', function() { \n    ok(true, 'routes/experiments.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/index.js should pass jshint', function() { \n    ok(true, 'routes/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/items.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/items.js should pass jshint', function() { \n    ok(true, 'routes/items.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/project.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/project.js should pass jshint', function() { \n    ok(true, 'routes/project.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/project/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/project');\n  test('routes/project/index.js should pass jshint', function() { \n    ok(true, 'routes/project/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/projects.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/projects.js should pass jshint', function() { \n    ok(true, 'routes/projects.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/projects/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/projects');\n  test('routes/projects/index.js should pass jshint', function() { \n    ok(true, 'routes/projects/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/spider.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/spider.js should pass jshint', function() { \n    ok(true, 'routes/spider.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/spider/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/spider');\n  test('routes/spider/index.js should pass jshint', function() { \n    ok(true, 'routes/spider/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/template-items.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/template-items.js should pass jshint', function() { \n    ok(true, 'routes/template-items.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/template.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/template.js should pass jshint', function() { \n    ok(true, 'routes/template.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/routes/template/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/template');\n  test('routes/template/index.js should pass jshint', function() { \n    ok(true, 'routes/template/index.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/test-helper', ['portia-web/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('portia-web/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/annotations-plugin/component-test', ['ember-qunit', 'portia-web/utils/sprite-store'], function (ember_qunit, SpriteStore) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('annotations-plugin', 'AnnotationsPluginComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject({\n      data: {},\n      alldata: [],\n      item: {},\n      createField: \"createField\",\n      close: \"hideFloatingAnnotationWidget\",\n      edit: \"editAnnotation\",\n      document: {\n        iframe: $(),\n        view: {\n          getIframe: function getIframe() {\n            return $();\n          }\n        }\n      },\n      pluginState: {},\n      sprites: new SpriteStore['default'](),\n      extractionFieldTypes: {},\n      updatePluginData: \"updatePluginField\"\n    });\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/annotations-plugin/component-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components/annotations-plugin');\n  test('unit/components/annotations-plugin/component-test.js should pass jshint', function() { \n    ok(true, 'unit/components/annotations-plugin/component-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/bs-badge-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('bs-badge', 'BsBadgeComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/bs-badge-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/bs-badge-test.js should pass jshint', function() { \n    ok(true, 'unit/components/bs-badge-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/bs-button-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('bs-button', 'BsButtonComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/bs-button-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/bs-button-test.js should pass jshint', function() { \n    ok(true, 'unit/components/bs-button-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/bs-dropdown-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('bs-dropdown', 'BsDropdownComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/bs-dropdown-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/bs-dropdown-test.js should pass jshint', function() { \n    ok(true, 'unit/components/bs-dropdown-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/bs-label-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('bs-label', 'BsLabelComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/bs-label-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/bs-label-test.js should pass jshint', function() { \n    ok(true, 'unit/components/bs-label-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/bs-message-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('bs-message', 'BsMessageComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/bs-message-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/bs-message-test.js should pass jshint', function() { \n    ok(true, 'unit/components/bs-message-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/bs-modal-test', ['ember-qunit', 'portia-web/utils/modal-manager'], function (ember_qunit, ModalManager) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('bs-modal', 'BsModalComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    var manager = new ModalManager['default']();\n    // creates the component instance\n    var component = this.subject({\n      name: 'test modal',\n      ModalManager: manager\n    });\n\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/bs-modal-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/bs-modal-test.js should pass jshint', function() { \n    ok(true, 'unit/components/bs-modal-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/check-box-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('check-box', 'CheckBoxComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/check-box-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/check-box-test.js should pass jshint', function() { \n    ok(true, 'unit/components/check-box-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/closable-accordion-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('closable-accordion', 'ClosableAccordionComponent', {\n    // specify the other units that are required for this test\n    needs: ['component:accordion-item']\n  });\n\n  ember_qunit.test('it renders', function () {\n\n    Ember['default'].IdxConfig = {\n      getConfig: function getConfig(configName) {\n        equal(configName, 'bs');\n      }\n    };\n    // creates the component instance\n    var component = this.subject({\n      template: Ember['default'].Handlebars.compile('\\n      {{#accordion-item title=\"item1\"}}\\n      {{/accordion-item}}\\n      {{#accordion-item title=\"item2\"}}\\n      {{/accordion-item}}\\n    ')\n    });\n\n    component.set('configName', 'bs');\n\n    equal('number', typeof component.get('selected-idx'));\n    equal(0, component.get('selected-idx'));\n\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/closable-accordion-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/closable-accordion-test.js should pass jshint', function() { \n    ok(true, 'unit/components/closable-accordion-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/collapsible-text-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('collapsible-text', 'CollapsibleTextComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/collapsible-text-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/collapsible-text-test.js should pass jshint', function() { \n    ok(true, 'unit/components/collapsible-text-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/copy-spider/component-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('copy-spider', 'CopySpiderComponent', {\n    // specify the other units that are required for this test\n    needs: ['component:check-box']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject({\n      data: {},\n      slyd: {\n        getProjectNames: function getProjectNames() {\n          return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n            resolve(['Project 1', 'Project 2']);\n          });\n        },\n        loadItems: function loadItems() {\n          return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n            resolve([]);\n          });\n        },\n        getSpiderNames: function getSpiderNames() {\n          return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n            resolve(['Spider 1', 'Spider 2']);\n          });\n        }\n      }\n    });\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/copy-spider/component-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components/copy-spider');\n  test('unit/components/copy-spider/component-test.js should pass jshint', function() { \n    ok(true, 'unit/components/copy-spider/component-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/display-button-edit-delete-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('display-button-edit-delete', 'DisplayButtonEditDeleteComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n    needs: ['component:inline-editable-text-field', 'component:bs-button']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/display-button-edit-delete-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/display-button-edit-delete-test.js should pass jshint', function() { \n    ok(true, 'unit/components/display-button-edit-delete-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/draggable-button-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('draggable-button', 'DraggableButtonComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/draggable-button-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/draggable-button-test.js should pass jshint', function() { \n    ok(true, 'unit/components/draggable-button-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/edit-item-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('edit-item', 'EditItemComponent', {\n    // specify the other units that are required for this test\n    needs: ['component:inline-editable-text-field', 'component:bs-button']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject({\n      item: Ember['default'].Object.create({})\n    });\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/edit-item-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/edit-item-test.js should pass jshint', function() { \n    ok(true, 'unit/components/edit-item-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/edit-items/component-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('edit-items', 'Unit | Component | edit items', {\n    // Specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // Creates the component instance\n    var component = this.subject({\n      item: Ember['default'].Object.create({})\n    });\n    equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/edit-items/component-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components/edit-items');\n  test('unit/components/edit-items/component-test.js should pass jshint', function() { \n    ok(true, 'unit/components/edit-items/component-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/extracted-item-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('extracted-item', 'ExtractedItemComponent', {\n    // specify the other units that are required for this test\n    needs: ['helper:trim']\n  });\n\n  ember_qunit.test('it renders', function () {\n    // Ember 1.11 doesn't seem to load the helper in the tests, but tried with Ember 1.13 and it works\n    var ember_gt_113 = !/^1\\.1[12]\\./.test(Ember['default'].VERSION);\n    expect(ember_gt_113 ? 2 : 1);\n\n    // creates the component instance\n    var component = this.subject({\n      url: 'http://test.com',\n      fields: [],\n      trim: function trim() {}\n    });\n    equal(component._state, 'preRender');\n\n    if (ember_gt_113) {\n      // appends the component to the page\n      this.append();\n      equal(component._state, 'inDOM');\n    }\n  });\n\n});","define('portia-web/tests/unit/components/extracted-item-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/extracted-item-test.js should pass jshint', function() { \n    ok(true, 'unit/components/extracted-item-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/extractor-dropzone-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('extractor-dropzone', 'ExtractorDropzoneComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/extractor-dropzone-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/extractor-dropzone-test.js should pass jshint', function() { \n    ok(true, 'unit/components/extractor-dropzone-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/file-download/component-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('file-download', 'FileDownloadComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/file-download/component-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components/file-download');\n  test('unit/components/file-download/component-test.js should pass jshint', function() { \n    ok(true, 'unit/components/file-download/component-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/inline-editable-text-field-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('inline-editable-text-field', 'InlineEditableTextFieldComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/inline-editable-text-field-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/inline-editable-text-field-test.js should pass jshint', function() { \n    ok(true, 'unit/components/inline-editable-text-field-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/inline-help-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('inline-help', 'InlineHelpComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/inline-help-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/inline-help-test.js should pass jshint', function() { \n    ok(true, 'unit/components/inline-help-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/item-select-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('item-select', 'ItemSelectComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/item-select-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/item-select-test.js should pass jshint', function() { \n    ok(true, 'unit/components/item-select-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/j-breadcrumb-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('j-breadcrumb', 'JBreadcrumbComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/j-breadcrumb-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/j-breadcrumb-test.js should pass jshint', function() { \n    ok(true, 'unit/components/j-breadcrumb-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/j-breadcrumbs-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('j-breadcrumbs', 'JBreadcrumbsComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/j-breadcrumbs-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/j-breadcrumbs-test.js should pass jshint', function() { \n    ok(true, 'unit/components/j-breadcrumbs-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/json-file-compare-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('json-file-compare', 'JsonFileCompareComponent', {});\n\n  ember_qunit.test('it renders', function () {\n    // creates the component instance\n\n    var component = this.subject({\n      json: { foo: 5, bar: 'foo' }\n    });\n    equal(component._state, 'preRender');\n    this.render();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/json-file-compare-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/json-file-compare-test.js should pass jshint', function() { \n    ok(true, 'unit/components/json-file-compare-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/label-with-tooltip-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('label-with-tooltip', 'LabelWithTooltipComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/label-with-tooltip-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/label-with-tooltip-test.js should pass jshint', function() { \n    ok(true, 'unit/components/label-with-tooltip-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/pin-toolbox-button-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('pin-toolbox-button', 'PinToolboxButtonComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n  ember_qunit.test('flips the state when clicked', function () {\n    var toolbox = {\n      pinned: false,\n      fixed: false\n    };\n    var component = this.subject({ toolbox: toolbox });\n    equal(toolbox.pinned, false);\n    equal(toolbox.fixed, false);\n    component.click();\n    equal(toolbox.pinned, true);\n    equal(toolbox.fixed, false);\n    component.click();\n    equal(toolbox.pinned, false);\n    equal(toolbox.fixed, false);\n  });\n\n  ember_qunit.test('sets state in localStorage', function () {\n    if (!window.localStorage) {\n      window.localStorage = {};\n    }\n    var toolbox = {\n      pinned: false,\n      fixed: false\n    };\n    var component = this.subject({ toolbox: toolbox });\n    component.click();\n    ok(window.localStorage.portia_toolbox_pinned);\n    component.click();\n    ok(!window.localStorage.portia_toolbox_pinned);\n  });\n\n});","define('portia-web/tests/unit/components/pin-toolbox-button-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/pin-toolbox-button-test.js should pass jshint', function() { \n    ok(true, 'unit/components/pin-toolbox-button-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/regex-text-field-with-button/component-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('regex-text-field-with-button', 'Unit | Component | regex text field with button', {\n    // Specify the other units that are required for this test\n    needs: ['component:text-field', 'component:bs-button']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/regex-text-field-with-button/component-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components/regex-text-field-with-button');\n  test('unit/components/regex-text-field-with-button/component-test.js should pass jshint', function() { \n    ok(true, 'unit/components/regex-text-field-with-button/component-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/text-area-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('text-area', 'TextAreaComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/text-area-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/text-area-test.js should pass jshint', function() { \n    ok(true, 'unit/components/text-area-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/text-area-with-button-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('text-area-with-button', 'TextAreaWithButtonComponent', {\n    // specify the other units that are required for this test\n    needs: ['component:text-area', 'component:bs-button']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/text-area-with-button-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/text-area-with-button-test.js should pass jshint', function() { \n    ok(true, 'unit/components/text-area-with-button-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/text-field-dropdown-button-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('text-field-dropdown-button', 'TextFieldDropdownButtonComponent', {\n    // specify the other units that are required for this test\n    needs: ['component:text-field', 'component:item-select', 'component:bs-button']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/text-field-dropdown-button-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/text-field-dropdown-button-test.js should pass jshint', function() { \n    ok(true, 'unit/components/text-field-dropdown-button-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/text-field-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('text-field', 'TextFieldComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/text-field-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/text-field-test.js should pass jshint', function() { \n    ok(true, 'unit/components/text-field-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/text-field-with-button-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('text-field-with-button', 'TextFieldWithButtonComponent', {\n    // specify the other units that are required for this test\n    needs: ['component:text-field', 'component:bs-button']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/text-field-with-button-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/text-field-with-button-test.js should pass jshint', function() { \n    ok(true, 'unit/components/text-field-with-button-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/tool-box-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('tool-box', 'ToolBoxComponent', {\n    // specify the other units that are required for this test\n    needs: ['component:pin-toolbox-button']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject({});\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/tool-box-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/tool-box-test.js should pass jshint', function() { \n    ok(true, 'unit/components/tool-box-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/top-bar-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('top-bar', 'TopBarComponent', {\n    // specify the other units that are required for this test\n    needs: ['component:bs-label']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/top-bar-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/top-bar-test.js should pass jshint', function() { \n    ok(true, 'unit/components/top-bar-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/web-document-js/component-test', ['ember-qunit', 'portia-web/utils/ferry-websocket'], function (ember_qunit, FerryWebsocket) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('web-document-js', 'WebDocumentJsComponent', {\n    // specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var doc = {},\n        component = this.subject({\n      document: doc,\n      ws: new FerryWebsocket['default']()\n    });\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/web-document-js/component-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components/web-document-js');\n  test('unit/components/web-document-js/component-test.js should pass jshint', function() { \n    ok(true, 'unit/components/web-document-js/component-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/web-document-test', ['ember-qunit', 'portia-web/initializers/register-page-interaction', 'ember'], function (ember_qunit, register_page_interaction, Ember) {\n\n  'use strict';\n\n  var application, container;\n\n  ember_qunit.moduleForComponent('web-document', 'WebDocumentComponent', {\n    // specify the other units that are required for this test\n    needs: ['initializer:register-page-interaction']\n\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(3);\n\n    var doc = {};\n    // creates the component instance\n    var component = this.subject({\n      document: doc\n    });\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n    equal(doc.view, component, 'Component registers itself');\n  });\n\n});","define('portia-web/tests/unit/components/web-document-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/web-document-test.js should pass jshint', function() { \n    ok(true, 'unit/components/web-document-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/components/wizard-box-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('wizard-box', 'WizardBoxComponent', {\n    // specify the other units that are required for this test\n    needs: ['component:text-field', 'component:bs-button']\n  });\n\n  ember_qunit.test('it renders', function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, 'preRender');\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, 'inDOM');\n  });\n\n});","define('portia-web/tests/unit/components/wizard-box-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/wizard-box-test.js should pass jshint', function() { \n    ok(true, 'unit/components/wizard-box-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/controllers/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:application', 'ApplicationController', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('portia-web/tests/unit/controllers/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/application-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/application-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/controllers/base-controller-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:base-controller', 'BaseControllerController', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('portia-web/tests/unit/controllers/base-controller-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/base-controller-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/base-controller-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/controllers/conflicts-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:conflicts', 'ConflictsController', {\n    // Specify the other units that are required for this test.\n    needs: ['controller:application']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('portia-web/tests/unit/controllers/conflicts-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/conflicts-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/conflicts-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/controllers/items-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:items', 'ItemsController', {\n    // Specify the other units that are required for this test.\n    needs: ['controller:application', 'controller:projects', 'controller:project']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('portia-web/tests/unit/controllers/items-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/items-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/items-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/controllers/project-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:project', 'ProjectController', {\n    // Specify the other units that are required for this test.\n    needs: ['controller:application']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('portia-web/tests/unit/controllers/project-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/project-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/project-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/controllers/project.index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:project.index', 'Project.IndexController', {\n    // Specify the other units that are required for this test.\n    needs: ['controller:application', 'controller:project']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('portia-web/tests/unit/controllers/project.index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/project.index-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/project.index-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/controllers/projects-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:projects', 'ProjectsController', {\n    // Specify the other units that are required for this test.\n    needs: ['controller:application']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('portia-web/tests/unit/controllers/projects-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/projects-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/projects-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/controllers/spider-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:spider', 'SpiderController', {\n    // Specify the other units that are required for this test.\n    needs: ['controller:application', 'controller:projects', 'controller:project', 'controller:project/index']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('portia-web/tests/unit/controllers/spider-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/spider-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/spider-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/controllers/template-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:template', 'TemplateController', {\n    // Specify the other units that are required for this test.\n    needs: ['controller:application', 'controller:projects', 'controller:project', 'controller:spider', 'controller:spider/index']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n\n});","define('portia-web/tests/unit/controllers/template-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/template-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/template-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/helpers/trim-test', ['portia-web/helpers/trim'], function (trim) {\n\n  'use strict';\n\n  module('TrimHelper');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var result = trim.trim(\"Hello World\");\n    ok(result);\n  });\n\n});","define('portia-web/tests/unit/helpers/trim-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/helpers');\n  test('unit/helpers/trim-test.js should pass jshint', function() { \n    ok(true, 'unit/helpers/trim-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/initializers/add-prototypes-test', ['ember', 'portia-web/initializers/add-prototypes'], function (Ember, add_prototypes) {\n\n  'use strict';\n\n  var container, application;\n\n  module('AddPrototypesInitializer', {\n    setup: function setup() {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    add_prototypes.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('portia-web/tests/unit/initializers/add-prototypes-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/add-prototypes-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/add-prototypes-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/initializers/messages-test', ['ember', 'portia-web/initializers/messages'], function (Ember, messages) {\n\n  'use strict';\n\n  var container, application;\n\n  module('MessagesInitializer', {\n    setup: function setup() {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    messages.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('portia-web/tests/unit/initializers/messages-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/messages-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/messages-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/initializers/project-models-test', ['ember', 'portia-web/initializers/project-models'], function (Ember, project_models) {\n\n  'use strict';\n\n  var container, application;\n\n  module('ProjectModelsInitializer', {\n    setup: function setup() {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    project_models.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('portia-web/tests/unit/initializers/project-models-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/project-models-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/project-models-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/initializers/register-modal-test', ['ember', 'portia-web/initializers/register-modal'], function (Ember, register_modal) {\n\n  'use strict';\n\n  var container, application;\n\n  module('RegisterModalInitializer', {\n    setup: function setup() {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    register_modal.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('portia-web/tests/unit/initializers/register-modal-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/register-modal-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/register-modal-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/initializers/register-page-interaction-test', ['ember', 'portia-web/initializers/register-page-interaction'], function (Ember, register_page_interaction) {\n\n  'use strict';\n\n  var container, application;\n\n  module('RegisterPageInteractionInitializer', {\n    setup: function setup() {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    register_page_interaction.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('portia-web/tests/unit/initializers/register-page-interaction-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/register-page-interaction-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/register-page-interaction-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/initializers/register-websocket-test', ['ember', 'portia-web/initializers/register-websocket'], function (Ember, register_websocket) {\n\n  'use strict';\n\n  var container, application;\n\n  module('RegisterWebsocketInitializer', {\n    setup: function setup() {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    register_websocket.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('portia-web/tests/unit/initializers/register-websocket-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/register-websocket-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/register-websocket-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/initializers/toolbox-test', ['ember', 'portia-web/initializers/toolbox'], function (Ember, toolbox) {\n\n  'use strict';\n\n  var container, application;\n\n  module('ToolboxInitializer', {\n    setup: function setup() {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    toolbox.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('portia-web/tests/unit/initializers/toolbox-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/toolbox-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/toolbox-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/mixins/conflict-mixin-test', ['ember', 'portia-web/mixins/conflict-mixin', 'qunit'], function (Ember, ConflictMixinMixin, qunit) {\n\n  'use strict';\n\n  qunit.module('Unit | Mixin | conflict mixin');\n\n  // Replace this with your real tests.\n  qunit.test('it works', function (assert) {\n    var ConflictMixinObject = Ember['default'].Object.extend(ConflictMixinMixin['default']);\n    var subject = ConflictMixinObject.create();\n    assert.ok(subject);\n  });\n\n});","define('portia-web/tests/unit/mixins/conflict-mixin-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/conflict-mixin-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/conflict-mixin-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/mixins/controller-utils-test', ['ember', 'portia-web/mixins/controller-utils'], function (Ember, ControllerUtilsMixin) {\n\n  'use strict';\n\n  module('ControllerUtilsMixin');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var ControllerUtilsObject = Ember['default'].Object.extend(ControllerUtilsMixin['default']);\n    var subject = ControllerUtilsObject.create();\n    ok(subject);\n  });\n\n});","define('portia-web/tests/unit/mixins/controller-utils-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/controller-utils-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/controller-utils-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/mixins/draggable-test', ['ember', 'portia-web/mixins/draggable'], function (Ember, DraggableMixin) {\n\n  'use strict';\n\n  module('DraggableMixin');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var DraggableObject = Ember['default'].Object.extend(DraggableMixin['default']);\n    var subject = DraggableObject.create();\n    ok(subject);\n  });\n\n});","define('portia-web/tests/unit/mixins/draggable-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/draggable-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/draggable-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/mixins/droppable-test', ['ember', 'portia-web/mixins/droppable'], function (Ember, DroppableMixin) {\n\n  'use strict';\n\n  module('DroppableMixin');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var DroppableObject = Ember['default'].Object.extend(DroppableMixin['default']);\n    var subject = DroppableObject.create();\n    ok(subject);\n  });\n\n});","define('portia-web/tests/unit/mixins/droppable-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/droppable-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/droppable-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/mixins/guess-types-test', ['ember', 'portia-web/mixins/guess-types'], function (Ember, GuessTypesMixin) {\n\n  'use strict';\n\n  module('Unit | Mixin | guess types');\n\n  // Replace this with your real tests.\n  test('it works', function (assert) {\n    var GuessTypesObject = Ember['default'].Object.extend(GuessTypesMixin['default']);\n    var subject = GuessTypesObject.create();\n    assert.ok(subject);\n  });\n\n});","define('portia-web/tests/unit/mixins/guess-types-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/guess-types-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/guess-types-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/mixins/modal-handler-test', ['ember', 'portia-web/mixins/modal-handler'], function (Ember, ModalHandlerMixin) {\n\n  'use strict';\n\n  module('ModalHandlerMixin');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var ModalHandlerObject = Ember['default'].Object.extend(ModalHandlerMixin['default']);\n    var subject = ModalHandlerObject.create();\n    ok(subject);\n  });\n\n});","define('portia-web/tests/unit/mixins/modal-handler-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/modal-handler-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/modal-handler-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/mixins/popover-test', ['ember', 'portia-web/mixins/popover'], function (Ember, PopoverMixin) {\n\n  'use strict';\n\n  module('PopoverMixin');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var PopoverObject = Ember['default'].Object.extend(PopoverMixin['default']);\n    var subject = PopoverObject.create();\n    ok(subject);\n  });\n\n});","define('portia-web/tests/unit/mixins/popover-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/popover-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/popover-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/mixins/size-listener-test', ['ember', 'portia-web/mixins/size-listener'], function (Ember, SizeListenerMixin) {\n\n  'use strict';\n\n  module('SizeListenerMixin');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var SizeListenerObject = Ember['default'].Object.extend(SizeListenerMixin['default']);\n    var subject = SizeListenerObject.create();\n    ok(subject);\n  });\n\n});","define('portia-web/tests/unit/mixins/size-listener-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/size-listener-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/size-listener-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/annotation-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:annotation', 'Annotation', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/annotation-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/annotation-test.js should pass jshint', function() { \n    ok(true, 'unit/models/annotation-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/conflict-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:conflict', 'Conflict', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/conflict-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/conflict-test.js should pass jshint', function() { \n    ok(true, 'unit/models/conflict-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/extracted-field-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:extracted-field', 'ExtractedField', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/extracted-field-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/extracted-field-test.js should pass jshint', function() { \n    ok(true, 'unit/models/extracted-field-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/extracted-item-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:extracted-item', 'ExtractedItem', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/extracted-item-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/extracted-item-test.js should pass jshint', function() { \n    ok(true, 'unit/models/extracted-item-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/extracted-variant-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:extracted-variant', 'ExtractedVariant', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/extracted-variant-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/extracted-variant-test.js should pass jshint', function() { \n    ok(true, 'unit/models/extracted-variant-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/extractor-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:extractor', 'Extractor', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/extractor-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/extractor-test.js should pass jshint', function() { \n    ok(true, 'unit/models/extractor-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/ignore-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:ignore', 'Ignore', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/ignore-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/ignore-test.js should pass jshint', function() { \n    ok(true, 'unit/models/ignore-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/item-field-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:item-field', 'ItemFieldModel', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/item-field-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/item-field-test.js should pass jshint', function() { \n    ok(true, 'unit/models/item-field-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/item-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:item', 'Item', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/item-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/item-test.js should pass jshint', function() { \n    ok(true, 'unit/models/item-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/mapped-field-data-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:mapped-field-data', 'MappedFieldData', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/mapped-field-data-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/mapped-field-data-test.js should pass jshint', function() { \n    ok(true, 'unit/models/mapped-field-data-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/simple-model-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:simple-model', 'SimpleModel', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/simple-model-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/simple-model-test.js should pass jshint', function() { \n    ok(true, 'unit/models/simple-model-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/spider-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:spider', 'Spider', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/spider-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/spider-test.js should pass jshint', function() { \n    ok(true, 'unit/models/spider-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/models/template-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('model:template', 'TemplateModel', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('portia-web/tests/unit/models/template-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/template-test.js should pass jshint', function() { \n    ok(true, 'unit/models/template-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/routes/base-route-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:base-route', 'BaseRouteRoute', {\n    // Specify the other units that are required for this test.\n    needs: ['controller:application']\n  });\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('portia-web/tests/unit/routes/base-route-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/base-route-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/base-route-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/routes/conflicts-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:conflicts', 'ConflictsRoute', {\n    // Specify the other units that are required for this test.\n    needs: ['controller:application', 'controller:conflicts', 'template:conflicts.resolver']\n  });\n\n  function conflict(base, my, other) {\n    return {\n      __CONFLICT: {\n        base_val: base,\n        my_val: my,\n        other_val: other\n      }\n    };\n  }\n\n  var struct = {\n    foo: {\n      bar: {\n        num: 1,\n        str: 'hello',\n        arr: ['world']\n      }\n    },\n    conflicting_str: conflict('foo', 'foobar', 'barfoo'),\n    conflicting_num: conflict(1337, 42, 314)\n  };\n\n  var routeMocks = {\n    router: {\n      namespace: {},\n      router: {\n        state: {}\n      }\n    },\n    connections: []\n  };\n\n  function render(route, controller) {\n    Ember['default'].run(function () {\n      try {\n        route.render('conflicts/resolver', {\n          into: 'application',\n          outlet: 'conflictResolver',\n          controller: controller\n        });\n      } catch (e) {\n        throw new Error(e.stack);\n      }\n    });\n  }\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject(routeMocks);\n    ok(route);\n\n    var controller = route.controllerFor('conflicts');\n    controller.reopen({\n      currentFileContents: struct\n    });\n    render(route, controller);\n  });\n\n});","define('portia-web/tests/unit/routes/conflicts-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/conflicts-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/conflicts-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/routes/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:index', 'IndexRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('portia-web/tests/unit/routes/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/index-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/routes/items-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:items', 'ItemsRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('portia-web/tests/unit/routes/items-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/items-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/items-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/routes/project-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:project', 'ProjectRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('portia-web/tests/unit/routes/project-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/project-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/project-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/routes/projects-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:projects', 'ProjectsRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('portia-web/tests/unit/routes/projects-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/projects-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/projects-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/routes/projects.index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:projects.index', 'Projects.IndexRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('portia-web/tests/unit/routes/projects.index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/projects.index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/projects.index-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/routes/spider-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:spider', 'SpiderRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('portia-web/tests/unit/routes/spider-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/spider-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/spider-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/routes/template-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:template', 'TemplateRoute', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function () {\n    var route = this.subject();\n    ok(route);\n  });\n\n});","define('portia-web/tests/unit/routes/template-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/template-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/template-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/annotation-store-test', ['portia-web/utils/annotation-store'], function (AnnotationStore) {\n\n  'use strict';\n\n  module('annotation-store');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var result = new AnnotationStore['default']();\n    ok(result);\n  });\n\n});","define('portia-web/tests/unit/utils/annotation-store-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/annotation-store-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/annotation-store-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/canvas-test', ['portia-web/utils/canvas', 'ember'], function (utils__canvas, Ember) {\n\n  'use strict';\n\n  var canvas = null;\n\n  module('portia | utils | canvas');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var canvas = $('<canvas id=\"portiacanvas\"/>').appendTo(document.body);\n    var result = utils__canvas.Canvas.create({\n      canvasId: 'portiacanvas'\n    });\n    canvas.remove();\n    ok(result);\n  });\n\n});","define('portia-web/tests/unit/utils/canvas-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/canvas-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/canvas-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/ferry-websocket-test', ['portia-web/utils/ferry-websocket'], function (FerryWebsocket) {\n\n  'use strict';\n\n  module('FerryWebsocket');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var result = new FerryWebsocket['default']();\n    ok(result);\n  });\n\n});","define('portia-web/tests/unit/utils/ferry-websocket-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/ferry-websocket-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/ferry-websocket-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/interaction-event-test', ['portia-web/utils/interaction-event'], function (interactionEvent) {\n\n  'use strict';\n\n  module('interactionEvent');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var evt = document.createEvent('Event');\n    evt.initEvent('scroll', true, true);\n    document.documentElement.nodeid = evt;\n    document.documentElement.dispatchEvent(evt);\n    var result = interactionEvent['default'](evt);\n    ok(result);\n  });\n\n});","define('portia-web/tests/unit/utils/interaction-event-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/interaction-event-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/interaction-event-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/modal-manager-test', ['portia-web/utils/modal-manager'], function (modalManager) {\n\n  'use strict';\n\n  module('modalManager');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var result = modalManager['default'].create();\n    ok(result);\n  });\n\n});","define('portia-web/tests/unit/utils/modal-manager-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/modal-manager-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/modal-manager-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/slyd-api-test', ['portia-web/utils/slyd-api'], function (slydApi) {\n\n  'use strict';\n\n  module('slydApi');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var result = slydApi['default'].create();\n    ok(result);\n  });\n\n});","define('portia-web/tests/unit/utils/slyd-api-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/slyd-api-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/slyd-api-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/sprite-store-test', ['portia-web/utils/sprite-store'], function (spriteStore) {\n\n  'use strict';\n\n  module('spriteStore');\n\n  // Replace this with your real tests.\n  test('it works', function () {\n    var result = spriteStore['default'].create();\n    ok(result);\n  });\n\n});","define('portia-web/tests/unit/utils/sprite-store-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/sprite-store-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/sprite-store-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/suggest-annotations-test', ['portia-web/utils/suggest-annotations', 'qunit'], function (suggest_annotations, qunit) {\n\n    'use strict';\n\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    qunit.module('Unit | Utility | Suggest Annotations');\n\n    // Replace this with your real tests.\n    qunit.test('findReleatedTableCell', function (assert) {\n        var table = $('\\n        <table>\\n          <tr>\\n              <td id=\"brand\">Brand</td>\\n              <td>Intel</td>\\n          </tr>\\n          <tr>\\n              <td id=\"series\">Series</td>\\n              <td>Core i5</td>\\n          </tr>\\n          <tr>\\n              <td id=\"cores\">Cores</td>\\n              <td>4</td>\\n          </tr>\\n        </table>\\n    ');\n\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#brand')[0]).firstChild.nodeValue, 'Intel');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#series')[0]).firstChild.nodeValue, 'Core i5');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#cores')[0]).firstChild.nodeValue, '4');\n\n        table = $('\\n        <table>\\n          <tr>\\n              <td id=\"brand\">Brand</td>\\n              <td id=\"series\">Series</td>\\n              <td id=\"cores\">Cores</td>\\n          </tr>\\n          <tr>\\n              <td>Intel</td>\\n              <td>Core i5</td>\\n              <td>4</td>\\n          </tr>\\n        </table>\\n    ');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#brand')[0]).firstChild.nodeValue, 'Intel');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#series')[0]).firstChild.nodeValue, 'Core i5');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#cores')[0]).firstChild.nodeValue, '4');\n\n        table = $('\\n        <table>\\n          <tr>\\n              <th id=\"brand\">Brand</th>\\n              <th id=\"series\">Series</th>\\n              <th id=\"cores\">Cores</th>\\n          </tr>\\n          <tr>\\n              <td>Intel</td>\\n              <td>Core i5</td>\\n              <td>4</td>\\n          </tr>\\n        </table>\\n    ');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#brand')[0]).firstChild.nodeValue, 'Intel');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#series')[0]).firstChild.nodeValue, 'Core i5');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#cores')[0]).firstChild.nodeValue, '4');\n\n        table = $('\\n        <table>\\n          <thead>\\n            <tr>\\n                <td id=\"brand\">Brand</td>\\n                <td id=\"series\">Series</td>\\n                <td id=\"cores\">Cores</td>\\n            </tr>\\n          </thead>\\n          <tr>\\n              <td>Intel</td>\\n              <td>Core i5</td>\\n              <td>4</td>\\n          </tr>\\n        </table>\\n    ');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#brand')[0]).firstChild.nodeValue, 'Intel');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#series')[0]).firstChild.nodeValue, 'Core i5');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#cores')[0]).firstChild.nodeValue, '4');\n\n        table = $('\\n        <table>\\n          <thead>\\n            <tr>\\n                <td id=\"brand\">Brand</td>\\n                <td id=\"series\">Series</td>\\n                <td id=\"cores\">Cores</td>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n                <td>Intel</td>\\n                <td>Core i5</td>\\n                <td>4</td>\\n            </tr>\\n          </tbody>\\n        </table>\\n    ');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#brand')[0]).firstChild.nodeValue, 'Intel');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#series')[0]).firstChild.nodeValue, 'Core i5');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#cores')[0]).firstChild.nodeValue, '4');\n\n        table = $('\\n        <table>\\n          <thead>\\n            <tr>\\n                <td colspan=\"2\">Model</td>\\n                <td id=\"cores\">Cores</td>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n                <td>Intel</td>\\n                <td>Core i5</td>\\n                <td>4</td>\\n            </tr>\\n          </tbody>\\n        </table>\\n    ');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#cores')[0]).firstChild.nodeValue, '4');\n        table = $('\\n        <table>\\n          <thead>\\n            <tr>\\n                <td id=\"brand\">Brand</td>\\n                <td id=\"series\">Series</td>\\n                <td id=\"cores\">Cores</td>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n                <td colspan=\"2\">Intel Core I5</td>\\n                <td>4</td>\\n            </tr>\\n          </tbody>\\n        </table>\\n    ');\n        assert.equal(suggest_annotations.findReleatedTableCell(table.find('#cores')[0]).firstChild.nodeValue, '4');\n    });\n\n    function sum(numbers) {\n        return numbers.reduce(function (a, b) {\n            return a + b;\n        }, 0);\n    }\n\n    function nodeArea(node) {\n        return sum(Array.from(node.getClientRects()).map(function (rect) {\n            return rect.width * rect.height;\n        }));\n    }\n\n    function testSuggester(assert, fragment, field, expectedSuggestion, expectedSuggestor) {\n        var doc = document.implementation.createHTMLDocument('test');\n        doc.body.innerHTML = fragment;\n        var done = assert.async();\n\n        //assert.equal(doc.documentElement.outerHTML, '');\n\n        suggest_annotations.suggestAnnotations(doc, [field], function (suggestions) {\n            assert.equal(suggestions.length, 1);\n\n            var _suggestions$0 = _slicedToArray(suggestions[0], 4);\n\n            var sfield = _suggestions$0[0];\n            var node = _suggestions$0[1];\n            var attr = _suggestions$0[2];\n            var suggestor = _suggestions$0[3];\n\n            assert.equal(sfield, field);\n            var value = attr === 'content' ? node.textContent : node.getAttribute(attr);\n            assert.equal(value, expectedSuggestion);\n            assert.equal(suggestor, expectedSuggestor);\n\n            done();\n        });\n    }\n\n    qunit.test('suggestAnnotations', function (assert) {\n        var test = testSuggester.bind(null, assert);\n\n        var img = \"http://google.com/favicon.ico\";\n\n        // Title suggester\n        //test('', 'title', 'test', 'title');\n\n        // Microdata\n        test('<img itemprop=\"qwerty\" src=\"' + img + '\"/>', 'qwerty', img, 'microdata');\n        test('<img itemprop=\"qwerty\" src=\"' + img + '\"/>', 'qwertyvalue', img, 'microdata');\n        test('<p itemprop=\"qwerty\">hihi</p>', 'qwertyfoobar', 'hihi', 'microdata');\n\n        // Link\n        test('<a href=\"hihi\">next</a>', 'next_url', 'hihi', 'links');\n        test('<a href=\"hihi\">Next Page →</a>', 'next_url', 'hihi', 'links');\n        test('<a href=\"hihi\">Next Page →</a>', 'next_page_url', 'hihi', 'links');\n\n        // Table\n        var table = '\\n    <table>\\n      <tr>\\n          <td>Brand</td>\\n          <td>Intel</td>\\n      </tr>\\n      <tr>\\n          <td>Series</td>\\n          <td>Core i5</td>\\n      </tr>\\n      <tr>\\n          <td>Cores</td>\\n          <td>4</td>\\n      </tr>\\n    </table>';\n        test(table, 'series', 'Core i5', 'table');\n        test(table, 'brand', 'Intel', 'table');\n        test(table, 'cores', '4', 'table');\n\n        table = '\\n        <table>\\n          <tr>\\n              <td>Brand</td>\\n              <td>Series</td>\\n              <td>Cores</td>\\n          </tr>\\n          <tr>\\n              <td>Intel</td>\\n              <td>Core i5</td>\\n              <td>4</td>\\n          </tr>\\n        </table>\\n    ';\n        test(table, 'brand', 'Intel', 'table');\n        test(table, 'series', 'Core i5', 'table');\n        test(table, 'cores', '4', 'table');\n\n        // id class\n        test('<div id=\"fubar\">hihi</div>', 'fubar', 'hihi', 'id_class');\n        test('<div class=\"fubar\">hihi</div>', 'fubar', 'hihi', 'id_class');\n        test('<div class=\"fubar\">hihi</div><span id=\"fubar\">haha</span>', 'fubar', 'haha', 'id_class');\n\n        // dt dd\n        test('<dt>Fubar</dt><dd>hihi</dd>', 'fubar', 'hihi', 'dt_dd');\n\n        // text_content\n        test('<div>€55</div>', 'price', '€55', 'text_content');\n        test('<div>50%</div>', 'percent', '50%', 'text_content');\n        test('<div>24/12/1991</div>', 'date', '24/12/1991', 'text_content');\n\n        test('<div><strong>SKU:</strong> 12345</div>', 'sku', 'SKU: 12345', 'text_content');\n        test('<div>SKU: 12345</div>', 'sku', 'SKU: 12345', 'text_content');\n        test('<div><span>SKU:</span>     <span>12345</span></div>', 'sku', '12345', 'text_content');\n    });\n\n});","define('portia-web/tests/unit/utils/suggest-annotations-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/suggest-annotations-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/suggest-annotations-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/timer-test', ['ember', 'portia-web/utils/timer'], function (Ember, Timer) {\n\n    'use strict';\n\n    module('Unit | Utility | timer');\n\n    // Replace this with your real tests.\n    test('it works', function (assert) {\n        var timer = Timer['default'].create();\n        ok(timer);\n    });\n\n});","define('portia-web/tests/unit/utils/timer-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/timer-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/timer-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/unit/utils/validate-field-name-test', ['portia-web/utils/validate-field-name', 'qunit'], function (validateFieldName, qunit) {\n\n  'use strict';\n\n  qunit.module('Unit | Utility | validate field name');\n\n  // Replace this with your real tests.\n  qunit.test('it works', function (assert) {\n    var fields = [{ name: 'unique' }, { name: 'not_unique' }];\n    assert.ok(validateFieldName['default']('_template'));\n    assert.ok(validateFieldName['default']('_new_meta_field'));\n    assert.ok(validateFieldName['default']('url'));\n    assert.ok(validateFieldName['default']('not_unique', fields));\n    assert.equal(validateFieldName['default']('new_field', fields), null);\n  });\n\n});","define('portia-web/tests/unit/utils/validate-field-name-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/utils');\n  test('unit/utils/validate-field-name-test.js should pass jshint', function() { \n    ok(true, 'unit/utils/validate-field-name-test.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/annotation-store.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/annotation-store.js should pass jshint', function() { \n    ok(true, 'utils/annotation-store.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/canvas.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/canvas.js should pass jshint', function() { \n    ok(true, 'utils/canvas.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/experiments.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/experiments.js should pass jshint', function() { \n    ok(true, 'utils/experiments.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/ferry-websocket.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/ferry-websocket.js should pass jshint', function() { \n    ok(true, 'utils/ferry-websocket.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/interaction-event.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/interaction-event.js should pass jshint', function() { \n    ok(true, 'utils/interaction-event.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/messages.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/messages.js should pass jshint', function() { \n    ok(true, 'utils/messages.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/modal-manager.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/modal-manager.js should pass jshint', function() { \n    ok(true, 'utils/modal-manager.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/notification-manager.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/notification-manager.js should pass jshint', function() { \n    ok(true, 'utils/notification-manager.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/selector-prediction.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/selector-prediction.js should pass jshint', function() { \n    ok(true, 'utils/selector-prediction.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/slyd-api.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/slyd-api.js should pass jshint', function() { \n    ok(true, 'utils/slyd-api.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/sprite-store.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/sprite-store.js should pass jshint', function() { \n    ok(true, 'utils/sprite-store.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/suggest-annotations.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/suggest-annotations.js should pass jshint', function() { \n    ok(true, 'utils/suggest-annotations.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/timer.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/timer.js should pass jshint', function() { \n    ok(true, 'utils/timer.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/utils.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/utils.js should pass jshint', function() { \n    ok(true, 'utils/utils.js should pass jshint.'); \n  });\n\n});","define('portia-web/tests/utils/validate-field-name.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - utils');\n  test('utils/validate-field-name.js should pass jshint', function() { \n    ok(true, 'utils/validate-field-name.js should pass jshint.'); \n  });\n\n});","define('portia-web/utils/annotation-store', ['exports', 'ember', 'portia-web/models/annotation', 'portia-web/utils/utils'], function (exports, Ember, Annotation, utils) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.extend({\n\n        iframe: Ember['default'].computed.reads('document.iframe'),\n\n        findAll: function findAll() {\n            var annotatedElements = this.get('iframe').findAnnotatedElements();\n            var annotationJSONs = [];\n            annotatedElements.each((function (i, element) {\n                var jqElem = Ember['default'].$(element),\n                    annotationJSON = Ember['default'].$.parseJSON(jqElem.attr('data-scrapy-annotate'));\n                if (!annotationJSON['id']) {\n                    // This looks like an old Austoscraping project annotation as it doesn't have\n                    // an assigned id. Create one for it.\n                    annotationJSON['id'] = utils['default'].shortGuid();\n                    jqElem.attr('data-scrapy-annotate', JSON.stringify(annotationJSON));\n                }\n                annotationJSON['tagid'] = jqElem.data('tagid');\n                annotationJSONs.pushObject(annotationJSON);\n            }).bind(this));\n            this._findIgnoresParentAnnotation();\n            return annotationJSONs.map(function (annotationJSON) {\n                return Annotation['default'].create(annotationJSON);\n            });\n        },\n\n        _findIgnoresParentAnnotation: function _findIgnoresParentAnnotation() {\n            var ignoredElements = this.get('iframe').findIgnoredElements();\n            ignoredElements.each(function (index, ignoredElement) {\n                var ignore;\n                var attributeName;\n                if (Ember['default'].$(ignoredElement).attr('data-scrapy-ignore')) {\n                    attributeName = 'data-scrapy-ignore';\n                } else {\n                    attributeName = 'data-scrapy-ignore-beneath';\n                }\n                ignore = Ember['default'].$.parseJSON(Ember['default'].$(ignoredElement).attr(attributeName));\n                if (!ignore['id']) {\n                    ignore = {};\n                    Ember['default'].$(ignoredElement).parents().each(function (index, parent) {\n                        if (Ember['default'].$(parent).attr('data-scrapy-annotate')) {\n                            ignore['id'] = Ember['default'].$.parseJSON(Ember['default'].$(parent).attr('data-scrapy-annotate'))['id'];\n                            Ember['default'].$(ignoredElement).attr(attributeName, JSON.stringify(ignore));\n                            return false;\n                        }\n                    });\n                }\n            });\n        },\n\n        _prepareToSave: function _prepareToSave() {\n            var ignoredElements = this.get('iframe').findIgnoredElements();\n            ignoredElements.removeAttr('data-scrapy-ignore');\n            ignoredElements.removeAttr('data-scrapy-ignore-beneath');\n            var annotatedElements = this.get('iframe').findAnnotatedElements();\n            annotatedElements.each((function (i, element) {\n                Ember['default'].$(element).attr('data-scrapy-annotate', null);\n            }).bind(this));\n        },\n\n        saveAll: function saveAll(annotations) {\n            this._prepareToSave();\n            annotations.forEach((function (annotation) {\n                annotation.get('ignores').forEach(function (ignore) {\n                    var attrName = ignore.get('ignoreBeneath') ? 'data-scrapy-ignore-beneath' : 'data-scrapy-ignore';\n                    Ember['default'].$(ignore.get('element')).attr(attrName, 'true');\n                });\n                Ember['default'].$(annotation.get('element')).attr('data-scrapy-annotate', JSON.stringify(annotation.serialize()));\n            }).bind(this));\n        }\n    });\n\n});","define('portia-web/utils/canvas', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var Canvas = Ember['default'].Object.extend({\n\n        canvasId: null,\n\n        canvas: null,\n\n        context: null,\n\n        init: function init() {\n            this.set('canvas', Ember['default'].$('#' + this.get('canvasId')).get(0));\n            this.set('context', this.get('canvas').getContext(\"2d\"));\n        },\n\n        /**\n            Clears the canvas.\n        */\n        clear: function clear() {\n            var canvas = this.get('canvas');\n            var context = this.get('context');\n            context.clearRect(0, 0, canvas.width, canvas.height);\n        },\n\n        /**\n            Draws the given sprites translating the context by (xOffset, yOffset)\n            to compensate for the iframe current scroll position.\n        */\n        draw: function draw(sprites, xOffset, yOffset) {\n            var canvas = this.get('canvas');\n            var context = this.get('context');\n\n            // Match intrinsic and extrinsic dimensions.\n            canvas.width = Ember['default'].$(canvas).outerWidth();\n            canvas.height = Ember['default'].$(canvas).outerHeight();\n\n            context.translate(-xOffset, -yOffset);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            var sortedSprites = sprites.sort(function (a, b) {\n                return a.get('zPosition') - b.get('zPosition');\n            });\n            sortedSprites.forEach(function (sprite) {\n                sprite.draw(context);\n            });\n        },\n\n        _interactionsBlocked: false,\n\n        /**\n            By default the canvas is configured to let all events pass through.\n            Set this attribute to true to block interactions with the underlaying\n            layers.\n        */\n        interactionsBlocked: (function (key, interactionsBlocked) {\n            if (arguments.length > 1) {\n                this.set('_interactionsBlocked', interactionsBlocked);\n                var canvas = Ember['default'].$('#' + this.get('canvasId'));\n                if (interactionsBlocked) {\n                    canvas.css('pointer-events', 'auto');\n                    canvas.css('background-color', 'rgba(0,0,30,0.2)');\n                    canvas.css('background', '-webkit-radial-gradient(circle, rgba(0,0,0,0.0), rgba(0,0,0,0.6)');\n                    canvas.css('background', '-moz-radial-gradient(circle, rgba(0,0,0,0.0), rgba(0,0,0,0.6)');\n                } else {\n                    canvas.css('pointer-events', 'none');\n                    canvas.css('background-color', 'rgba(0,0,0,0)');\n                    canvas.css('background', 'rgba(0,0,0,0)');\n                }\n            } else {\n                return this.get('_interactionsBlocked');\n            }\n        }).property('_interactionsBlocked')\n\n    });\n\n    var Sprite = Ember['default'].Object.extend({\n\n        /**\n            Sprites with lower zPosition are drawn below sprites with\n            higher zPosition.\n        */\n        zPosition: 0,\n\n        draw: function draw() {\n            throw 'You must implement this method.';\n        }\n    });\n\n    var RECT_ZERO = { left: 0, top: 0, width: 0, height: 0 };\n\n    var RectSprite = Sprite.extend({\n        fillColor: 'blue',\n        boderWidth: 1,\n        strokeColor: 'white',\n        hasShadow: false,\n        shadowColor: 'black',\n        shadowOffsetX: 0,\n        shadowOffsetY: 0,\n        shadowBlur: 10,\n        text: null,\n        textColor: 'black',\n        rect: null,\n        blend: null,\n        highlighted: null,\n        textBackgroundColor: 'orange',\n\n        draw: function draw(context) {\n            this.drawRect(context, this.getBoundingBox());\n        },\n\n        drawRect: function drawRect(context, rect) {\n            context.save();\n            if (this.get('blend')) {\n                context.globalCompositeOperation = this.get('blend');\n            }\n            if (this.get('hasShadow')) {\n                context.shadowColor = this.get('shadowColor');\n                context.shadowOffsetX = this.get('shadowOffsetX');\n                context.shadowOffsetY = this.get('shadowOffsetY');\n                context.shadowBlur = this.get('shadowBlur');\n            }\n\n            context.fillStyle = this.get('fillColor');\n            context.fillRect(rect.left, rect.top, rect.width, rect.height);\n            context.restore();\n\n            context.lineWidth = this.get('boderWidth');\n            context.strokeStyle = this.get('strokeColor');\n            if (this.get('highlighted')) {\n                context.shadowColor = 'orange';\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n                context.shadowBlur = 5;\n                context.lineWidth = 2;\n                context.strokeStyle = 'orange';\n            }\n            context.strokeRect(rect.left, rect.top, rect.width, rect.height);\n            context.shadowColor = 'transparent';\n\n            if (this.get('text')) {\n                context.font = \"12px sans-serif\";\n                var textWidth = context.measureText(this.get('text')).width;\n                context.fillStyle = this.get('textBackgroundColor');\n                if (!this.get('highlighted')) {\n                    context.globalAlpha = 0.5;\n                }\n                context.fillRect(rect.left, rect.top - 18, textWidth + 11, 18);\n                context.fillRect(rect.left, rect.top - 1, rect.width, 2);\n                context.fillStyle = this.get('textColor');\n                context.globalAlpha = 1.0;\n                context.fillText(this.get('text'), rect.left + 6, rect.top - 4);\n            }\n            context.restore();\n        }\n    });\n\n    var AnnotationSprite = RectSprite.extend({\n        annotation: null,\n        fillColor: 'rgba(88,150,220,0.4)',\n        strokeColor: 'rgba(88,150,220,0.4)',\n        hasShadow: false,\n        textColor: 'white',\n        _zPosition: 0,\n\n        text: Ember['default'].computed.reads('annotation.name'),\n\n        highlighted: Ember['default'].computed.reads('annotation.highlighted'),\n\n        getBoundingBox: function getBoundingBox() {\n            if (this.get('annotation.element')) {\n                return Ember['default'].$(this.get('annotation.element')).boundingBox();\n            } else {\n                return RECT_ZERO;\n            }\n        },\n\n        zPosition: (function (key, zPos) {\n            if (arguments.length > 1) {\n                this.set('_zPosition', zPos);\n            }\n            if (this.get('annotation.highlighted')) {\n                return 1000;\n            } else {\n                return this.get('_zPosition');\n            }\n        }).property('annotation.highlighted')\n    });\n\n    var IgnoreSprite = RectSprite.extend({\n        ignore: null,\n        fillColor: 'black',\n        strokeColor: 'rgba(255, 0, 0, 0.4)',\n        textColor: 'rgba(255,150,150,1)',\n        blend: 'destination-out',\n\n        ignoreBeneath: Ember['default'].computed.reads('ignore.ignoreBeneath'),\n\n        text: Ember['default'].computed.reads('ignore.name'),\n\n        highlighted: Ember['default'].computed.reads('ignore.highlighted'),\n\n        draw: function draw(context) {\n            var element = Ember['default'].$(this.get('ignore.element'));\n            if (this.get('ignoreBeneath')) {\n                var elementsBeneath = element.nextAll();\n                elementsBeneath.each((function (i, element) {\n                    this.drawRect(context, Ember['default'].$(element).boundingBox());\n                }).bind(this));\n            }\n            this.drawRect(context, element.boundingBox());\n        }\n    });\n\n    var ElementSprite = RectSprite.extend({\n        element: null,\n        fillColor: 'rgba(103,175,255,0.4)',\n        strokeColor: 'white',\n        hasShadow: false,\n        boderWidth: 2,\n        zPosition: 10,\n\n        getBoundingBox: function getBoundingBox() {\n            return Ember['default'].$(this.get('element')).boundingBox();\n        }\n    });\n\n    exports.Canvas = Canvas;\n    exports.Sprite = Sprite;\n    exports.RECT_ZERO = RECT_ZERO;\n    exports.RectSprite = RectSprite;\n    exports.AnnotationSprite = AnnotationSprite;\n    exports.IgnoreSprite = IgnoreSprite;\n    exports.ElementSprite = ElementSprite;\n\n});","define('portia-web/utils/experiments', ['exports'], function (exports) {\n\n    'use strict';\n\n\n    var cache = {};\n\n    function isEnabled(feature) {\n        if (!(feature in cache)) {\n            var res = window.localStorage && \"portia_enable_\" + feature in localStorage;\n            cache[feature] = Boolean(res);\n        }\n        return cache[feature];\n    }\n\n    function set(feature, value) {\n        if (isEnabled(feature) === value) {\n            return;\n        }\n        try {\n            if (value) {\n                localStorage['portia_enable_' + feature] = value;\n            } else {\n                delete localStorage['portia_enable_' + feature];\n            }\n        } catch (e) {} // Local Storage may throw errors if quota full\n    }\n\n    // Public API\n    exports['default'] = {\n        enabled: function enabled(feature) {\n            return isEnabled(feature);\n        },\n        enable: function enable(feature) {\n            set(feature, true);\n        },\n        disable: function disable(feature) {\n            set(feature, false);\n        },\n        setEnabled: function setEnabled(feature, val) {\n            set(feature, val);\n        }\n    };\n\n});","define('portia-web/utils/ferry-websocket', ['exports', 'ember', 'portia-web/config/environment', 'portia-web/utils/utils', 'portia-web/utils/notification-manager'], function (exports, Ember, config, utils, NotificationManager) {\n\n    'use strict';\n\n    var APPLICATION_UNLOADING_CODE = 4001;\n    var DEFAULT_RECONNECT_TIMEOUT = 5000;\n    var DEFAULT_MAX_RECONNECT_TIMEOUT = 60000;\n\n    var defaultUrl = function defaultUrl() {\n        var uri = URI.parse(config['default'].SLYD_URL || window.location.protocol + '//' + window.location.host);\n        if (!/wss?/.test(uri.protocol)) {\n            uri.protocol = uri.protocol === 'https' ? 'wss' : 'ws';\n        }\n        uri.path = '/ws';\n        return URI.build(uri);\n    };\n\n    exports['default'] = Ember['default'].Object.extend({\n\n        closed: true,\n        opened: Ember['default'].computed.not('closed'),\n        connecting: false,\n        ws: null,\n        heartbeat: null,\n        nextConnect: null,\n        reconnectTimeout: DEFAULT_RECONNECT_TIMEOUT,\n        deferreds: {},\n        commands: {},\n        url: defaultUrl(),\n        secondsUntilReconnect: 0,\n        reconnectImminent: Ember['default'].computed.lt('secondsUntilReconnect', 2),\n\n        init: function init(options) {\n            var _this = this;\n\n            if (options) {\n                this.setProperties(options);\n            }\n\n            window.addEventListener('beforeunload', function () {\n                if (_this.get('opened')) {\n                    _this.close(APPLICATION_UNLOADING_CODE);\n                }\n            });\n        },\n\n        connect: function connect() {\n            if (this.get('closed')) {\n                return this._createWebsocket();\n            }\n        },\n\n        _updateCountdownTimer: (function () {\n            var _this2 = this;\n\n            if (this.secondsUntilReconnect === 0 && this.get('countdownTid')) {\n                clearInterval(this.get('countdownTid'));\n                this.set('countdownTid', null);\n            } else if (this.secondsUntilReconnect > 0 && !this.get('countdownTid')) {\n                this.set('countdownTid', setInterval(Ember['default'].run.bind(this, function () {\n                    _this2.decrementProperty('secondsUntilReconnect');\n                }), 1000));\n            }\n        }).observes('secondsUntilReconnect'),\n\n        _onclose: function _onclose(e) {\n            if (this.heartbeat) {\n                clearInterval(this.heartbeat);\n            }\n            this.set('closed', true);\n            this.set('connecting', false);\n            Ember['default'].Logger.log('<Closed Websocket>');\n\n            var closeError = new Error('Socket disconnected');\n            var deferreds = this.get('deferreds');\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = Object.keys(deferreds)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var deferred = _step.value;\n\n                    deferreds[deferred].reject(closeError);\n                    delete deferreds[deferred];\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator['return']) {\n                        _iterator['return']();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (e.code !== APPLICATION_UNLOADING_CODE && e.code !== 1000) {\n                var timeout = this._connectTimeout();\n                this.set('secondsUntilReconnect', Math.round(timeout / 1000));\n                var next = Ember['default'].run.later(this, this.connect, timeout);\n                this.set('reconnectTid', next);\n            }\n        },\n\n        _createWebsocket: function _createWebsocket() {\n            if (this.get('reconnectTid')) {\n                Ember['default'].run.cancel(this.get('reconnectTid'));\n                this.set('reconnectTid', null);\n            }\n            this.set('secondsUntilReconnect', 0);\n            this.set('connecting', true);\n            var ws;\n            try {\n                ws = new WebSocket(this.get('url'));\n            } catch (err) {\n                Ember['default'].Logger.log('Error connecting to server: ' + err);\n                this.set('connecting', false);\n                return;\n            }\n            ws.onclose = Ember['default'].run.bind(this, this._onclose);\n            ws.onmessage = Ember['default'].run.bind(this, function (e) {\n                var data;\n                try {\n                    data = JSON.parse(e.data);\n                } catch (err) {\n                    Ember['default'].Logger.warn('Error parsing data returned by server: ' + err + '\\n' + data);\n                    return;\n                }\n                var command = data._command;\n                if (!command) {\n                    Ember['default'].Logger.warn('Received response with no command: ' + e.data);\n                    return;\n                }\n                var deferred = data.id;\n                if (deferred in this.get('deferreds')) {\n                    deferred = this.get('deferreds.' + deferred);\n                    delete this.get('deferreds')[data.id];\n                    if (data.error) {\n                        var err = new Error(data.reason || data.error);\n                        err.reason = { jqXHR: { responseText: data.reason || data.error } };\n                        deferred.reject(err);\n                    } else {\n                        deferred.resolve(data);\n                    }\n                }\n                if (data.error) {\n                    NotificationManager['default'].showErrorNotification(data.reason || data.error, data.message);\n                    console.error(data.reason || data.error);\n                } else if (command in this.get('commands')) {\n                    this.get('commands')[command](data);\n                } else {\n                    Ember['default'].Logger.warn('Received unknown command: ' + command);\n                }\n            });\n            ws.onopen = Ember['default'].run.bind(this, function () {\n                Ember['default'].Logger.log('<Opened Websocket>');\n                this.set('closed', false);\n                this.set('connecting', false);\n                this.set('reconnectTimeout', DEFAULT_RECONNECT_TIMEOUT);\n                this.heartbeat = setInterval((function () {\n                    this.send({ _command: 'heartbeat' });\n                }).bind(this), 20000);\n            });\n            this.set('ws', ws);\n        },\n\n        _connectTimeout: function _connectTimeout() {\n            var timeout = Math.max(this.get('reconnectTimeout'), DEFAULT_RECONNECT_TIMEOUT);\n            this.set('reconnectTimeout', Math.min(timeout * 2, DEFAULT_MAX_RECONNECT_TIMEOUT));\n            return this.get('reconnectTimeout');\n        },\n\n        addCommand: function addCommand(command, func) {\n            this.get('commands')[command] = func;\n        },\n\n        close: function close(code, reason) {\n            code = code || 1000;\n            reason = reason || 'application called close';\n            return this.get('ws').close(code, reason);\n        },\n\n        send: function send(data) {\n            if (!this.get('closed') && data) {\n                if (typeof data !== 'string') {\n                    try {\n                        data = JSON.stringify(data);\n                    } catch (err) {\n                        Ember['default'].Logger.warn('Error sending data to server: ' + err);\n                        return;\n                    }\n                }\n                return this.get('ws').send(data);\n            }\n        },\n\n        save: function save(type, obj) {\n            var data = {\n                _meta: this._metadata(type),\n                _command: 'saveChanges'\n            };\n            if (obj.serialize) {\n                data[type] = obj.serialize();\n            } else {\n                data[type] = obj;\n            }\n            return this._sendPromise(data);\n        },\n\n        'delete': function _delete(type, name) {\n            return this._sendPromise({\n                _meta: this._metadata(type),\n                _command: 'delete',\n                name: name\n            });\n        },\n\n        rename: function rename(type, from, to) {\n            return this._sendPromise({\n                _meta: this._metadata(type),\n                _command: 'rename',\n                old: from,\n                'new': to\n            });\n        },\n\n        logEvent: function logEvent() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var param = args.pop();\n            var name = args.join(\".\");\n            return this.send({\n                _command: 'log_event',\n                event: name,\n                param: param\n            });\n        },\n\n        _sendPromise: function _sendPromise(data) {\n            var deferred = new Ember['default'].RSVP.defer();\n            if (this.get('opened')) {\n                this.set('deferreds.' + data._meta.id, deferred);\n                this.send(data);\n            } else {\n                deferred.reject('Websocket is closed');\n            }\n            return deferred.promise;\n        },\n\n        _metadata: function _metadata(type) {\n            return {\n                spider: this.get('spider'),\n                project: this.get('project'),\n                type: type,\n                id: utils['default'].shortGuid()\n            };\n        }\n    });\n\n});","define('portia-web/utils/interaction-event', ['exports'], function (exports) {\n\n    'use strict';\n\n    var eventCategories = {\n        \"keyup\": \"keyboard\",\n        \"keydown\": \"keyboard\",\n        \"keypress\": \"keyboard\",\n        \"mousedown\": \"mouse\",\n        \"mouseup\": \"mouse\",\n        \"click\": \"mouse\",\n        \"scroll\": \"scroll\",\n        \"focus\": \"focus\",\n        \"blur\": \"focus\",\n        \"input\": \"simple\",\n        \"change\": \"simple\"\n    };\n\n    function getEventCategory(evt) {\n        if (evt.type in eventCategories) {\n            return eventCategories[evt.type];\n        }\n        throw new Error(\"Can't serialize event of type \" + evt.type);\n    }\n\n    var interactionEvent = function interactionEvent(evt) {\n        var target = evt.target;\n        var doc = target.ownerDocument;\n\n        if (target && target.nodeType === Node.DOCUMENT_NODE) {\n            doc = target;\n            target = doc.documentElement;\n        }\n        if (!target || !target.nodeid) {\n            return null;\n        }\n\n        var data = {\n            category: getEventCategory(evt.originalEvent || evt),\n            type: evt.type,\n            target: target.nodeid,\n            propsBefore: {},\n            propsAfter: {}\n        };\n\n        if (data.category === 'mouse') {\n            // Send coordinates as a offset of the element instead of the document\n            var clientRect = target.getBoundingClientRect();\n            data.targetX = evt.clientX - clientRect.left;\n            data.targetY = evt.clientY - clientRect.top;\n            data.relatedTarget = evt.relatedTarget && evt.relatedTarget.nodeid;\n        } else if (data.type === 'scroll') {\n            var scrollTarget = target;\n            // Scroll events in the body are dispatched in the document, reverse\n            if (scrollTarget === doc.documentElement && !(target.scrollTopMax || target.scrollLeftMax)) {\n                scrollTarget = doc.body;\n            }\n            if (scrollTarget) {\n                data.scrollTop = scrollTarget.scrollTop;\n                data.scrollTopPercent = scrollTarget.scrollTopMax && Math.round(scrollTarget.scrollTop * 100 / scrollTarget.scrollTopMax);\n                data.scrollLeft = scrollTarget.scrollLeft;\n            } else {\n                data.scrollTop = 0;\n                data.scrollLeft = 0;\n                data.scrollTopPercent = 0;\n            }\n        }\n\n        ATTRIBUTE_WHITELIST.forEach(function (attr) {\n            if (attr in evt) {\n                data[attr] = evt[attr];\n            }\n        });\n        function copyProperties(update_props, obj) {\n            if (evt.type in update_props) {\n                update_props[evt.type].forEach(function (propName) {\n                    if (propName in target) {\n                        obj[propName] = target[propName];\n                    }\n                });\n            }\n        }\n        copyProperties(UPDATE_PROPS_BEFORE, data.propsBefore);\n        copyProperties(UPDATE_PROPS_AFTER, data.propsAfter);\n        return data;\n    };\n\n    var ATTRIBUTE_WHITELIST = ['altKey', 'bubbles', 'button', 'buttons', 'cancelable', 'code', 'ctrlKey', 'deltaX', 'deltaY', 'deltaZ', 'deltaMode', 'detail', 'isComposing', 'isTrusted', 'key', 'keyCode', 'location', 'metaKey', 'relatedTargetId', 'shiftKey', 'type'];\n\n    // When this events are fired, update the specified properties in the server\n    // to the ones in the client before sending the event\n    var UPDATE_PROPS_BEFORE = {\n        'change': ['selectedIndex'], // selects\n        'input': ['value'], // text input, textareas\n        'keyup': ['value'], // text input, textareas\n        'click': ['checked'] // input type radio or check\n    };\n    var UPDATE_PROPS_AFTER = {\n        'keydown': ['value'], // text input, textareas\n        'keypress': ['value'] // text input, textareas\n    };\n\n    exports['default'] = interactionEvent;\n\n});","define('portia-web/utils/messages', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.create({\n        // Inline help messages.\n        overlay_blocked_links: 'Enable this options to highlight links not followed at crawl time in red and followed links in green.',\n        follow_links: 'Links that match any of the regular expressions in this list will be followed (they should also be in the same domain of one of the start pages).',\n        exclude_links: 'Links that match any of the regular expressions in this list will be excluded.',\n        perform_login: 'Select this option if the site you are crawling requires login credentials.',\n        template_required: 'This setting is equivalent to marking the fields as required in the item definition, but limiting the scope to this sample only. <div class=\"alert alert-info\"><span class=\"fa fa-icon fa-info-circle\"></span> Only extracted fields can be set as required.</div>',\n        extractors: 'With <b>regular expression extractors</b>, the extracted data is matched against the specified expression and replaced by the match group enclosed between parentheses. If there is no match, the field is not extracted.<br/><br/><b>Type extractors</b> override the type specified in the item definition.',\n        select_item: 'You can choose what item type is extracted by this sample using the combobox. You can also create and modify items by clicking on the Edit Items button.',\n        variant: 'By selecting a different variant than <b>Base(0)</b> in your annotation, the resulting extracted data will be assigned to the base item special field variants, which is a list of objects similar to an item.',\n        ignored_subregions: 'Allows you to define subregions that should be excluded from the extraction process.',\n        selected_region_ancestors: 'Refine your selection by navigating its ancestors.',\n        selected_region_children: 'Refine your selection by navigating its children.',\n        sticky_fields: 'Required attributes are not extracted, but they must be present for a page to match the sample.',\n        annotation_widget: 'Select the attribute you want to extract and an item field to map it. <br/><br/>Choose <b>-just required-</b> to indicate that the sample must match a particular feature without generating any extracted data. <br/><br/> You can create new fields by clicking the <b>+ field button</b> or by seleting the <b>-create new-</b> option from the <b>field</b> combobox.',\n        enable_js: 'Some sites may need JavaScript enabled for data to be extracted.<br>Enable this option to allow JavaScript to run on pages while crawling.<br>If you are unsure if you require JavaScript try creating a sample without enabling this option. If the data you want is visible you may not need to enable this option.',\n        enable_js_for_links: 'JavaScript will be run on pages matching the patterns below before data and links are extracted.',\n        disable_js_for_links: 'Only raw HTML will be fetched for pages matching the patterns below.',\n        // Other messages.\n        confirm_change_selection: 'If you select a different region you will lose all current attribute mappings and ignored subregions, proceed anyway?',\n        no_items_extracted: 'No items were extracted',\n        publish_ok: 'The project was successfully published.',\n        publish_ok_schedule: 'The project was successfully published. Do you want to be redirected to the schedule page?',\n        deploy_ok: 'The project was successfully deployed.',\n        deploy_ok_schedule: 'The project was successfully deployed. Do you want to be redirected to the schedule page?',\n        publish_conflict: 'Another user has made changes to this project which conflict with your changes. You will need to manually resolve these conflicts',\n        conflicts_solved: 'You have resolved all conflicts, your changes have been published.',\n        page_actions: 'Page actions are run on the page before extracting items in the specified order. Page actions are performed on one or several elements, and it waits autmatically for any AJAX call or timeout to finish before continuing. JavaScript needs to be enabled to use page actions.',\n        template_js_disabled: \"The spider is configured to disable javascript for this URL, If you can't find the data you want to extract try enabing JavaScript for this page and creating the template again.\"\n    });\n\n});","define('portia-web/utils/modal-manager', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n    add: function add(_, modalInstance) {\n      return this.set('name', modalInstance);\n    },\n\n    remove: function remove() {\n      return this.set('name', null);\n    },\n\n    open: function open(name, title, footerButtons, content, component, componentData, controller, fade) {\n      if (this.get('name')) {\n        return;\n      }\n      var cl = controller.container.lookup('component-lookup:main'),\n          modalComponent = cl.lookupFactory('bs-modal', controller.get('container')).create();\n      modalComponent.setProperties({\n        name: name,\n        title: title,\n        manual: true,\n        footerButtons: footerButtons,\n        targetObject: controller,\n        fade: fade,\n        body: content,\n        component: component,\n        componentData: componentData,\n        templateName: 'components/bs-modal'\n      });\n      this.add(name, modalComponent);\n      var rootElement = controller.container.lookup('application:main').rootElement;\n      return modalComponent.appendTo(rootElement);\n    }\n  });\n\n});","define('portia-web/utils/notification-manager', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var NotificationManager = Ember['default'].Object.create({\n        content: Ember['default'].A(),\n\n        add: function add(options) {\n            /*\n                properties:\n                    title (optional),\n                    message,\n                    type (optional): info (default), warning, success, danger\n            */\n            var notification = Ember['default'].Object.create(options);\n            return this.get('content').pushObject(notification);\n        },\n\n        showNotification: function showNotification(title, message, type) {\n            if (title && !message) {\n                message = title;\n                title = null;\n            }\n            if (message) {\n                this.add({\n                    title: title,\n                    message: message,\n                    type: type || 'info'\n                });\n            }\n        },\n\n        showSuccessNotification: function showSuccessNotification(title, message) {\n            this.showNotification(title, message, 'success');\n        },\n\n        showWarningNotification: function showWarningNotification(title, message) {\n            this.showNotification(title, message, 'warning');\n        },\n\n        showErrorNotification: function showErrorNotification(title, message) {\n            this.showNotification(title, message, 'danger');\n        }\n    });\n\n    exports['default'] = NotificationManager;\n\n});","define('portia-web/utils/selector-prediction', ['exports'], function (exports) {\n\n    'use strict';\n\n    exports.matchesExactly = matchesExactly;\n    exports.matchesAll = matchesAll;\n    exports.matchesNone = matchesNone;\n    exports.descendantsOf = descendantsOf;\n    exports.descendantsOfCommonAncestor = descendantsOfCommonAncestor;\n    exports.descendantsOfMostProlificAntecestor = descendantsOfMostProlificAntecestor;\n    exports.singleTagNameHeuristics = singleTagNameHeuristics;\n    exports.acceptRejectRule = acceptRejectRule;\n    exports.all = all;\n    exports.any = any;\n    exports.predictCss = predictCss;\n    exports.cssToXPath = cssToXPath;\n\n    function acceptAny() {\n        return true;\n    }\n\n    function seeds(fn, s) {\n        fn.seeds = s;\n        return fn;\n    }\n\n    // Selector matches exactly this set of elements and no other\n\n    function matchesExactly($elements) {\n        return seeds(function (selector, runSelector) {\n            var matches = runSelector();\n            return matches.length === $elements.length && matches.not($elements).length === 0;\n        }, $elements);\n    }\n\n    // Selector matches all elements in the set\n\n    function matchesAll($elements) {\n        return seeds(function (selector) {\n            return $elements.not(selector).length === 0;\n        }, $elements);\n    }\n\n    // Selector matches none of the elements in the set\n\n    function matchesNone($elements) {\n        return function (selector) {\n            return !$elements.is(selector);\n        };\n    }\n\n    // Selector matches only descendants of element\n\n    function descendantsOf(element) {\n        return function (selector, runSelector) {\n            return Array.prototype.all.call(runSelector, function (match) {\n                var current = match;\n                while (current && current !== element) {\n                    current = current.parentNode;\n                }\n                return !!current;\n            });\n        };\n    }\n\n    // Doesn't select any element outside their common ancestor\n\n    function descendantsOfCommonAncestor($elements) {\n        return descendantsOf(commonAncestor($elements));\n    }\n\n    function descendantsOfMostProlificAntecestor(element) {\n        return descendantsOf(mostProlificAntecestor(element));\n    }\n\n    // Helper heuristics\n\n    function singleTagNameHeuristics($accepted, $rejected) {\n        if ($rejected.length === 0 && $accepted.length > 0 && $accepted.filter(function (i, e) {\n            return e.tagName !== $accepted[0].tagName;\n        }).length === 0) {\n            if ($accepted.length > 1) {\n                return descendantsOfCommonAncestor($accepted);\n            } else {\n                return descendantsOfMostProlificAntecestor($accepted);\n            }\n        }\n        return acceptAny; // Can't apply heuristics\n    }\n\n    // Similar to the old predictCss(s, r)\n\n    function acceptRejectRule($accepted, $rejected) {\n        return all([matchesAll($accepted), matchesNone($rejected), singleTagNameHeuristics($accepted, $rejected)]);\n    }\n\n    function allSeeds(rules) {\n        var all = $();\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var rule = _step.value;\n\n                if (rule.seeds) {\n                    all.add(rule.seeds);\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator['return']) {\n                    _iterator['return']();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return all;\n    }\n\n    // Second order rule: Selector must match all of the rules\n\n    function all(rules) {\n        return seeds(function (selector, runSelector) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = rules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var rule = _step2.value;\n\n                    if (!rule(selector, runSelector)) {\n                        return false;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n                        _iterator2['return']();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            return true;\n        }, allSeeds(rules));\n    }\n\n    // Second order rule: Selector must match at least one of the rules\n\n    function any(rules) {\n        return seeds(function (selector, runSelector) {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = rules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var rule = _step3.value;\n\n                    if (rule(selector, runSelector)) {\n                        return true;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {\n                        _iterator3['return']();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            return false;\n        }, allSeeds(rules));\n    }\n\n    function commonAncestor($elements) {\n        var first = $elements[0],\n            doc = first.ownerDocument,\n            body = doc.body;\n        var candidates = $elements.eq(0).parents().not(doc).not(body);\n        for (var i = candidates.length - 1; i >= 0; --i) {\n            for (var j = 1; j < $elements.length; j++) {\n                if (!$.contains(candidates[i], $elements[j])) {\n                    return candidates[i + 1] || null;\n                }\n            }\n        }\n        return candidates[0];\n    }\n\n    function mostProlificAntecestor(element) {\n        var ancestors = element.parentsUntil(element[0].ownerDocument.documentElement);\n        var candidate = ancestors[ancestors.length - 1];\n        for (var i = ancestors.length - 2; i >= 0; i--) {\n            if (candidate.childElementCount <= ancestors[i].childElementCount) {\n                candidate = ancestors[i];\n            }\n        }\n        return candidate;\n    }\n\n    function recursiveNodes(e) {\n        var res = [];\n        while (e && e.parentElement) {\n            res.unshift(e);\n            e = e.parentElement;\n        }\n        return res;\n    }\n\n    function escapeCssNames(name) {\n        if (name) {\n            try {\n                return name.replace(/\\bselectorgadget_\\w+\\b/g, '').replace(/\\\\/g, '\\\\\\\\').replace(/[\\#\\;\\&\\,\\.\\+\\*\\~\\'\\:\\\"\\!\\^\\$\\[\\]\\(\\)\\=\\>\\|\\/]/g, function (e) {\n                    return '\\\\' + e;\n                }).replace(/\\s+/, '');\n            } catch (e) {\n                if (window.console) {\n                    console.log('---');\n                    console.log(\"exception in escapeCssNames\");\n                    console.log(name);\n                    console.log('---');\n                }\n                return '';\n            }\n        } else {\n            return '';\n        }\n    }\n\n    function childElemNumber(elem) {\n        var count;\n        count = 0;\n        while (elem.previousSibling && (elem = elem.previousSibling)) {\n            if (elem.nodeType === 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    function siblingsWithoutTextNodes(e) {\n        var filtered_nodes, k, len, node, nodes;\n        nodes = e.parentNode.childNodes;\n        filtered_nodes = [];\n        for (k = 0, len = nodes.length; k < len; k++) {\n            node = nodes[k];\n            if (node.nodeName.substring(0, 1) === \"#\") {\n                continue;\n            }\n            if (node === e) {\n                break;\n            }\n            filtered_nodes.push(node);\n        }\n        return filtered_nodes;\n    }\n\n    function pathOf(elem) {\n        if (elem.parentNode === elem.ownerDocument) {\n            return ':root';\n        }\n        var e, j, k, len, path, ref, siblings;\n        path = \"\";\n        ref = recursiveNodes(elem);\n        for (k = 0, len = ref.length; k < len; k++) {\n            e = ref[k];\n            if (e) {\n                siblings = siblingsWithoutTextNodes(e);\n                if (e.nodeName.toLowerCase() !== \"body\") {\n                    j = siblings.length - 2 < 0 ? 0 : siblings.length - 2;\n                    while (j < siblings.length) {\n                        if (siblings[j] === e) {\n                            break;\n                        }\n                        if (!siblings[j].nodeName.match(/^(script|#.*?)$/i)) {\n                            path += cssDescriptor(siblings[j]) + (j + 1 === siblings.length ? \"+ \" : \"~ \");\n                        }\n                        j++;\n                    }\n                }\n                path += cssDescriptor(e) + \" > \";\n            }\n        }\n        return cleanCss(path);\n    }\n\n    function cssDescriptor(node) {\n        var cssName, escaped, k, len, path, ref;\n        path = node.nodeName.toLowerCase();\n        escaped = node.id && escapeCssNames(node.id);\n        if (escaped && escaped.length > 0) {\n            path += '#' + escaped;\n        }\n        if (node.className) {\n            ref = node.className.split(\" \");\n            for (k = 0, len = ref.length; k < len; k++) {\n                cssName = ref[k];\n                escaped = escapeCssNames(cssName);\n                if (cssName && escaped.length > 0) {\n                    path += '.' + escaped;\n                }\n            }\n        }\n        if (node.nodeName.toLowerCase() !== \"body\") {\n            path += ':nth-child(' + (childElemNumber(node) + 1) + ')';\n        }\n        return path;\n    }\n\n    function cssDiff(array) {\n        var collective_common, cssElem, diff, dmp, e, encoded_css_array, existing_tokens, k, l, len, len1, part;\n        try {\n            dmp = new diff_match_patch();\n        } catch (_error) {\n            e = _error;\n            throw \"Please include the diff_match_patch library.\";\n        }\n        if (typeof array === 'undefined' || array.length === 0) {\n            return '';\n        }\n        existing_tokens = {};\n        encoded_css_array = encodeCssForDiff(array, existing_tokens);\n        collective_common = encoded_css_array.pop();\n        for (k = 0, len = encoded_css_array.length; k < len; k++) {\n            cssElem = encoded_css_array[k];\n            diff = dmp.diff_main(collective_common, cssElem);\n            collective_common = '';\n            for (l = 0, len1 = diff.length; l < len1; l++) {\n                part = diff[l];\n                if (part[0] === 0) {\n                    collective_common += part[1];\n                }\n            }\n        }\n        return decodeCss(collective_common, existing_tokens);\n    }\n\n    function tokenizeCss(css_string) {\n        var char, k, len, ref, skip, tokens, word;\n        skip = false;\n        word = '';\n        tokens = [];\n        ref = cleanCss(css_string);\n        for (k = 0, len = ref.length; k < len; k++) {\n            char = ref[k];\n            if (skip) {\n                skip = false;\n            } else if (char === '\\\\') {\n                skip = true;\n            } else if (char === '.' || char === ' ' || char === '#' || char === '>' || char === ':' || char === ',' || char === '+' || char === '~') {\n                if (word.length > 0) {\n                    tokens.push(word);\n                }\n                word = '';\n            }\n            word += char;\n            if (char === ' ' || char === ',') {\n                tokens.push(word);\n                word = '';\n            }\n        }\n        if (word.length > 0) {\n            tokens.push(word);\n        }\n        return tokens;\n    }\n\n    function tokenizeCssForDiff(css_string) {\n        var block, combined_tokens, k, len, ref, token;\n        combined_tokens = [];\n        block = [];\n        ref = tokenizeCss(css_string);\n        for (k = 0, len = ref.length; k < len; k++) {\n            token = ref[k];\n            block.push(token);\n            if (token === ' ' && block.length > 0) {\n                combined_tokens = combined_tokens.concat(block);\n                block = [];\n            } else if (token === '+' || token === '~') {\n                block = [block.join('')];\n            }\n        }\n        if (block.length > 0) {\n            return combined_tokens.concat(block);\n        } else {\n            return combined_tokens;\n        }\n    }\n\n    function decodeCss(string, existing_tokens) {\n        var character, inverted, k, len, out, ref;\n        inverted = invertObject(existing_tokens);\n        out = '';\n        ref = string.split('');\n        for (k = 0, len = ref.length; k < len; k++) {\n            character = ref[k];\n            out += inverted[character];\n        }\n        return cleanCss(out);\n    }\n\n    function encodeCssForDiff(strings, existing_tokens) {\n        var codepoint, k, l, len, len1, out, ref, string, strings_out, token;\n        codepoint = 50;\n        strings_out = [];\n        for (k = 0, len = strings.length; k < len; k++) {\n            string = strings[k];\n            out = \"\";\n            ref = tokenizeCssForDiff(string);\n            for (l = 0, len1 = ref.length; l < len1; l++) {\n                token = ref[l];\n                if (!existing_tokens[token]) {\n                    existing_tokens[token] = String.fromCharCode(codepoint++);\n                }\n                out += existing_tokens[token];\n            }\n            strings_out.push(out);\n        }\n        return strings_out;\n    }\n\n    function tokenPriorities(tokens) {\n        var epsilon, first, i, k, len, priorities, second, token;\n        epsilon = 0.001;\n        priorities = [];\n        i = 0;\n        for (k = 0, len = tokens.length; k < len; k++) {\n            token = tokens[k];\n            first = token.substring(0, 1);\n            second = token.substring(1, 2);\n            if (first === ':' && second === 'n') {\n                priorities[i] = 0;\n            } else if (first === '>') {\n                priorities[i] = 2;\n            } else if (first === '+' || first === '~') {\n                priorities[i] = 3;\n            } else if (first !== ':' && first !== '.' && first !== '#' && first !== ' ' && first !== '>' && first !== '+' && first !== '~') {\n                priorities[i] = 4;\n            } else if (first === '.') {\n                priorities[i] = 5;\n            } else if (first === '#') {\n                priorities[i] = 6;\n                if (token.match(/\\d{3,}/)) {\n                    priorities[i] = 2.5;\n                }\n            } else {\n                priorities[i] = 0;\n            }\n            priorities[i] += i * epsilon;\n            i++;\n        }\n        return priorities;\n    }\n\n    function orderFromPriorities(priorities) {\n        var i, k, l, ordering, ref, ref1, tmp;\n        tmp = [];\n        ordering = [];\n        for (i = k = 0, ref = priorities.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            tmp[i] = {\n                value: priorities[i],\n                original: i\n            };\n        }\n        tmp.sort(function (a, b) {\n            return a.value - b.value;\n        });\n        for (i = l = 0, ref1 = priorities.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            ordering[i] = tmp[i].original;\n        }\n        return ordering;\n    }\n\n    function simplifyCss(css, rule) {\n        var best_so_far, first, got_shorter, i, k, look_back_index, ordering, part, parts, priorities, ref, second, selector;\n        parts = tokenizeCss(css);\n        priorities = tokenPriorities(parts);\n        ordering = orderFromPriorities(priorities);\n        selector = cleanCss(css);\n        look_back_index = -1;\n        best_so_far = \"\";\n        if (selectorGets(selector, rule)) {\n            best_so_far = selector;\n        }\n        var checkSelector = function checkSelector(selector) {\n            if (selector.length < best_so_far.length && selectorGets(selector, rule)) {\n                best_so_far = selector;\n                got_shorter = true;\n                return true;\n            } else {\n                return false;\n            }\n        };\n        got_shorter = true;\n        while (got_shorter) {\n            got_shorter = false;\n            for (i = k = 0, ref = parts.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n                part = ordering[i];\n                if (parts[part].length === 0) {\n                    continue;\n                }\n                first = parts[part].substring(0, 1);\n                second = parts[part].substring(1, 2);\n                if (first === ' ') {\n                    continue;\n                }\n                if (wouldLeaveFreeFloatingNthChild(parts, part)) {\n                    continue;\n                }\n                _removeElements(part, parts, first, checkSelector);\n            }\n        }\n        return cleanCss(best_so_far);\n    }\n\n    // Remove some elements depending on whether this is a sibling selector or not, and put them back if the block returns false.\n    function _removeElements(part, parts, firstChar, callback) {\n        var j, k, l, look_back_index, ref, ref1, ref2, ref3, selector, tmp;\n        if (firstChar === '+' || firstChar === '~') {\n            look_back_index = positionOfSpaceBeforeIndexOrLineStart(part, parts);\n        } else {\n            look_back_index = part;\n        }\n        tmp = parts.slice(look_back_index, part + 1); // Save a copy of these parts.\n        for (j = k = ref = look_back_index, ref1 = part; ref <= ref1 ? k <= ref1 : k >= ref1; j = ref <= ref1 ? ++k : --k) {\n            parts[j] = '';\n        }\n        selector = cleanCss(parts.join(''));\n        if (selector === '' || !callback(selector)) {\n            for (j = l = ref2 = look_back_index, ref3 = part; ref2 <= ref3 ? l <= ref3 : l >= ref3; j = ref2 <= ref3 ? ++l : --l) {\n                parts[j] = tmp[j - look_back_index]; // Put it back.\n            }\n        }\n        return parts;\n    }\n\n    function positionOfSpaceBeforeIndexOrLineStart(part, parts) {\n        var i;\n        i = part;\n        while (i >= 0 && parts[i] !== ' ') {\n            i--;\n        }\n        if (i < 0) {\n            i = 0;\n        }\n        return i;\n    }\n\n    // Has to handle parts with zero length.\n    function wouldLeaveFreeFloatingNthChild(parts, part) {\n        var i, nth_child_is_on_right, space_is_on_left;\n        space_is_on_left = nth_child_is_on_right = false;\n        i = part + 1;\n        while (i < parts.length && parts[i].length === 0) {\n            i++;\n        }\n        if (i < parts.length && parts[i].substring(0, 2) === ':n') {\n            nth_child_is_on_right = true;\n        }\n        i = part - 1;\n        while (i > -1 && parts[i].length === 0) {\n            i--;\n        }\n        if (i < 0 || parts[i] === ' ') {\n            space_is_on_left = true;\n        }\n        return space_is_on_left && nth_child_is_on_right;\n    }\n\n    // Not intended for user CSS, does destructive sibling removal.  Expects strings to be escaped.\n    function cleanCss(css) {\n        var cleaned_css, last_cleaned_css;\n        cleaned_css = css;\n        last_cleaned_css = null;\n        while (last_cleaned_css !== cleaned_css) {\n            last_cleaned_css = cleaned_css;\n            cleaned_css = cleaned_css.replace(/(^|\\s+)(\\+|\\~)/, '').replace(/(\\+|\\~)\\s*$/, '').replace(/>/g, ' > ').replace(/\\s*(>\\s*)+/g, ' > ').replace(/,/g, ' , ').replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '').replace(/\\s*,$/g, '').replace(/^\\s*,\\s*/g, '').replace(/\\s*>$/g, '').replace(/^>\\s*/g, '').replace(/[\\+\\~\\>]\\s*,/g, ',').replace(/[\\+\\~]\\s*>/g, '>').replace(/\\s*(,\\s*)+/g, ' , ');\n        }\n        return cleaned_css;\n    }\n\n    // Takes wrapped\n    function getPathsFor(nodeset) {\n        var k, len, node, out;\n        out = [];\n        for (k = 0, len = nodeset.length; k < len; k++) {\n            node = nodeset[k];\n            if (node && node.nodeType === Node.ELEMENT_NODE) {\n                out.push(pathOf(node));\n            }\n        }\n        return out;\n    }\n\n    function predictCss(rule) {\n        var seeds = rule.seeds || $();\n        if (seeds.length === 0) {\n            console.error('Invalid rule');\n            return '';\n        }\n        rule.doc = seeds[0].ownerDocument;\n        var selected_paths = getPathsFor(seeds);\n        var css = cssDiff(selected_paths);\n        var simplest = simplifyCss(css, rule);\n        if (simplest.length > 0) {\n            return simplest;\n        }\n        var union = '';\n        seeds.each(function (i, seed) {\n            union = pathOf(seed) + \", \" + union;\n        });\n        union = cleanCss(union);\n        return simplifyCss(union, rule);\n    }\n\n    function selectorGets(selector, rule) {\n        var cachedMatches = null;\n        function runSelector() {\n            return cachedMatches || (cachedMatches = $(selector, rule.doc));\n        }\n        try {\n            return rule(selector, runSelector);\n        } catch (e) {\n            if (window.console) {\n                console.log(\"Error on selector: \" + selector);\n            }\n            throw e;\n        }\n    }\n\n    function invertObject(object) {\n        var key, new_object, value;\n        new_object = {};\n        for (key in object) {\n            value = object[key];\n            new_object[value] = key;\n        }\n        return new_object;\n    }\n\n    function cssToXPath(css_string) {\n        var css_block, k, len, out, token, tokens;\n        tokens = tokenizeCss(css_string);\n        if (tokens[0] && tokens[0] === ' ') {\n            tokens.splice(0, 1);\n        }\n        if (tokens[tokens.length - 1] && tokens[tokens.length - 1] === ' ') {\n            tokens.splice(tokens.length - 1, 1);\n        }\n        css_block = [];\n        out = \"\";\n        for (k = 0, len = tokens.length; k < len; k++) {\n            token = tokens[k];\n            if (token === ' ') {\n                out += cssToXPathBlockHelper(css_block);\n                css_block = [];\n            } else {\n                css_block.push(token);\n            }\n        }\n        return out + cssToXPathBlockHelper(css_block);\n    }\n\n    function cssToXPathBlockHelper(css_block) {\n        var current, expressions, first, i, k, l, len, out, re, ref, rest;\n        if (css_block.length === 0) {\n            return '//';\n        }\n        out = '//';\n        first = css_block[0].substring(0, 1);\n        if (first === ',') {\n            return \" | \";\n        }\n        if (first === ':' || first === '#' || first === '.') {\n            out += '*';\n        }\n        expressions = [];\n        re = null;\n        for (k = 0, len = css_block.length; k < len; k++) {\n            current = css_block[k];\n            first = current.substring(0, 1);\n            rest = current.substring(1);\n            if (first === ':') {\n                re = rest.match(/^nth-child\\((\\d+)\\)$/);\n                if (re) {\n                    expressions.push('(((count(preceding-sibling::*) + 1) = ' + re[1] + ') and parent::*)');\n                }\n            } else if (first === '.') {\n                expressions.push('contains(concat( \" \", @class, \" \" ), concat( \" \", \"' + rest + '\", \" \" ))');\n            } else if (first === '#') {\n                expressions.push('(@id = \"' + rest + '\")');\n            } else if (first === ',') {} else {\n                out += current;\n            }\n        }\n        if (expressions.length > 0) {\n            out += '[';\n        }\n        for (i = l = 0, ref = expressions.length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n            out += expressions[i];\n            if (i < expressions.length - 1) {\n                out += ' and ';\n            }\n        }\n        if (expressions.length > 0) {\n            out += ']';\n        }\n        return out;\n    }\n\n});","define('portia-web/utils/slyd-api', ['exports', 'ember', 'ic-ajax', 'portia-web/models/spider', 'portia-web/models/template', 'portia-web/models/item', 'portia-web/models/item-field', 'portia-web/models/extractor', 'portia-web/config/environment', 'portia-web/utils/utils'], function (exports, Ember, ajax, Spider, Template, Item, ItemField, Extractor, config, utils) {\n\n    'use strict';\n\n    var SlydApi = Ember['default'].Object.extend({\n        getApiUrl: function getApiUrl() {\n            return (config['default'].SLYD_URL || window.location.protocol + '//' + window.location.host) + '/projects';\n        },\n\n        getRootUrl: function getRootUrl() {\n            return config['default'].SLYD_URL || window.location.protocol + '//' + window.location.host;\n        },\n        /**\n        @public\n         The name of the current project.\n        */\n        project: null,\n\n        /**\n        @public\n         The name of the current spider.\n        */\n        spider: null,\n\n        projectSpecUrl: (function () {\n            return this.getApiUrl() + '/' + this.project + '/spec/';\n        }).property('project'),\n\n        botUrl: (function () {\n            return this.getApiUrl() + '/' + this.project + '/bot/';\n        }).property('project'),\n\n        scrapelyUrl: (function () {\n            return this.getApiUrl() + '/' + this.project + '/scrapely/';\n        }).property('project'),\n        /**\n        @public\n         Fetches project names.\n         @method getProjectNames\n        @for this\n        @return {Promise} a promise that fulfills with an {Array} of project names.\n        */\n        getProjectNames: function getProjectNames() {\n            var hash = {};\n            hash.type = 'GET';\n            hash.url = this.getApiUrl();\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to load project names';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Creates a new project. A project with the same name must not exist or\n        this operation will fail.\n        Project names must only contain alphanum, '.'s and '_'s.\n         @method createProject\n        @for this\n        @param {String} [projectName] The name of the new project.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        createProject: function createProject(projectName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'create', args: [projectName] };\n            hash.dataType = 'text';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to create project';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Deletes an existing project.\n         @method deleteProject\n        @for this\n        @param {String} [projectName] The name of the project to delete.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        deleteProject: function deleteProject(projectName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'rm', args: [projectName] };\n            hash.dataType = 'text';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to delete project';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Renames an existing project. This operation will not overwrite\n        existing projects.\n        Project names must only contain alphanum, '.'s and '_'s.\n         @method renameProject\n        @for this\n        @param {String} [oldProjectName] The name of the project to rename.\n        @param {String} [newProjectName] The new name for the project.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        renameProject: function renameProject(oldProjectName, newProjectName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'mv', args: [oldProjectName, newProjectName] };\n            hash.dataType = 'text';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to rename project';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Returns a list with the spider names for the current project.\n         @method getSpiderNames\n        @for this\n        @return {Promise} a promise that fulfills with an {Array} of spider names.\n        */\n        getSpiderNames: function getSpiderNames() {\n            var hash = {};\n            hash.type = 'GET';\n            hash.url = this.get('projectSpecUrl') + 'spiders';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to load spider names';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Fetches a spider.\n         @method loadSpider\n        @for this\n        @param {String} [spiderName] The name of the spider.\n        @return {Promise} a promise that fulfills with a JSON {Object}\n            containing the spider spec.\n        */\n        loadSpider: function loadSpider(spiderName) {\n            var hash = {};\n            hash.type = 'GET';\n            hash.url = this.get('projectSpecUrl') + 'spiders/' + (spiderName || this.get('spider'));\n            return this.makeAjaxCall(hash).then(function (spiderData) {\n                spiderData['name'] = spiderName || this.get('spider');\n                spiderData.templates = (spiderData.templates || []).map(function (template) {\n                    // Assign a name to templates. This is needed as Autoscraping templates\n                    // are not named.\n                    if (Ember['default'].isEmpty(template['name'])) {\n                        template['name'] = utils['default'].shortGuid();\n                    }\n                    return Template['default'].create(template);\n                });\n                return Spider['default'].create(spiderData);\n            }, function (err) {\n                err.title = 'Failed to load spider';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Fetches a template.\n         @method loadTemplate\n        @for this\n        @param {String} [spiderName] The name of the spider.\n        @param {String} [templateName] The name of the template.\n        @return {Promise} a promise that fulfills with a JSON {Object}\n            containing the template spec.\n        */\n        loadTemplate: function loadTemplate(spiderName, templateName) {\n            var hash = {};\n            hash.type = 'GET';\n            hash.url = this.get('projectSpecUrl') + 'spiders/' + (spiderName || this.get('spider')) + '/' + templateName;\n            return this.makeAjaxCall(hash).then(function (templateData) {\n                return Template['default'].create(templateData);\n            }, function (err) {\n                err.title = 'Failed to load template';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Renames an existing spider. This operation will overwrite\n        existing spiders.\n        Spider names must only contain alphanum, '.'s and '_'s.\n         @method renameSpider\n        @for this\n        @param {String} [oldSpiderName] The name of the spider to rename.\n        @param {String} [newSpiderName] The new name for the spider.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        renameSpider: function renameSpider(oldSpiderName, newSpiderName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.get('projectSpecUrl') + 'spiders';\n            hash.data = { cmd: 'mv', args: [oldSpiderName || this.get('spider'), newSpiderName] };\n            hash.dataType = 'text';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to rename spider';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Renames an existing template. This operation will overwrite\n        existing templates.\n        Template names must only contain alphanum, '.'s and '_'s.\n         @method renameTemplate\n        @for this\n        @param {String} [spiderName] The name of the spider owning the template.\n        @param {String} [oldTemplateName] The name of the template to rename.\n        @param {String} [newTemplateName] The new name for the template.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        renameTemplate: function renameTemplate(spiderName, oldTemplateName, newTemplateName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.get('projectSpecUrl') + 'spiders';\n            hash.data = { cmd: 'mvt', args: [spiderName || this.get('spiderName'), oldTemplateName, newTemplateName] };\n            hash.dataType = 'text';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to rename template';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Saves a spider for the current project.\n         @method saveSpider\n        @for this\n        @param {String} [spiderName] the name of the spider.\n        @param {Object} [spiderData] a JSON object containing the spider spec.\n        @param {Bool} [excludeTemplates] if true, don't save spider templates.\n        @return {Promise} promise that fulfills when the server responds.\n        */\n        saveSpider: function saveSpider(spider, excludeTemplates) {\n            var hash = {};\n            hash.type = 'POST';\n            var spiderName = spider.get('name'),\n                serialized = spider.serialize();\n            if (excludeTemplates) {\n                delete serialized['templates'];\n            }\n            hash.data = serialized;\n            hash.dataType = 'text';\n            hash.url = this.get('projectSpecUrl') + 'spiders/' + spiderName;\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to save spider';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Saves a spider template for the current project.\n         @method saveTemplate\n        @for this\n        @param {String} [spiderName] the name of the spider.\n        @param {String} [templateName] the name of the template.\n        @param {Object} [templateData] a JSON object containing the template spec.\n        @return {Promise} promise that fulfills when the server responds.\n        */\n        saveTemplate: function saveTemplate(spiderName, template) {\n            var hash = {};\n            hash.type = 'POST';\n            var templateName = template.get('name'),\n                serialized = template.serialize();\n            if (template.get('_new')) {\n                serialized['original_body'] = template.get('original_body');\n                template.set('_new', false);\n            }\n            hash.data = serialized;\n            hash.dataType = 'text';\n            hash.url = this.get('projectSpecUrl') + 'spiders/' + (spiderName || this.get('spider')) + '/' + templateName;\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to save template';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Deletes an existing spider.\n         @method deleteSpider\n        @for this\n        @param {String} [spiderName] The name of the spider to delete.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        deleteSpider: function deleteSpider(spiderName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.dataType = 'text';\n            hash.url = this.get('projectSpecUrl') + 'spiders';\n            hash.data = { cmd: 'rm', args: [spiderName || this.get('spider')] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to delete spider';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Copies existing spiders and/or items.\n         @method copySpider\n        @for this\n        @param {String} [srcProjectId] The id of the project to copy from.\n        @param {String} [dstProjectId] The id of the project to copy to.\n        @param {Array} [spiderNames] An array of {String} names of the spiders to copy.\n        @param {Array} [itemNames]  An array of {String} names of the items to copy.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        copySpider: function copySpider(srcProjectId, dstProjectId, spiderNames, itemNames) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.dataType = 'json';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'copy', args: [srcProjectId, dstProjectId, spiderNames, itemNames] };\n            return this.makeAjaxCall(hash);\n        },\n\n        /**\n        @public\n         Deletes an existing template.\n         @method deleteTemplate\n        @for this\n        @param {String} [spiderName] The name of the spider that owns the template.\n        @param {String} [spiderName] The name of the template to delete.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        deleteTemplate: function deleteTemplate(spiderName, templateName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.dataType = 'text';\n            hash.url = this.get('projectSpecUrl') + 'spiders';\n            hash.data = { cmd: 'rmt', args: [spiderName || this.get('spider'), templateName] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to delete template';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Fetches the current project items.\n         @method loadItems\n        @for this\n        @return {Promise} a promise that fulfills with an {Array} of JSON {Object}\n            containing the items spec.\n        }\n        */\n        loadItems: function loadItems() {\n            var hash = {};\n            hash.type = 'GET';\n            hash.url = this.get('projectSpecUrl') + 'items';\n            return this.makeAjaxCall(hash).then((function (items) {\n                items = this.dictToList(items, Item['default']);\n                items.forEach((function (item) {\n                    item.display_name = item.display_name || item.name;\n                    if (item.fields) {\n                        item.fields = this.dictToList(item.fields, ItemField['default']);\n                    }\n                }).bind(this));\n                return items;\n            }).bind(this), function (err) {\n                err.title = 'Failed to load items';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Saves the current project items.\n         @method saveItems\n        @for this\n        @param {Array} [items] an array of JSON {Object} containing the items\n            spec.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        saveItems: function saveItems(items) {\n            items = items.map((function (item) {\n                item = item.serialize();\n                if (item.fields) {\n                    item.fields = this.listToDict(item.fields);\n                }\n                return item;\n            }).bind(this));\n            items = this.listToDict(items);\n            var hash = {};\n            hash.type = 'POST';\n            hash.data = items;\n            hash.dataType = 'text';\n            hash.url = this.get('projectSpecUrl') + 'items';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to save items';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Fetches the current project extractors.\n         @method loadExtractors\n        @for this\n        @return {Promise} a promise that fulfills with an {Array} of JSON {Object}\n            containing the extractors spec.\n        */\n        loadExtractors: function loadExtractors() {\n            var hash = {};\n            hash.type = 'GET';\n            hash.url = this.get('projectSpecUrl') + 'extractors';\n            return this.makeAjaxCall(hash).then((function (extractors) {\n                return this.dictToList(extractors, Extractor['default']);\n            }).bind(this), function (err) {\n                err.title = 'Failed to load extractors';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Saves the current project extractors.\n         @method saveExtractors\n        @for this\n        @param {Array} [extractors] an array of JSON {Object} containing the\n            extractors spec.\n        @return {Promise} a promise that fulfills when the server responds.\n        */\n        saveExtractors: function saveExtractors(extractors) {\n            extractors = extractors.map(function (extractor) {\n                return extractor.serialize();\n            });\n            extractors = this.listToDict(extractors);\n            var hash = {};\n            hash.type = 'POST';\n            hash.data = extractors;\n            hash.dataType = 'text';\n            hash.url = this.get('projectSpecUrl') + 'extractors';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to save extractors';\n                throw err;\n            });\n        },\n\n        editProject: function editProject(project_name, revision) {\n            if (!this.get('serverCapabilities.version_control')) {\n                // if the server does not support version control, do\n                // nothing.\n                return new Ember['default'].RSVP.Promise(function (resolve) {\n                    resolve();\n                });\n            } else {\n                revision = revision ? revision : 'master';\n                var hash = {};\n                hash.type = 'POST';\n                hash.url = this.getApiUrl();\n                hash.data = { cmd: 'edit', args: [project_name, revision] };\n                hash.dataType = 'text';\n                return this.makeAjaxCall(hash)['catch'](function (err) {\n                    err.title = 'Failed to load project';\n                    throw err;\n                });\n            }\n        },\n\n        projectRevisions: function projectRevisions(projectName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'revisions', args: [projectName] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to load project revisions';\n                throw err;\n            });\n        },\n\n        conflictedFiles: function conflictedFiles(projectName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'conflicts', args: [projectName] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to load conflicted files';\n                throw err;\n            });\n        },\n\n        changedFiles: function changedFiles(projectName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'changes', args: [projectName] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to load changed files';\n                throw err;\n            });\n        },\n\n        hasTag: function hasTag(projectName, tagName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'has_tag', args: [projectName, tagName] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to load tags';\n                throw err;\n            });\n        },\n\n        addTag: function addTag(tagName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl() + '/' + this.get('project') + '/spec/spiders';\n            hash.data = { cmd: 'add_tag', args: [tagName] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to add tag: \"' + tagName + '\"';\n                throw err;\n            });\n        },\n\n        rollbackToTag: function rollbackToTag(tagName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl() + '/' + this.get('project') + '/spec/spiders';\n            hash.data = { cmd: 'checkout_tag', args: [tagName, true] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed rollback to \"' + tagName + '\"';\n                throw err;\n            });\n        },\n\n        publishProject: function publishProject(projectName, force) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'publish', args: [projectName, !!force] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to publish project';\n                throw err;\n            });\n        },\n\n        deployProject: function deployProject(projectName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'deploy', args: [projectName] };\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to deploy project';\n                throw err;\n            });\n        },\n\n        discardChanges: function discardChanges(projectName) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this.getApiUrl();\n            hash.data = { cmd: 'discard', args: [projectName] };\n            hash.dataType = 'text';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to discard changes';\n                throw err;\n            });\n        },\n\n        saveFile: function saveFile(projectName, fileName, contents) {\n            var hash = {};\n            hash.type = 'POST';\n            hash.url = this._getUrlFromPath(fileName);\n            hash.data = contents;\n            hash.dataType = 'text';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to save file';\n                throw err;\n            });\n        },\n\n        _getUrlFromPath: function _getUrlFromPath(path) {\n            path = path.slice(0, -5);\n            return this.get('projectSpecUrl') + path;\n        },\n\n        /**\n        @public\n         Fetches a page using the given spider.\n         @method fetchDocument\n        @for this\n        @param {String} [pageUrl] the URL of the page to fetch.\n        @param {String} [spiderName] the name of the spider to use.\n        @return {Promise} a promise that fulfills with an {Object} containing\n            the document contents (page), the response data (response), the\n            extracted items (items), the request fingerprint (fp), an error\n            message (error) and the links that will be followed (links).\n        */\n        fetchDocument: function fetchDocument(pageUrl, spiderName, baseurl) {\n            var hash = {};\n            hash.type = 'POST';\n            var data = { spider: spiderName || this.get('spider'),\n                request: { url: pageUrl } };\n            if (baseurl) {\n                data.baseurl = baseurl;\n            }\n            hash.data = data;\n            hash.url = this.get('botUrl') + 'fetch';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to fetch page';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Training scrapely using a given spider.\n         @method trainScrapely\n        @for this\n        @param {String} [spiderName] the name of the spider to use.\n        @return {Promise} a promise that fulfills with an {Object} containing\n            the document contents (page), the response data (response), the\n            extracted items (items), the request fingerprint (fp), an error\n            message (error) and the links that will be followed (links).\n        */\n        trainScrapely: function trainScrapely(spiderName) {\n            var hash = {};\n            hash.type = 'POST';\n            var data = { spider: spiderName || this.get('spider') };\n            hash.data = data;\n            hash.url = this.get('scrapelyUrl') + 'train';\n            return this.makeAjaxCall(hash)['catch'](function (err) {\n                err.title = 'Failed to train scrapely';\n                throw err;\n            });\n        },\n\n        /**\n        @public\n         Detect cookies using current url.\n         @method getCookies\n        @for this\n        @param {String} [currentUrl] the currentUrl of the page.\n        @return {Promise} a promise that fulfills with an {Object} containing\n            the cookies set by the website when requesting that url.\n        */\n        getCookies: function getCookies(currentUrl) {\n            var hash = {};\n            hash.type = 'POST';\n            var data = { current_url: currentUrl || this.get('currentUrl') };\n            hash.data = data;\n            hash.url = this.get('botUrl') + 'getCookies';\n            return this.makeAjaxCall(hash).then((function (cookies) {\n                return cookies;\n            }).bind(this), function (err) {\n                err.title = 'Failed to get cookies';\n                throw err;\n            });\n        },\n\n        /**\n        @private\n         Transforms a list of the form:\n            [ { name: 'obj1', x: 'a' }, { name: 'obj2', x: 'b' }]\n         into an object of the form:\n            {\n                obj1:\n                    { x: 'a' },\n                obj2:\n                    { x: 'b' }\n            }\n         @method listToDict\n        @for this\n        @param {Array} [list] the array to trasnform.\n        @return {Object} the result object.\n        */\n        listToDict: function listToDict(list) {\n            var dict = {};\n            list.forEach(function (element) {\n                // Don't modify the original object.\n                element = Ember['default'].copy(element);\n                var name = element['name'];\n                delete element['name'];\n                dict[name] = element;\n            });\n            return dict;\n        },\n\n        /**\n        @private\n         Transforms an object of the form:\n            {\n                obj1:\n                    { x: 'a' },\n                obj2:\n                    { x: 'b' }\n            }\n         into a list of the form:\n            [ { name: 'obj1', x: 'a' }, { name: 'obj2', x: 'b' }]\n         @method listToDict\n        @for this\n        @param {Array} [list] the array to trasnform.\n        @return {Object} the result object.\n        */\n        dictToList: function dictToList(dict, wrappingType) {\n            var entries = [];\n            var keys = Object.keys(dict);\n            keys.forEach(function (key) {\n                var entry = dict[key];\n                entry['name'] = key;\n                if (wrappingType) {\n                    entry = wrappingType.create(entry);\n                }\n                entries.pushObject(entry);\n            });\n            return entries;\n        },\n\n        makeAjaxCall: function makeAjaxCall(hash) {\n            var headers = hash.headers || {},\n                data = hash.data || {},\n                cmd;\n            try {\n                cmd = data.cmd;\n            } catch (_) {\n                cmd = '-';\n            }\n            hash.data = JSON.stringify(hash.data);\n            hash.headers = headers;\n            return ajax['default'](hash)['catch'](function (reason) {\n                var msg = 'Error processing ' + hash.type + ' to ' + hash.url;\n                if (hash.data) {\n                    msg += '\\nwith data ' + hash.data;\n                }\n                msg += '\\n\\nThe server returned ' + reason.textStatus + '(' + reason.errorThrown + ')' + '\\n\\n' + reason.jqXHR.responseText;\n                var err = new Error(msg);\n                err.name = 'HTTPError';\n                err.status = reason.jqXHR.status;\n                err.reason = reason;\n                if (reason.jqXHR.getResponseHeader('Content-Type') === 'application/json') {\n                    try {\n                        err.data = Ember['default'].$.parseJSON(reason.jqXHR.responseText);\n                    } catch (e) {\n                        err.data = reason.jqXHR.responseText;\n                        utils['default'].logError(e, { extra: { invalidJSON: err.data } });\n                    }\n                }\n                throw err;\n            });\n        }\n    });\n\n    exports['default'] = SlydApi;\n\n    exports.SlydApi = SlydApi;\n\n});","define('portia-web/utils/sprite-store', ['exports', 'ember', 'portia-web/utils/canvas'], function (exports, Ember, canvas) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.extend({\n\n        init: function init(options) {\n            options = options || this.getWithDefault('options', {});\n            var fillColor = options.fillColor || 'rgba(88,150,220,0.4)',\n                strokeColor = options.strokeColor || 'rgba(88,150,220,0.4)',\n                textColor = options.textColor || 'white';\n            this.set('fillColor', fillColor);\n            this.set('strokeColor', strokeColor);\n            this.set('textColor', textColor);\n            this.set('_sprites', []);\n            this.set('_ignores', []);\n            this.set('_elements', []);\n        },\n\n        sprites: (function () {\n            var arr = this.get('_sprites').map(function (s) {\n                if (s.element) {\n                    return canvas.AnnotationSprite.create({\n                        annotation: s,\n                        fillColor: s.fillColor,\n                        strokeColor: s.strokeColor,\n                        textColor: s.textColor\n                    });\n                } else {\n                    return null;\n                }\n            }).concat(this.get('_ignores').map(function (s) {\n                if (s.element) {\n                    return canvas.IgnoreSprite.create({\n                        ignore: s,\n                        fillColor: s.fillColor,\n                        strokeColor: s.strokeColor,\n                        textColor: s.textColor\n                    });\n                } else {\n                    return null;\n                }\n            }));\n            return arr.filter(function (s) {\n                if (s) {\n                    return true;\n                }\n            });\n        }).property('_sprites.@each', '_ignores.@each'),\n\n        addSprite: function addSprite(element, text) {\n            var scrapelyData = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n            var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\n\n            var updated = false;\n            this.get('_sprites').forEach(function (sprite) {\n                if (Ember['default'].$(sprite.element).get(0) === element) {\n                    sprite.setProperties(options);\n                    sprite.set('name', text);\n                    sprite.set('scrapelyData', scrapelyData[0]);\n                    updated = true;\n                }\n            });\n            if (updated) {\n                this.notifyPropertyChange('_sprites');\n            } else {\n                this.get('_sprites').pushObject(Ember['default'].Object.create({\n                    name: text,\n                    scrapelyData: scrapelyData[0],\n                    element: element,\n                    highlight: false,\n                    fillColor: options.fillColor || this.get('fillColor'),\n                    strokeColor: options.strokeColor || this.get('strokeColor'),\n                    textColor: options.textColor || this.get('textColor')\n                }));\n            }\n        },\n\n        addIgnore: function addIgnore(element, ignoreBeneath) {\n            var updated = false;\n            this.get('_ignores').forEach(function (sprite) {\n                if (Ember['default'].$(sprite.element).get(0) === element) {\n                    sprite.set('ignoreBeneath', ignoreBeneath);\n                    updated = true;\n                }\n            });\n            if (updated) {\n                this.notifyPropertyChange('_ignores');\n            } else {\n                this.get('_ignores').pushObject(Ember['default'].Object.create({\n                    element: element,\n                    highlight: false,\n                    ignoreBeneath: ignoreBeneath,\n                    fillColor: this.get('fillColor'),\n                    strokeColor: this.get('strokeColor'),\n                    textColor: this.get('textColor')\n                }));\n            }\n        },\n\n        highlight: function highlight(element) {\n            this.get('_sprites').forEach(function (sprite) {\n                if (Ember['default'].$(sprite.element).get(0) === element) {\n                    sprite.set('highlighted', true);\n                }\n            });\n            this.notifyPropertyChange('_sprites');\n        },\n\n        removeHighlight: function removeHighlight(element) {\n            this.get('_sprites').forEach(function (sprite) {\n                if (Ember['default'].$(sprite.element).get(0) === element) {\n                    sprite.set('highlighted', false);\n                }\n            });\n            this.notifyPropertyChange('_sprites');\n        },\n\n        removeSprite: function removeSprite(element) {\n            this.set('_sprites', this.get('_sprites').filter(function (sprite) {\n                if (sprite.element !== element) {\n                    return true;\n                }\n            }));\n        },\n\n        removeIgnore: function removeIgnore(element) {\n            this.set('_ignores', this.get('_ignores').filter(function (ignore) {\n                if (ignore.element !== element) {\n                    return true;\n                }\n            }));\n        }\n    });\n\n});","define('portia-web/utils/suggest-annotations', ['exports'], function (exports) {\n\n    'use strict';\n\n    exports.suggestAnnotations = suggestAnnotations;\n    exports.registerSuggester = registerSuggester;\n    exports.findReleatedTableCell = findReleatedTableCell;\n\n    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n    var text = 'content';\n\n    function imageScore(img) {\n        var cr = img.getBoundingClientRect();\n        var area = cr.width * cr.height;\n        var penalization = cr.top > 1000 ? 500 / cr.top : 1; // Penalize images under the fold\n        return area * penalization;\n    }\n\n    function xpath(expr, ctx, type) {\n        ctx = ctx || document;\n        type = type || XPathResult.ANY_TYPE;\n        var doc = ctx.nodeType === Node.DOCUMENT_NODE ? ctx : ctx.ownerDocument;\n        var nsResolver = doc.createNSResolver(doc.documentElement);\n        var arr = [],\n            i = null;\n        try {\n            var res = doc.evaluate(expr, ctx, nsResolver, type, null);\n            type = res.resultType;\n            if (type === XPathResult.NUMBER_TYPE) {\n                return res.numberValue;\n            } else if (type === XPathResult.STRING_TYPE) {\n                return res.stringValue;\n            } else if (type === XPathResult.BOOLEAN_TYPE) {\n                return res.booleanValue;\n            } else if (type === XPathResult.UNORDERED_NODE_ITERATOR_TYPE || type === XPathResult.ORDERED_NODE_ITERATOR_TYPE) {\n                while ((i = res.iterateNext()) !== null) {\n                    arr.push(i);\n                }\n                return arr;\n            } else if (type === XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE || type === XPathResult.ORDERED_NODE_SNAPSHOT_TYPE) {\n                for (i = 0; i < res.snapshotLength; i++) {\n                    arr.push(res.snapshotItem(i));\n                }\n                return arr;\n            } else if (type === XPathResult.ANY_UNORDERED_NODE_TYPE || type === XPathResult.FIRST_ORDERED_NODE_TYPE) {\n                return res.singleNodeValue;\n            } else {\n                throw new Error('Unknown result type ' + type);\n            }\n        } catch (e) {\n            console.log(e);\n            return null;\n        }\n    }\n\n    function xpath_one(expr, ctx) {\n        return xpath(expr, ctx, XPathResult.FIRST_ORDERED_NODE_TYPE);\n    }\n\n    function getFieldNamesRegex(seedWords) {\n        var afix = '[a-z0-9_\\\\.-]+';\n        var source = seedWords.map(function (word) {\n            return [word, afix + word, word + afix].join('|');\n        }).join('|');\n        return new RegExp('^(' + source + ')$', 'i');\n    }\n\n    function findField(seedWords, fieldNames) {\n        var re = getFieldNamesRegex(seedWords);\n        var bestMatch = null;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = fieldNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var _name = _step.value;\n\n                if (re.test(_name) && (!bestMatch || bestMatch.length > _name.length)) {\n                    bestMatch = _name;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator['return']) {\n                    _iterator['return']();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return bestMatch;\n    }\n\n    function suggestImageAnnotation(document, fieldNames, next) {\n        // Returns [[field, node, attr, probability]]\n        var field = findField(['img', 'image', 'photo'], fieldNames);\n        if (!field) {\n            return next([]);\n        }\n\n        var images = Array.from(document.querySelectorAll('img'));\n        if (!images.length) {\n            return next([]);\n        }\n        // Wait for images to load\n        setTimeout(function () {\n            var biggest = images.reduce(function (a, b) {\n                return imageScore(a) > imageScore(b) ? a : b;\n            });\n            return next([[field, biggest, 'src', 0.6]]);\n        }, 1500);\n    }\n\n    function suggestTitleAnnotation(document, fieldNames, next) {\n        var field = findField(['title'], fieldNames);\n        var title = document.querySelector('title');\n        if (field && title) {\n            return next([[field, title, text, 0.6]]);\n        }\n        return next([]);\n    }\n\n    function suggestMicrodataAnnotations(document, fieldNames, next) {\n        // Returns [[field, node, attr, probability]]\n        var res = [];\n        var props = document.querySelectorAll('[itemprop]');\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = Array.from(props)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var prop = _step2.value;\n\n                var propName = prop.getAttribute('itemprop');\n                var field = findField([propName], fieldNames);\n                if (field) {\n                    var exactMatch = propName.toLowerCase() === field.toLowerCase();\n                    var attr = prop.tagName === 'IMG' ? 'src' : text;\n                    res.push([field, prop, attr, exactMatch ? 0.8 : 0.5]);\n                }\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n                    _iterator2['return']();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n\n        next(res);\n    }\n\n    var enabledSuggesters = {\n        'title': suggestTitleAnnotation,\n        'image': suggestImageAnnotation,\n        'microdata': suggestMicrodataAnnotations\n    };\n\n    /**\n     * Returns [[field, node, attr, suggestorName]]\n     * Calls all the enabled suggesters and returns only the most probable\n     * suggestion for each field.\n     */\n\n    function suggestAnnotations(document, fieldNames, callback) {\n        var suggestionsByField = {};\n        var suggesterNames = Object.keys(enabledSuggesters);\n        var pendingSuggesters = suggesterNames.length;\n\n        var processSuggestions = function processSuggestions(name, suggestions) {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = suggestions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var suggestion = _step3.value;\n\n                    if (!(suggestion[0] in suggestionsByField) || suggestion[3] > suggestionsByField[suggestion[0]][4]) {\n                        suggestion.splice(3, 0, name);\n                        suggestionsByField[suggestion[0]] = suggestion;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {\n                        _iterator3['return']();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            pendingSuggesters--;\n            if (pendingSuggesters === 0) {\n                callback(Object.values(suggestionsByField).map(function (suggestion) {\n                    return suggestion.slice(0, 4);\n                }));\n            }\n        };\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n            for (var _iterator4 = suggesterNames[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var _name2 = _step4.value;\n\n                var suggester = enabledSuggesters[_name2];\n                try {\n                    suggester(document, fieldNames, processSuggestions.bind(null, _name2));\n                } catch (e) {\n                    console.error(e);\n                    processSuggestions(_name2, []);\n                }\n            }\n        } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion4 && _iterator4['return']) {\n                    _iterator4['return']();\n                }\n            } finally {\n                if (_didIteratorError4) {\n                    throw _iteratorError4;\n                }\n            }\n        }\n    }\n\n    function registerSuggester(name, suggester) {\n        enabledSuggesters[name] = suggester;\n    }\n\n    /**\n     * Suggest the href attributes of links for fields names <something>_url.\n     *\n     * For example\n     *\n     * next_url => suggest <a href=\"[annotation]\">Next →</a>\n     * comments_href => suggest <a href=\"[annotation]\">Show comments</a>\n     */\n    registerSuggester('links', function linkSuggestor(document, fieldNames, next) {\n        var res = [],\n            name = undefined;\n        var url_word = '(?:url|href|link)';\n        var regexp = new RegExp(url_word + '$|^' + url_word, 'i');\n\n        var links = Array.from(document.querySelectorAll('a[href]')).map(function (node) {\n            return [node, node.textContent];\n        });\n\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n            for (var _iterator5 = fieldNames[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var field = _step5.value;\n\n                if ((name = field.replace(regexp, '')).length !== field.length) {\n                    name = name.replace(/^[-_]+/, '').replace(/[-_]+$/, '').replace(/[-_]+/g, '\\\\b.{0,10}\\\\b');\n                    var nameRegexp = new RegExp('^.{0,10}\\\\b' + name + '\\\\b.{0,10}$', 'i');\n                    var best = null;\n                    var _iteratorNormalCompletion6 = true;\n                    var _didIteratorError6 = false;\n                    var _iteratorError6 = undefined;\n\n                    try {\n                        for (var _iterator6 = links[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                            var _step6$value = _slicedToArray(_step6.value, 2);\n\n                            var node = _step6$value[0];\n                            var cnt = _step6$value[1];\n\n                            if (nameRegexp.test(cnt) && (!best || best[1].length > cnt.length)) {\n                                best = [node, cnt];\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError6 = true;\n                        _iteratorError6 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion6 && _iterator6['return']) {\n                                _iterator6['return']();\n                            }\n                        } finally {\n                            if (_didIteratorError6) {\n                                throw _iteratorError6;\n                            }\n                        }\n                    }\n\n                    if (best) {\n                        res.push([field, best[0], 'href', 0.2]);\n                    }\n                }\n            }\n        } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion5 && _iterator5['return']) {\n                    _iterator5['return']();\n                }\n            } finally {\n                if (_didIteratorError5) {\n                    throw _iteratorError5;\n                }\n            }\n        }\n\n        next(res);\n    });\n\n    function findReleatedTableCell(td) {\n        // Check for a vertical header\n        if (!td.previousElementSibling && td.nextElementSibling && td.nextElementSibling.tagName === 'TD' && !(td.nextElementSibling.nextElementSibling && td.nextElementSibling.nextElementSibling.tagName === 'TD') && td.parentNode.parentNode.tagName !== 'THEAD') {\n            return td.nextElementSibling;\n        }\n        // If not vertical, check for horizontal header, first find next row\n        var nextRow = xpath_one('following::tr[1]', td);\n\n        // Ensure they are in the same table\n        if (nextRow && xpath_one('ancestor::table[1]', td) !== xpath_one('ancestor::table[1]', nextRow)) {\n            return null;\n        }\n\n        // Find the same column in the next now\n        var column = 0,\n            n = td;\n        while (n.previousElementSibling) {\n            n = n.previousElementSibling;\n            if (n.tagName === 'TD' || n.tagName === 'TH') {\n                column += parseInt(n.getAttribute('colspan') || 1, 10);\n            }\n        }\n        n = nextRow.firstElementChild;\n        while (n && column > 0) {\n            if (n.tagName === 'TD' || n.tagName === 'TH') {\n                column -= parseInt(n.getAttribute('colspan') || 1, 10);\n            }\n            n = n.nextElementSibling;\n        }\n        if (n && n.tagName === 'TD') {\n            return n;\n        }\n        return null;\n    }\n\n    /**\n     * If a table header cell contains the field name, suggest the releated body cell\n     */\n    registerSuggester('table', function tableSuggestor(document, fieldNames, next) {\n        var ths = Array.from(document.querySelectorAll('\\n        tr:first-child > td,\\n        tr:first-child > th,\\n        tr > td:first-child,\\n        tr > th:first-child\\n    ')).map(function (node) {\n            return [node, node.textContent];\n        });\n\n        var res = [];\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n            for (var _iterator7 = fieldNames[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                var field = _step7.value;\n\n                field = field.replace(/[-_]/g, '\\\\b.{0,10}\\\\b');\n                var nameRegexp = new RegExp('\\\\b' + field + '\\\\b', 'i');\n                var best = null;\n                var _iteratorNormalCompletion8 = true;\n                var _didIteratorError8 = false;\n                var _iteratorError8 = undefined;\n\n                try {\n                    for (var _iterator8 = ths[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                        var _step8$value = _slicedToArray(_step8.value, 2);\n\n                        var node = _step8$value[0];\n                        var cnt = _step8$value[1];\n\n                        if (nameRegexp.test(cnt) && (!best || best[1].length > cnt.length)) {\n                            var releated = findReleatedTableCell(node);\n                            if (releated) {\n                                best = [releated, cnt];\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError8 = true;\n                    _iteratorError8 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion8 && _iterator8['return']) {\n                            _iterator8['return']();\n                        }\n                    } finally {\n                        if (_didIteratorError8) {\n                            throw _iteratorError8;\n                        }\n                    }\n                }\n\n                if (best) {\n                    res.push([field, best[0], text, 0.2]);\n                }\n            }\n        } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion7 && _iterator7['return']) {\n                    _iterator7['return']();\n                }\n            } finally {\n                if (_didIteratorError7) {\n                    throw _iteratorError7;\n                }\n            }\n        }\n\n        next(res);\n    });\n\n    /**\n     * If an element ID or class matches exactly the field name, suggest it\n     */\n    registerSuggester('id_class', function idClassSuggestor(document, fieldNames, next) {\n        var res = [];\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n            for (var _iterator9 = fieldNames[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                var field = _step9.value;\n\n                var node = document.getElementById(field) || document.querySelector('.' + field);\n                if (node) {\n                    res.push([field, node, node.tagName === 'IMG' ? 'src' : text, node.id === field ? 0.25 : 0.15]);\n                }\n            }\n        } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion9 && _iterator9['return']) {\n                    _iterator9['return']();\n                }\n            } finally {\n                if (_didIteratorError9) {\n                    throw _iteratorError9;\n                }\n            }\n        }\n\n        next(res);\n    });\n\n    /**\n     * If a <dt> tag contains the field name, suggest the associated <dd>\n     */\n    registerSuggester('dt_dd', function definitionSuggestor(document, fieldNames, next) {\n        var res = [];\n        var dts = Array.from(document.querySelectorAll('dt')).map(function (node) {\n            return [node, node.textContent];\n        });\n\n        var _iteratorNormalCompletion10 = true;\n        var _didIteratorError10 = false;\n        var _iteratorError10 = undefined;\n\n        try {\n            for (var _iterator10 = fieldNames[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                var field = _step10.value;\n\n                field = field.replace(/[-_]+/g, '\\\\b.{0,10}\\\\b');\n                var nameRegexp = new RegExp('\\\\b' + field + '\\\\b', 'i');\n                var best = null;\n                var _iteratorNormalCompletion11 = true;\n                var _didIteratorError11 = false;\n                var _iteratorError11 = undefined;\n\n                try {\n                    for (var _iterator11 = dts[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                        var _step11$value = _slicedToArray(_step11.value, 2);\n\n                        var node = _step11$value[0];\n                        var cnt = _step11$value[1];\n\n                        if (nameRegexp.test(cnt) && (!best || best[1].length > cnt.length)) {\n                            var dd_node = xpath_one('following-sibling::dd', node);\n                            if (dd_node) {\n                                best = [dd_node, cnt];\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError11 = true;\n                    _iteratorError11 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion11 && _iterator11['return']) {\n                            _iterator11['return']();\n                        }\n                    } finally {\n                        if (_didIteratorError11) {\n                            throw _iteratorError11;\n                        }\n                    }\n                }\n\n                if (best) {\n                    res.push([field, best[0], text, 0.2]);\n                }\n            }\n        } catch (err) {\n            _didIteratorError10 = true;\n            _iteratorError10 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion10 && _iterator10['return']) {\n                    _iterator10['return']();\n                }\n            } finally {\n                if (_didIteratorError10) {\n                    throw _iteratorError10;\n                }\n            }\n        }\n\n        next(res);\n    });\n\n    function getCurrencyRegExp() {\n        /*\n        Currency simbols found in: http://www.xe.com/symbols.php\n         Extracted with:\n         Array.from(document.querySelectorAll('.cSmbl_Fnt_AU'))\n            .map(x => x.textContent)\n            .filter(x => x && !/[\\u00A2-\\u00A5\\u20A0-\\u20CF]/.test(x));\n        */\n        var currency_symbol = '(:?[¢-¥₠-⃏؋$ƒP៛QL﷼SR฿€]'; // Unicode currency pane and one letter currency symbols\n        currency_symbol += '|[A-Z]{3}'; // Currency code\n        currency_symbol += '|(BZ|R|RD|J|C|NT|TT|Z)\\\\$|\\\\$[bU]'; // Different kinds of dollars\n        currency_symbol += '|Lek|ман|p\\\\.|KM|лв|kn|Kč|kr|Ft|Rp|Ls|Lt|ден|RM|MT|B/\\\\.|Gs|S/\\\\.|zł|lei|руб|Дин\\\\.|Bs)'; // Rest of currencies\n\n        var numbers = '[0-9\\\\., ]+';\n\n        return new RegExp('^(' + currency_symbol + numbers + '|' + numbers + currency_symbol + ')$');\n    }\n\n    function getDateRegExp() {\n        // Bad approximation, it will works for most numeric or english dates\n        return new RegExp(['NN/NN/NNNN', 'NNNN/NN/NN', 'NN? of \\\\w+ of NNNN'].join('|').replace(/N/g, '\\\\d').replace(/\\//g, '[/\\\\. -]'));\n    }\n\n    /**\n     * If the pattern: <field_name>: <inline_text> is found, suggest it\n     * If text matching a price is found and there is a field called price, suggest it\n     * If text matching a date is found and there is a field called date, suggest it\n     * If text matching a percentage is found and there is a field called percent, suggest it\n     */\n    registerSuggester('text_content', function textSuggestor(document, fieldNames, next) {\n        var res = [];\n\n        function score(a) {\n            // Returns number 0-0.0001 representing how emphasized is the node, typographically\n            var style = document.defaultView && document.defaultView.getComputedStyle(a.parentNode);\n            if (!style) {\n                return 0;\n            }\n\n            var res = parseInt(style.fontSize, 10) + parseInt(style.fontWeight, 10) / 1000 + (style.textDecorationLine === 'line-through' ? -5 : 0) + (style.textDecorationLine === 'underline' ? +1 : 0);\n\n            return Math.min(res / 50, 0.0001);\n        }\n\n        var texts = xpath('.//text()[normalize-space()]', document.body);\n\n        var priceField = findField(['price'], fieldNames);\n        var dateField = findField(['date', 'created', 'updated'], fieldNames);\n        var percentField = findField(['percent', 'discount'], fieldNames);\n        var priceRegexp = getCurrencyRegExp();\n        var dateRegexp = getDateRegExp();\n        var percentRegExp = /^\\d+([\\.,]\\d+)?%$/;\n\n        var _iteratorNormalCompletion12 = true;\n        var _didIteratorError12 = false;\n        var _iteratorError12 = undefined;\n\n        try {\n            for (var _iterator12 = fieldNames[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                var field = _step12.value;\n\n                field = field.replace(/[-_]/g, '\\\\b.{0,7}\\\\b');\n\n                var nameColonRegExp = new RegExp('^.{0,7}\\\\b' + field + '\\\\b.{0,7}:\\\\s*\\\\S', 'i');\n                var nameEndRegExp = new RegExp('^.{0,7}\\\\b' + field + '\\\\b.{0,7}:\\\\s*$', 'i');\n                var specialRegExp = null;\n\n                if (field === priceField) {\n                    specialRegExp = priceRegexp;\n                } else if (field === dateField) {\n                    specialRegExp = dateRegexp;\n                } else if (field === percentField) {\n                    specialRegExp = percentRegExp;\n                }\n\n                var _iteratorNormalCompletion13 = true;\n                var _didIteratorError13 = false;\n                var _iteratorError13 = undefined;\n\n                try {\n                    for (var _iterator13 = texts[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                        var node = _step13.value;\n\n                        if (specialRegExp && specialRegExp.test(node.nodeValue)) {\n                            res.push([field, node.parentNode, text, 0.12 + score(node.parentNode)]);\n                        }\n\n                        if (nameEndRegExp.test(node.nodeValue)) {\n                            var nextText = xpath_one('following::text()[normalize-space()]', node);\n                            if (nextText) {\n                                res.push([field, nextText.parentNode, text, 0.1 + score(nextText.parentNode)]);\n                            }\n                        } else if (nameColonRegExp.test(node.nodeValue)) {\n                            res.push([field, node.parentNode, text, 0.1 + score(node.parentNode)]);\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError13 = true;\n                    _iteratorError13 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion13 && _iterator13['return']) {\n                            _iterator13['return']();\n                        }\n                    } finally {\n                        if (_didIteratorError13) {\n                            throw _iteratorError13;\n                        }\n                    }\n                }\n            }\n        } catch (err) {\n            _didIteratorError12 = true;\n            _iteratorError12 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion12 && _iterator12['return']) {\n                    _iterator12['return']();\n                }\n            } finally {\n                if (_didIteratorError12) {\n                    throw _iteratorError12;\n                }\n            }\n        }\n\n        next(res);\n    });\n\n});","define('portia-web/utils/timer', ['exports', 'ember', 'portia-web/utils/utils'], function (exports, Ember, utils) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Object.extend({\n        init: function init(websocket) {\n            var hidden, visibilityChange;\n            if (typeof document.hidden !== \"undefined\") {\n                hidden = \"hidden\";\n                visibilityChange = \"visibilitychange\";\n            } else if (typeof document.mozHidden !== \"undefined\") {\n                hidden = \"mozHidden\";\n                visibilityChange = \"mozvisibilitychange\";\n            } else if (typeof document.msHidden !== \"undefined\") {\n                hidden = \"msHidden\";\n                visibilityChange = \"msvisibilitychange\";\n            } else if (typeof document.webkitHidden !== \"undefined\") {\n                hidden = \"webkitHidden\";\n                visibilityChange = \"webkitvisibilitychange\";\n            }\n            // Handle user changing tab\n            document.addEventListener(visibilityChange, (function () {\n                if (document[hidden]) {\n                    this.pause();\n                } else {\n                    this.resume();\n                }\n            }).bind(this), false);\n            // Handle user putting browser into background\n            window.addEventListener('blur', this.pause.bind(this));\n            window.addEventListener('focus', this.resume.bind(this));\n            this.set('_startTime', new Date());\n            this.set('sessionid', utils['default'].shortGuid());\n            this.set('ws', websocket);\n        },\n\n        pause: function pause() {\n            // Avoid overwriting pause if called twice without resume\n            if (this.get('paused') || this.get('ws.closed')) {\n                return;\n            }\n            this.set('paused', true);\n            this.get('ws').send({\n                '_command': 'pause',\n                '_meta': {\n                    'session_id': this.get('sessionid')\n                }\n            });\n        },\n\n        resume: function resume() {\n            if (!this.get('paused') || this.get('ws.closed')) {\n                return;\n            }\n            this.set('paused', false);\n            this.get('ws').send({\n                '_command': 'resume',\n                '_meta': {\n                    'session_id': this.get('sessionid')\n                }\n            });\n        }\n    });\n\n});","define('portia-web/utils/utils', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports.cleanUrl = cleanUrl;\n    exports.guid = guid;\n    exports.shortGuid = shortGuid;\n    exports.toType = toType;\n    exports.captureMessage = captureMessage;\n    exports.logError = logError;\n\n    function cleanUrl(url) {\n        if (typeof url !== 'string') {\n            return null;\n        }\n        url = url.trim();\n        if (!/^https?:\\/\\//i.test(url)) {\n            url = 'http://' + url;\n        }\n        try {\n            url = new URI(url).normalizeProtocol().normalizeHostname().normalizePort();\n        } catch (e) {\n            return null;\n        }\n        if (!url.host()) {\n            return null;\n        }\n        return url.toString();\n    }\n\n    /**\n     * Four random hex characters\n     */\n    function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    function guid() {\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    }\n\n    function shortGuid(separator) {\n        separator = typeof separator !== 'undefined' ? separator : '-';\n        return s4() + separator + s4() + separator + s4();\n    }\n\n    function toType(obj) {\n        return ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n    }\n\n    function captureMessage(msg, params) {\n        Ember['default'].Logger.log(msg);\n        if (window.Raven) {\n            Raven.captureMessage(msg, params);\n        }\n    }\n\n    function logError(err, params) {\n        Ember['default'].Logger.error(err);\n        if (window.Raven) {\n            Raven.captureException(err, params);\n        }\n    }\n\n});","define('portia-web/utils/validate-field-name', ['exports'], function (exports) {\n\n    'use strict';\n\n    exports['default'] = validateFieldName;\n\n    function validateFieldName(name, fields) {\n        // Ensuring that field names don't start with underscores prevents\n        // overwriting _item, _template and any future \"protected\" property\n        // we might add to extracted items.\n        if (/^_/.test(name)) {\n            return \"Field can't start with underscores\";\n        } else if (name === 'url') {\n            return 'Naming a field \"url\" is not allowed as there is already a field with this name';\n        } else if (fields.findBy('name', name)) {\n            return 'There is already a field with that name.';\n        }\n        return null; // No error\n    }\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('portia-web/config/environment', ['ember'], function(Ember) {\n  var prefix = 'portia-web';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"portia-web/tests/test-helper\");\n} else {\n  require(\"portia-web/app\")[\"default\"].create({});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxrhDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvvcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrj4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxttllxtvgpjnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrkhnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxnrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvbjSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpryBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrgvszWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACffzvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpttvtlrnBA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"portia-web.js"}